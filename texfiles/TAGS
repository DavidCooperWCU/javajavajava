
0.intro.tex,4278
\chapter{Computers, \mbox{Objects}, and Java}Computers,6,115
\label{chapter-intro}chapter-intro7,161
\section{Welcome}Welcome40,1097
\vspace{-12pt}\section{What Is a Computer?}What53,1828
components (Fig.~\ref{fig-blockdiagram}fig-blockdiagram71,2797
\label{fig-blockdiagram}fig-blockdiagram81,3096
\label{pg-fig-blockdiagram}pg-fig-blockdiagram82,3121
\vspace{5pt}\item  {\it Primary memory\index{computer memory}}computer97,3599
\vspace{5pt}\item  {\it Secondary storage\index{computer computer107,4210
\vspace{5pt}\item  The {\it central processing unit\index{central central116,4699
(CPU\index{CPU}CPU118,4783
cycle}\index{fetch-execute cycle}, whereby it repeatedly gets thefetch-execute124,5141
\vspace{7pt}\noindent There are two main types of software:\index{software}software136,5683
\section*{*166,7112
\section{Networks, the Internet and the World Wide Web}Networks,198,8886
connected to various-sized {\it networks\index{networks}networks200,9017
computing\index{client-server}client-server213,9731
\splarge The {\it Internet\index{Internet}Internet231,10795
globe.  The {\it World Wide Web\index{World Wide Web}World233,10932
(WWW\index{WWW}WWW234,10986
Protocol (HTTP\index{HTTP}HTTP237,11186
HTML}\index{HTML}HTML249,11922
following {\it URL (Uniform Resource Locator)}\index{Uniform ResourceUniform273,12868
Locator}\index{URL}URL274,12938
(Fig.~\ref{fig-http}fig-http290,13523
\label{fig-http}fig-http303,14045
\label{pg-fig-http}pg-fig-http304,14062
\section{Why Study Programming?}Why324,15028
\section{Programming Languages}Programming359,16938
language\index{high-level language}}, such as Java, C, C++, orhigh-level361,17042
language\index{machine language}}, which is the languagemachine393,18643
{\it platform dependent\index{platform independence}}.platform400,19076
source code\index{source code}} program into machine language code orsource479,22568
{\bf object code\index{object code}}, which is the only code that canobject480,22638
translator\index{translator}translator483,22835
\label{fig-translator}fig-translator494,23262
\label{pg-fig-translator}pg-fig-translator495,23285
interpreter\index{interpreter}interpreter500,23397
on to the next line of source code.  A {\bf compiler\index{compiler}compiler502,23535
\section{Why Java?}Why525,24806
\section{What Is \mbox{Object-Oriented} Programming?}What628,29873
\subsection{Basic \mbox{Object-Oriented} Programming Metaphor: Basic638,30395
layout your new kitchen (Fig.~\ref{fig-kitchen}fig-kitchen646,30745
\subsection{What is an Object?}What669,32080
Figure~\ref{fig-umlobj1}fig-umlobj1680,32640
\label{fig-umlobj1}fig-umlobj1694,33452
\label{pg-fig-umlobj1}pg-fig-umlobj1695,33472
\subsection{Attributes and Values}Attributes698,33510
Figure~\ref{fig-umlobj2}fig-umlobj2709,34047
\label{fig-umlobj2}fig-umlobj2719,34534
\label{pg-fig-umlobj2}pg-fig-umlobj2720,34554
\subsection{Actions and Messages}Actions729,34907
\label{fig-umlmsg1}fig-umlmsg1746,35810
\label{pg-fig-umlmsg1}pg-fig-umlmsg1747,35830
another.  Figure~\ref{fig-umlmsg1}fig-umlmsg1753,36075
The diagram in Figure~\ref{fig-umlmsg2}fig-umlmsg2764,36717
\subsection{What is a Class?}What797,38439
\label{fig-umlrect}fig-umlrect826,39908
\label{pg-fig-umlrect}pg-fig-umlrect827,39928
Figure~\ref{fig-umlrect}fig-umlrect830,39966
\subsection{Variables and Methods}Variables845,40865
of a certain type.  For example, as Figure~\ref{fig-umlrect}fig-umlrect857,41514
\subsection{Instance versus Class Variables and Methods}Instance871,42319
\label{fig-rects}fig-rects908,44250
\label{pg-fig-rects}pg-fig-rects909,44268
Figure~\ref{fig-rects}fig-rects912,44304
{\tt Rectangle} instance is created. Figure~\ref{fig-rectconstr}fig-rectconstr925,45098
\label{fig-rectconstr}fig-rectconstr936,45664
\label{pg-fig-rectconstr}pg-fig-rectconstr937,45687
\subsection{Class Hierarchy and Inheritance}Class940,45728
Figure~\ref{fig-classhier}fig-classhier951,46303
King}s.  Figure~\ref{fig-chesshier}fig-chesshier998,48756
\label{fig-chesshier}fig-chesshier1010,49331
\label{pg-fig-chesshier}pg-fig-chesshier1011,49353
\subsection{Principles of \mbox{Object-Oriented} Design}Principles1048,51355

1.programs.tex,4921
\chapter{Java Program Design and Development}Java11,365
\label{ch:intro2}ch:intro212,411
\section{Introduction}Introduction50,1589
\section{Designing Good Programs}Designing72,2711
\subsection{The Software Engineering Life Cycle}The90,3540
Figure~\ref{fig:progdev}fig:progdev105,4363
\section{Designing a Riddle Program}Designing139,5876
understand the problem (Fig. \ref{fig:progdev}fig:progdev142,5983
\subsection{Problem Decomposition}Problem167,6890
\subsection{Object Design}Object207,8875
shown in Figure~\ref{fig:specs}fig:specs224,9603
Figure~\ref{fig:specs}fig:specs235,10244
pieces of information. As we learned in Chapter~\ref{chapter-intro}chapter-intro264,11219
Figure~\ref{fig:specs}fig:specs289,12416
method. As you recall from Chapter~\ref{chapter-intro}chapter-intro294,12670
specification shown in Figure~\ref{fig:ruml}fig:ruml334,14648
\subsection{Data, Methods, and Algorithms}Data,343,15190
\subsection{Coding into Java}Coding474,20279
Figure~\ref{fig:riddleclass}fig:riddleclass491,21058
\subsection{Syntax and Semantics}Syntax537,22456
\subsection{Testing, Debugging, and Revising}Testing,597,24893
program-development stages shown in (Fig.~\ref{fig:progdev}fig:progdev601,25066
\subsection{Writing Readable Programs}Writing660,27835
\section*{*682,28669
\section{Java Language Elements}Java716,30157
HelloWorld program (Fig.~\ref{fig:helloworld}fig:helloworld727,30721
\subsection{Comments}Comments761,31902
\subsection{Program Layout}Program830,34936
\subsection{Keywords and Identifiers}Keywords862,36623
\label{subsec:keywords}subsec:keywords863,36661
\noindent The Java language contains 48 predefined {\it keywords} (Table~\ref{tab:keywords}tab:keywords865,36686
in the HelloWorld program (Fig.~\ref{fig:helloworld}fig:helloworld868,36917
{\caption{Java keywords.\label{tab:keywords}tab:keywords874,37120
\subsection{Data Types and Variables}Data939,40031
\label{subsec:primitives}subsec:primitives940,40069
As we noted in Chapter~\ref{chapter-intro}chapter-intro962,41176
values, but only values of a certain type (Fig.~\ref{fig:vars}fig:vars965,41402
get to that in Chapter~\ref{chapter-objects}chapter-objects969,41680
\subsection{Statements}Statements986,42457
\label{subsec:statements}subsec:statements987,42481
drawing in Figure~\ref{fig:assign}fig:assign1081,46457
in Figure~\ref{fig:assign2}fig:assign21113,47962
\subsection{Expressions and Operators}Expressions1137,48950
\label{subsec:expressions}subsec:expressions1138,48989
\subsection{Class Definition}Class1211,52062
As you recall from Chapter~\ref{chapter-intro}chapter-intro1251,53730
\subsection{Declaring an Instance Variable}Declaring1266,54505
\label{subsec:vardecl}subsec:vardecl1267,54549
class body: variables and methods. As we described in Chapter~\ref{chapter-intro}chapter-intro1270,54643
\subsection{Defining an Instance Method}Defining1310,56358
class, which returns a {\tt String} (Fig.~\ref{fig:riddleclass}fig:riddleclass1345,57960
(Fig.~\ref{fig:riddleclass}fig:riddleclass1358,58658
\subsection{Java Application Programs}Java1373,59126
\subsection{Creating and Using Objects}Creating1419,61393
(Fig.~\ref{fig:helloworld}fig:helloworld1430,62024
Figure~\ref{fig:helloworld}fig:helloworld1454,62991
(Fig.~\ref{fig:riddleclass}fig:riddleclass1470,63664
\subsection{Java JFrames}Java1485,64467
and interaction occurs in a Window (or Frame). Figure~\ref{fig:hellojframe}fig:hellojframe1488,64556
\subsection{Java Library Packages} Java1555,66853
\subsection{The {\tt import} Statement}The1615,69551
abbreviated names (Fig.~\ref{fig:hellojframe}fig:hellojframe1629,70298
\subsection{Qualified Names in Java}Qualified1658,71152
\label{subsec:qualifiednames}subsec:qualifiednames1659,71189
\section{Editing, Compiling, and Editing,1723,74527
\subsection{Java Development Environments}Java1738,75253
see Appendix~\ref{appendix-jdk}appendix-jdk1749,75905
Figure~\ref{fig:compile}fig:compile1759,76393
\label{fig:compile}fig:compile1765,76700
\subsection{Editing a Program}Editing1777,77094
\subsection{Compiling a Program}Compiling1813,78879
\noindent As Figure~\ref{fig:compile}fig:compile1842,80101
\subsection{Running a Java Application Program}Running1851,80601
displayed on some kind of standard output device (Fig.~\ref{fig:stdout}fig:stdout1879,81894
\subsection{Running a Java Swing Program}Running1885,82100
\label{subsec:swing}subsec:swing1886,82142
result of running, as shown in Figure~\ref{fig:hello}fig:hello1904,82733
\section{From the Java Library: System and \\PrintStream}From1908,82883
\label{sec:systemclass}sec:systemclass1909,82941
java.io} package\index{java.io package}. We have already seen how thejava.io1946,84753
shown in Figure~\ref{fig:printstreamUML}fig:printstreamUML1964,85500
Figure~\ref{fig:oldmac}fig:oldmac2036,87838

10.exceptions.tex,5598
\chapter{Exceptions: When Things Go Wrong}Exceptions:6,120
\label{chapter-exceptions}chapter-exceptions7,163
\label{pg-chapter-exceptions}pg-chapter-exceptions8,190
\section{Introduction}Introduction40,1102
An {\bf exception}\index{exception}exception49,1521
to use {\bf exception handling}\index{exception handling}, a exception63,2402
\section{Handling Exceptional Conditions}Handling78,3135
Figure~\ref{fig-intavg1}fig-intavg1102,3707
\subsection{Traditional Error Handling}Traditional110,4148
\noindent Obviously, the method in Figure~\ref{fig-intavg1}fig-intavg1111,4188
might be 0. Figure~\ref{fig-traditional}fig-traditional114,4336
\subsection{Java's Default Exception Handling}Java's167,6198
see this, consider the program in Figure~\ref{fig-calcavg}fig-calcavg172,6508
\section{Java's Exception Hierarchy}Java's224,8204
\label{sec-excepthier}sec-excepthier225,8241
\label{fig-excepthier}fig-excepthier231,8520
\label{pg-fig-excepthier}pg-fig-excepthier232,8543
some of which are shown in Figure~\ref{fig-excepthier}fig-excepthier236,8661
Each of the classes in Figure~\ref{fig-excepthier}fig-excepthier246,9179
\subsection{Checked and Unchecked Exceptions}Checked318,12665
{\bf checked exception}\index{checked exception} is one that can be analyzed by the Javachecked321,12793
\subsubsection*{*335,13555
\subsubsection*{*390,15840
\noindent An {\bf unchecked exception}\index{unchecked exception} is any unchecked391,15878
of {\tt RuntimeException} (Fig.~\ref{fig-excepthier}fig-excepthier393,15986
action, as we will see Section~\ref{sec-robust}sec-robust408,16897
\subsection{The {\tt Exception} Class}The415,17124
\section{Handling Exceptions Within a Program}Handling444,18020
\subsection{Trying, Throwing, and Catching an Exception}Trying,449,18201
throw an exception}\index{throw an exception} as a way of signalingthrow453,18477
Figure~\ref{fig-calcavg2}fig-calcavg2477,19756
(Fig.~\ref{fig-excepthier}fig-excepthier540,21872
catch block located in some other object (Fig.~\ref{fig-exccatch}fig-exccatch625,25570
\subsection{Separating Error Checking from Error Handling}Separating636,25921
\subsection{Syntax and Semantics of Try/Throw/Catch}Syntax672,27870
\noindent A {\bf try block}\index{try block} begins with the keyword {\tt try} followed by a blocktry673,27923
catch block}\index{catch block} consists of the keyword {\tt catch}, followed by acatch676,28117
summarized in Figure~\ref{fig-trystmt}fig-trystmt692,28794
exception hierarchy (see Fig.~\ref{fig-excepthier}fig-excepthier776,32034
Figure~\ref{fig-excepthier}fig-excepthier789,32790
\subsection{Restrictions on the {\tt try/catch/finally} \\Statement}Restrictions825,34165
\subsection{Dynamic Versus Static Scoping}Dynamic854,35404
(Fig.~\ref{fig-calcavg2}fig-calcavg2858,35657
the {\bf dynamic scope}\index{dynamic scope} of an enclosing try block.  Let's see whatdynamic863,35908
in {\tt CalcAverage} (Fig.~\ref{fig-calcavg2}fig-calcavg2868,36107
Contrast dynamic with what you have learned about {\bf static scope}\index{static scope}, whichstatic873,36318
variables (Fig. \ref{fig-dynamic}fig-dynamic876,36506
(Fig.~\ref{fig-myclass}fig-myclass880,36763
\subsection{Exception Propagation: Searching for a Catch Block}Exception954,39358
A {\bf method call stack}\index{method call stack} is amethod960,39776
the stack (Fig.~\ref{fig-methodstack}fig-methodstack965,40106
exception handler for that exception.  In Figure~\ref{fig-methodstack}fig-methodstack972,40421
\label{fig-methodstack}fig-methodstack980,40785
\label{pg-fig-methodstack}pg-fig-methodstack981,40809
perform a {\bf method stack trace}\index{method stack trace}.  The basic idea is that Javamethod986,40979
(Fig.~\ref{fig-methodstack}fig-methodstack999,41693
(Fig.~\ref{fig-calcavg2}fig-calcavg21002,41884
Using the exception hierarchy in Figure~\ref{fig-excepthier}fig-excepthier1012,42293
\section{Error Handling and Robust \\Program Design}Error1129,45883
\label{sec-robust}sec-robust1130,45936
\subsection{Print a Message and Terminate}Print1179,48417
\subsection{Log the Error and Resume}Log1217,50310
\subsection{Fix the Error and Resume}Fix1260,52481
Figure~\ref{fig-intfieldprog}fig-intfieldprog1285,53850
Figure~\ref{fig-numformat}fig-numformat1357,56436
in Figure~\ref{fig-errmsg}fig-errmsg1373,57114
\subsection{To Fix or Not to Fix}To1427,59546
\section{Creating and Throwing Your Own \\ Exceptions}Creating1693,69740
\label{sec-throws}sec-throws1694,69795
{\tt getInt()} method (Fig.~\ref{fig-intfield2}fig-intfield21779,73079
The {\tt IntFieldTester} class (Fig.~\ref{fig-intbound}fig-intbound1826,74356
design and functionality shown in Figure~\ref{fig-numformat}fig-numformat1827,74421
\section{From the Java Library: {\tt JOptionPane}}From1913,77226
\label{sec-dialogs}sec-dialogs1914,77277
\tBOXseven{A} {\bf dialog box}\index{dialog box} is a window that can be opened by a program todialog1916,77320
A {\it warning dialog} or {\bf error dialog}\index{error dialog} is opened whenever aerror1928,77832
Figure~\ref{fig-intbound}fig-intbound1940,78472
Figure~\ref{fig-errmsg}fig-errmsg1952,78759
{\bf modal dialog}\index{modal dialog}. This means that once it's been displayed, youmodal1971,79615
the purpose of the message (Fig.~\ref{fig-errmsg2}fig-errmsg21979,80013
\noindent This would produce the dialog shown in Figure~\ref{fig-errmsg2}fig-errmsg22027,81381
(Fig.~\ref{fig-intbound}fig-intbound2511,97463
(Fig.~\ref{fig-intfield2}fig-intfield22512,97529

11.files.tex,5176
\chapter{Files and Streams: Input/Output Techniques}Files5,130
\label{chapter-files}chapter-files6,183
\label{pg-chapter-files}pg-chapter-files7,205
\section{Introduction}Introduction43,1260
\label{fig-systemout}fig-systemout78,3096
\label{pg-fig-systemout}pg-fig-systemout79,3118
\section{Streams and Files}Streams83,3172
(Fig.~\ref{fig-systemout}fig-systemout89,3529
\subsection{The Data Hierarchy}The95,3865
{\bf record}\index{record}record111,4755
{\bf fields}\index{fields}fields112,4836
files, which is called a {\bf database}\index{database}database121,5449
hierarchy}\index{data hierarchy} (Fig.~11\mbox{.}2).data127,5707
\subsection{Binary Files and Text Files}Binary137,6169
\subsection{Input and Output Streams}Input191,8957
hierarchy illustrated in Figure~\ref{fig-streamhier}fig-streamhier195,9199
\label{fig-streamhier}fig-streamhier204,9656
{\bf Filtering}\index{Filtering}Filtering252,12028
One type of filtering is {\bf buffering}\index{buffering}buffering307,15417
\section{CASE STUDY: Reading and Writing Text Files}CASE368,18649
(Fig.~\ref{fig-guitextio}fig-guitextio380,19311
\label{fig-guitextio}fig-guitextio386,19568
\subsection{Text File Format}Text391,19644
more lines and ending with a special {\bf end-of-file character}\index{end-of-file character}.end-of-file393,19754
\subsection{Writing to a Text File}Writing422,20978
\noindent As Figure~\ref{fig-systemout}fig-systemout437,21413
\subsubsection*{*457,22469
Figure~\ref{fig-streamhier}fig-streamhier467,23014
(Fig.~\ref{fig-filewriter}fig-filewriter489,23913
it is ideally suited for our task (Fig.~\ref{fig-filewriter}fig-filewriter504,24725
\label{fig-filewriter}fig-filewriter512,25001
{\tt IOException} (Fig.~\ref{fig-writetextmethod}fig-writetextmethod559,27084
\subsection{Code Reuse: Designing Text File Output}Code583,27709
(Fig.~\ref{fig-streamhier}fig-streamhier609,28912
Figure~\ref{fig-streamhier}fig-streamhier620,29556
(Fig.~\ref{fig-fileoutput}fig-fileoutput622,29676
\label{fig-fileoutput}fig-fileoutput629,29999
\subsection{Reading from a Text File}Reading689,32189
\noindent As Figure~\ref{fig-readfromstream}fig-readfromstream705,32645
need to use the information in  Figure~\ref{fig-streamhier}fig-streamhier734,34043
\label{fig-filereader}fig-filereader750,34789
The {\tt FileReader} class (Fig.~\ref{fig-filereader}fig-filereader753,34865
\noindent As shown in Figure~\ref{fig-filereader}fig-filereader765,35321
BufferedReader} (Fig.~\ref{fig-filereader}fig-filereader773,35724
the definition for {\tt readTextFile()} shown in Figure~\ref{fig-readtextmethod}fig-readtextmethod844,38627
\subsection{Code Reuse: Designing Text File Input}Code924,41358
\subsection{The {\tt TextIO} Application}The1019,44983
(Fig.~\ref{fig-textiouml}fig-textiouml1022,45161
\label{fig-textiouml}fig-textiouml1027,45382
\label{fig-textioapp}fig-textioapp1038,45826
\section{The {\tt File} Class}The1140,49100
know, a file is a collection of data, whereas a {\bf directory}\index{directory}directory1154,49832
\subsection{Names and Paths}Names1160,50168
A {\bf path}\index{path}path1164,50393
name}\index{absolute path name}. This would be a name whose pathabsolute1181,51376
\subsection{Validating File Names}Validating1200,52006
\section{Example: Reading and Writing Binary Files}Example:1314,56772
\subsection{Writing Binary Data}Writing1356,58560
the {\tt java.io} package (Fig.~\ref{fig-streamhier}fig-streamhier1402,60424
\label{fig-fostream}fig-fostream1407,60599
candidate is {\tt FileOutputStream} (Fig.~\ref{fig-fostream}fig-fostream1414,60870
\subsubsection*{*1482,63946
{\tt String}s are written using the {\tt writeUTF()} method.   {\bf UTF}\index{UTF}UTF1484,64070
(Fig.~\ref{fig-writerecordsmethod}fig-writerecordsmethod1501,65097
\subsection{Reading Binary Data}Reading1535,66464
{\tt InputStream} subclass (Fig.~\ref{fig-streamhier}fig-streamhier1553,67342
\label{fig-distream}fig-distream1586,68925
in Figure~\ref{fig-readrecordsmethod}fig-readrecordsmethod1633,70885
\subsection{The {\tt BinaryIO} Application}The1714,73708
\label{fig-binaryioscreen}fig-binaryioscreen1735,74626
\subsection{Abstracting Data from Files}Abstracting1848,78600
\section{Object Serialization: Reading and Writing Objects}Object1917,81247
{\bf object serialization}\index{object serialization}. Objects can be object1924,81618
{\tt Student} class (Fig.~\ref{fig-student}fig-student1941,82322
\subsection{The {\tt ObjectIO} Class}The2053,87015
Figure~\ref{fig-objectioclass}fig-objectioclass2061,87430
The {\tt readRecords()} method (Fig.~\ref{fig-objectioclass}fig-objectioclass2181,92016
\section{From the Java Library \\ {\tt javax.swing.JFileChooser}}From2211,93027
saving a file.  Figure~\ref{fig-opendialog}fig-opendialog2222,93562
file (Fig.~\ref{fig-opendialog}fig-opendialog2273,95883
\label{fig-opendialog}fig-opendialog2278,96022
\section{Using File Data in Programs} Using2294,96762
{\tt try-catch} statement we get the code fragment in Figure~\ref{fig-wordguessfile}fig-wordguessfile2377,99834
\section*{*2429,101645

12.recursion.tex,5378
\chapter{Recursive Problem Solving}Recursive5,113
\label{chapter-recursion}chapter-recursion6,149
\label{pg-chapter-recursion}pg-chapter-recursion7,175
\section{Introduction}Introduction43,1109
\subsection{Recursion as Repetition}Recursion93,3628
\noindent A {\bf recursive method}\index{recursive method} is a method that calls itself.  An {\bfrecursive94,3665
iterative method}\index{iterative method} is a method that uses a loop to repeat an action.  Initerative95,3764
loops and involve more {\bf computational overhead}\index{computational overhead}---for such taskscomputational167,6224
\subsection{Recursion as a Problem-Solving Approach}Recursion214,7540
divide and conquer}\index{divide and conquer} and {\bfdivide223,8004
self-similarity}\index{self-similarity}self-similarity224,8059
\section{Recursive Definition}Recursive255,9490
mathematics.  A {\bf recursive definition}\index{recursive definition}recursive257,9585
\subsection{Factorial: {\it N}!}Factorial:262,9861
factorial\index{factorial}factorial264,9957
\noindent The recursive\index{recursion, recursive case} case usesrecursion,326,11599
what characterizes recursion.  The base\index{recursion, base case}recursion,330,11868
algorithm.  The {\bf recursive case}\index{recursive case} defines therecursive335,12116
\subsection{Drawing a Nested Pattern}Drawing339,12237
These examples illustrate the power of recursion\index{recursion}recursion394,14784
\section{Recursive String Methods}Recursive446,16594
\subsection{Printing a String}Printing464,17519
a {\bf head-and-tail algorithm}\index{head-and-tail algorithm}, head-and-tail477,18255
leads to the method definition shown in Figure~\ref{fig-printstring}fig-printstring483,18594
\noindent Let's now revisit the notion of a method\index{method call, recursive}method519,19839
printed.  A {\bf recursion parameter}\index{recursion parameter} is a parameter whose value isrecursion528,20427
Figure~\ref{fig-traceprint}fig-traceprint538,20914
\subsection{Printing the String Backward}Printing622,24495
reverse order.  The trace in Figure~\ref{fig-tracerevprint}fig-tracerevprint645,25244
\label{fig-tracerevprint}fig-tracerevprint649,25455
a {\bf last-in--first-out (LIFO) protocol}\index{last-in--first-out (LIFO) protocol}. last-in--first-out673,26649
Figure~\ref{fig-tracerevprint}fig-tracerevprint684,27181
\subsection{Counting Characters in a String}Counting715,28520
Figure~\ref{fig-countch}fig-countch758,30325
\label{fig-tracecount}fig-tracecount817,32327
\subsection{Translating a String}Translating833,32793
string.  Figure~\ref{fig-traceconvert}fig-traceconvert911,36207
\label{fig-traceconvert}fig-traceconvert917,36401
\subsection{Printing all Possible Outcomes when Tossing N Coins}Printing930,36688
code for the method in Figure~\ref{fig-cointoss}fig-cointoss989,39544
\section{Recursive Array Processing}Recursive1057,41810
\subsection{Recursive Sequential Search}Recursive1077,42659
(Fig.~\ref{fig-headtail2}fig-headtail21136,45206
\label{fig-headtail2}fig-headtail21148,45837
Figure~\ref{fig-rsearch}fig-rsearch1184,46986
the {\em recursion parameter}\index{recursion parameter}. recursion1193,47598
\subsection{Information Hiding}Information1209,48299
Figure~\ref{fig-searcher}fig-searcher1232,49584
(Fig.~\ref{fig-searcherclass}fig-searcherclass1233,49654
\label{fig-searcher}fig-searcher1239,49893
\label{pg-fig-searcher}pg-fig-searcher1240,49914
\subsection{Recursive Selection Sort}Recursive1309,52296
Figure~\ref{fig-selectsort}fig-selectsort1342,53910
Figure~\ref{fig-selectionsort}fig-selectionsort1349,54335
\section{Example: Drawing (Recursive) Fractals}Example:1435,57659
\label{sec-fractals}sec-fractals1436,57707
\subsection{Nested Squares}Nested1458,58918
Figure~\ref{fig-drawboxes}fig-drawboxes1514,61339
\subsection{The Sierpinski Gasket}The1583,64026
interesting fractal pattern (Fig.~\ref{fig-sierpinski}fig-sierpinski1586,64197
shown in Figure~\ref{fig-gasket}fig-gasket1625,65749
If you look at Figure~\ref{fig-sierpinski}fig-sierpinski1670,67633
\section{OBJECT-ORIENTED DESIGN:\\ Tail Recursion}OBJECT-ORIENTED1691,68461
method is {\bf tail recursive}\index{tail recursive} tail1700,69011
\section{OBJECT-ORIENTED DESIGN:  \\Recursion or Iteration?}OBJECT-ORIENTED1805,73044
when it is done.  Figure~\ref{fig-methodblock}fig-methodblock1831,74352
\section*{*1900,77864
\section{From the Java Library: \\ javax.swing.JComboBox}From1953,80049
\subsection{A {\tt JComboBox} Example}A1999,82418
ItemListener} interface\index{ItemListener interface}, which consistsItemListener2069,85179
Figure~\ref{fig-seqdiag}fig-seqdiag2094,86240
Figure~\ref{fig-recursivepatterns}fig-recursivepatterns2097,86417
\label{fig-seqdiag}fig-seqdiag2103,86649
\label{pg-fig-seqdiag}pg-fig-seqdiag2104,86669
\label{fig-canvas}fig-canvas2153,88428
\label{pg-fig-canvas}pg-fig-canvas2154,88447
Figure~\ref{fig-canvas}fig-canvas2159,88601
Figure~\ref{fig-canvaspanel}fig-canvaspanel2160,88662
\item  A {\it recursive\index{recursive method} method} is one that calls itself.recursive2304,93175
\item  The level two and three gaskets are shown in Figure~\ref{fig-sierpinski23}fig-sierpinski232568,100873
\item  The Fibonacci\index{Fibonacci sequence} sequenceFibonacci2680,104256

13.guis.tex,5747
\chapter{Graphical User Interfaces}Graphical6,114
\label{chapter-guis}chapter-guis7,150
\label{pg-chapter-guis}pg-chapter-guis8,171
\section{Introduction}Introduction42,1222
\section{Java GUIs: From AWT to Swing}Java61,2260
\subsection{Heavyweight Versus Lightweight Components}Heavyweight94,4173
Figures~\ref{fig-swing1}fig-swing1133,6159
(Fig.~\ref{fig-swing2}fig-swing2138,6487
\label{fig-swing2}fig-swing2153,7173
\label{pg-fig-swing2}pg-fig-swing2154,7192
\section{The Swing Component Set}The186,8671
\section{OBJECT-ORIENTED DESIGN:  \\Model-View-Controller Architecture}OBJECT-ORIENTED239,11015
of the button is its {\bf view}\index{view}view252,11782
constitute the button's {\bf model}\index{model}model263,12369
controller}\index{controller}controller271,12762
Figure~\ref{fig-mvc}fig-mvc274,12820
\subsection{Pluggable Look and Feel}Pluggable311,14523
\label{fig-lafs}fig-lafs353,16117
\section{The Java Event Model}The372,16576
model}\index{event model}.event380,17016
A {\bf listener}\index{listener}listener429,18838
the {\tt ActionListener} interface.  As Figure~\ref{fig-clickme}fig-clickme436,19175
\label{fig-p479f1}fig-p479f1481,20657
\label{pg-fig-p479f1}pg-fig-p479f1482,20676
Now that we have implemented the code in Figure~\ref{fig-clickme}fig-clickme486,20727
it is clicked.  Figure~\ref{fig-p479f1}fig-p479f1492,21128
(Fig.~13.8).  Our example (Fig.~\ref{fig-clickme}fig-clickme502,21550
\subsection{Event Classes}Event521,22263
\TBTvar{0pc}{Java's {\tt AWTEvent}s\index{AWTEvent}AWTEvent531,22686
{\tt JButton} is a {\tt JComponent} (Fig.~\ref{fig-swing2}fig-swing2566,25236
\section{CASE STUDY: Designing a Basic GUI}CASE647,28582
\subsection{The Metric Converter Application}The689,30630
\subsubsection*{*725,31866
might be useful to refer back to Figure~\ref{fig-swing2}fig-swing2731,32234
\subsubsection*{*764,33726
(Fig.~\ref{fig-swing1}fig-swing1773,34291
\subsubsection*{*783,34704
\label{fig-metricgui}fig-metricgui794,35304
\label{pg-fig-metricgui}pg-fig-metricgui795,35326
Figure~\ref{fig-metricgui}fig-metricgui799,35380
Figure~\ref{fig-metricgui}fig-metricgui805,35671
hierarchy}\index{containment hierarchy}, also called a {\bf widgetcontainment806,35731
hierarchy}\index{widget hierarchy}, which shows the containmentwidget807,35798
Figure~\ref{fig-converterclass}fig-converterclass828,36776
layout manager}\index{layout manager} is the object that islayout887,38777
\noindent A {\bf content pane}\index{content pane} is a {\tt JPanel} that serves as thecontent905,39424
\subsection{Inner Classes and Adapter Classes}Inner950,41294
\subsection{GUI Design Critique}GUI1075,45991
\subsection{Extending the Basic GUI: Button Array}Extending1154,49292
\label{sec-keypad}sec-keypad1155,49343
\noindent Figure~\ref{fig-metricgui2}fig-metricgui21187,51020
\label{fig-metricgui2}fig-metricgui21197,51432
\label{pg-fig-metricgui2}pg-fig-metricgui21198,51455
(Fig.~\ref{fig-swing2}fig-swing21211,52059
{\bf callback design}\index{callback design}. In this design, whenever a {\tt KeyPad}callback1287,55170
Figure~\ref{fig-p493f1}fig-p493f11292,55387
\label{fig-p493f1}fig-p493f11306,56151
\label{pg-fig-p493f1}pg-fig-p493f11307,56170
our design of the {\tt Converter} class (Fig.~\ref{fig-p493f1}fig-p493f11384,58663
\subsection{GUI Design Critique}GUI1475,61527
(Fig.~\ref{fig-metricgui2}fig-metricgui21487,62176
\section{Containers and Layout Managers}Containers1517,63267
top-level container (Fig.~\ref{fig-metricgui2}fig-metricgui21523,63658
\subsection{Layout Managers}Layout1539,64305
\subsection{The {\tt GridLayout} Manager}The1616,67806
(Fig.~\ref{fig-convertscreen3}fig-convertscreen31638,68878
\subsection{GUI Design Critique}GUI1675,70837
\subsection{The {\tt BorderLayout} Manager}The1689,71503
shown in Figure~\ref{fig-borderlayout}fig-borderlayout1692,71696
Figure~\ref{fig-metricgui3}fig-metricgui31763,74375
Figure~\ref{fig-convertscreen5}fig-convertscreen51783,75265
\section{Checkboxes, Radio Buttons, and Borders}Checkboxes,1837,77058
Figure~\ref{fig-acmegui}fig-acmegui1888,79718
\subsection{Checkbox and Radio Button Arrays}Checkbox1923,81282
\label{fig-acmescreen}fig-acmescreen1947,82350
Figure~\ref{fig-p504f1}fig-p504f11994,84125
\subsection{Swing Borders}Swing2032,85912
\subsection{The {\tt BoxLayout} Manager}The2076,87820
checkboxes and radio buttons (Fig.~\ref{fig-acmegui}fig-acmegui2080,88073
{\tt GridBoxLayout}. For example, Figure~\ref{fig-nestedbox}fig-nestedbox2113,89470
\subsection{The {\tt ItemListener} Interface }The2122,89867
\subsection{The {\tt OrderApplet} }The2174,92230
Figure~\ref{fig-orderapplet}fig-orderapplet2177,92386
conforms to the design shown in Figure~\ref{fig-acmegui}fig-acmegui2180,92582
\section{Menus and Scroll Panes}Menus2347,98633
(Fig.~\ref{fig-menuterms}fig-menuterms2356,99105
\subsection{Adding a Menu Bar to an Application}Adding2373,99776
represented as a line in the menu (Fig.~\ref{fig-menuterms}fig-menuterms2444,102555
\subsection{Menu Hierarchies}Menu2457,103189
(Fig.~\ref{fig-menuterms}fig-menuterms2489,104644
\subsection{Handling Menu Actions}Handling2527,106015
\subsubsection*{*2606,109966
\subsection{Adding Scrollbars to a Text Area}Adding2653,111965
Figure~\ref{fig-p514f1}fig-p514f12655,112085
Figure~\ref{fig-texteditor}fig-texteditor2656,112153
(Fig.~\ref{fig-scrollexample}fig-scrollexample2825,118895
\section*{*2850,119638
(Fig.~\ref{fig-p528f1}fig-p528f13038,127522
Figure~\ref{fig-acmegui}fig-acmegui3195,133774
Figure~\ref{fig-acmegui}fig-acmegui3199,133932
shown in Figure~\ref{fig-errdialog}fig-errdialog3241,136001

14.threads.tex,5684
\chapter{Threads and Concurrent Programming}Threads6,123
\label{chapter-threads}chapter-threads7,168
\label{pg-chapter-threads}pg-chapter-threads8,192
\section{Introduction}Introduction38,1035
concurrently}\index{concurrently}concurrently58,2131
\section{What Is a Thread?}What66,2579
\noindent A {\bf thread}\index{thread}thread67,2607
\subsection{Concurrent Execution of Threads}Concurrent117,5413
is known as {\bf multitasking}\index{multitasking}multitasking121,5621
quite simple) to implement {\bf multithreaded}\index{multithreaded}multithreaded126,5982
Each CPU uses a {\bf fetch-execute cycle}\index{fetch-execute cycle}fetch-execute140,6682
\label{fig-timeslicing}fig-timeslicing154,7402
\label{pg-fig-timeslicing}pg-fig-timeslicing155,7426
One common scheduling technique is known as {\bf time slicing}\index{time slicing},time159,7482
quantum}\index{quantum}quantum165,7867
{\bf round-robin}\index{round-robin}round-robin170,8208
(Fig.~\ref{fig-timeslicing}fig-timeslicing171,8286
Under {\bf priority scheduling}\index{priority scheduling}, threads of higher priority arepriority180,8658
\subsection{Multithreaded Numbers}Multithreaded204,9964
same time (Fig.~\ref{fig-p707f1}fig-p707f1256,11603
\section{From the Java Library: {\tt java.lang.Thread}}From346,15162
\subsection{Thread Control}Thread458,19038
\subsection{Thread Priority}Thread475,19873
\subsection{Forcing Threads to Sleep}Forcing546,22531
\subsection{The Asynchronous Nature of Threaded Programs}The645,26198
\noindent Threads are {\bf asynchronous}\index{asynchronous}asynchronous646,26256
\label{fig-lifecycle}fig-lifecycle722,29905
\label{pg-fig-lifecycle}pg-fig-lifecycle723,29927
\section{Thread States and Life Cycle}Thread726,29967
\noindent Each thread has a {\bf life cycle}\index{life cycle} thatlife727,30006
Figure~\ref{fig-lifecycle}fig-lifecycle729,30136
{\bf ready queue}\index{ready queue}, ready746,31252
for its turn on the CPU.  A {\bf queue}\index{queue}queue747,31291
queue will be {\bf dispatched}\index{dispatched}dispatched749,31431
The system also manages transitions between the {\bf blocked}\index{blocked}blocked801,33828
\section{Using Threads to Improve \\\hspace*{2.8pc}Interface Responsiveness}Using839,35808
\subsection{Single-Threaded Design}Single-Threaded849,36409
\subsection*{*869,37269
Figure~\ref{fig-dotsgui}fig-dotsgui886,38159
\subsection*{*901,38624
\subsection*{*920,39294
Figure~\ref{fig-randomdotgui}fig-randomdotgui925,39470
\subsection*{*997,41710
Figure~\ref{fig-singledotty}fig-singledotty1067,44360
(Fig.~\ref{fig-dottytrace}fig-dottytrace1083,45355
\label{fig-dottytrace}fig-dottytrace1087,45482
\label{pg-fig-dottytrace}pg-fig-dottytrace1088,45505
\subsection{Multithreaded Drawing: The {\tt Dotty} Thread}Multithreaded1121,46902
Figure~\ref{fig-threadeddotty}fig-threadeddotty1180,49491
\subsection*{*1266,52921
\subsection{Advantages of Multithreaded Design}Advantages1313,54918
actions.  Figure~\ref{fig-threadedtrace}fig-threadedtrace1319,55312
\label{fig-threadedtrace}fig-threadedtrace1330,55824
\label{pg-fig-threadedtrace}pg-fig-threadedtrace1331,55850
\section{CASE STUDY: Cooperating Threads}CASE1365,57362
producer/consumer model}\index{producer/consumer model}. According to this model, two threadsproducer/consumer1370,57609
\subsection{Problem Statement}Problem1388,58591
\subsection*{*1410,59780
\marginnote{What classes do we need?}  Figure~\ref{fig-p726f1}fig-p726f11412,59876
\subsection{Design: The {\tt TakeANumber} Class}Design:1448,61551
the {\tt TakeANumber} class shown in Figure~\ref{fig-takeanumber1}fig-takeanumber11477,63105
exclusion}\index{mutual exclusion} is important for the correctness ofmutual1515,64439
\subsection{Java Monitors and Mutual Exclusion}Java1525,64673
\noindent An object that contains {\tt synchronized} methods has a {\bf monitor}\index{monitor}monitor1526,64721
called, a {\bf lock}\index{lock}lock1532,65110
\subsection{The {\tt Customer} Class}The1563,66748
Customer} shown in Figure~\ref{fig-customer1}fig-customer11579,67649
\subsection{The {\tt Clerk} Class}The1634,69452
Figure~\ref{fig-clerk1}fig-clerk11655,70353
\subsection{The {\tt Bakery} Class}The1690,71246
(Fig.~\ref{fig-bakery}fig-bakery1697,71642
\subsection*{*1723,72376
\subsection{Problem: Critical Sections}Problem:1844,76735
A {\bf critical section}\index{critical section} is any section of a thread that should not becritical1921,79657
\subsection*{*1930,80183
(Fig.~\ref{fig-takeanumber2}fig-takeanumber21942,80961
{\tt TakeANumber} in Figure~\ref{fig-takeanumber2}fig-takeanumber21979,82124
\subsection{Using {\tt wait/notify} to Coordinate Threads}Using2083,85823
\subsection*{*2091,86304
uses {\em busy waiting}\index{busy waiting} busy2094,86482
\subsection*{*2142,88437
Figure~\ref{fig-lifecycle}fig-lifecycle2145,88602
Figures~14.27 and~\ref{fig-takeanumber3}fig-takeanumber32240,92034
\subsection*{*2323,94469
\section{CASE STUDY: The Game of Pong}CASE2354,95760
\subsection{A Multithreaded Design}A2366,96380
Figure~\ref{fig-pongdesign}fig-pongdesign2388,97444
\label{fig-pongdesign}fig-pongdesign2394,97786
\label{pg-fig-pongdesign}pg-fig-pongdesign2395,97809
\subsection{Implementation of the Pong Program}Implementation2437,100148
implementation (Fig.~\ref{fig-paddle}fig-paddle2440,100281
The {\tt Ball} class (Fig.~\ref{fig-ball}fig-ball2510,102522
\subsection{The {\tt KeyListener} Interface}The2626,106969
figure~\ref{fig-pongapplet}fig-pongapplet2629,107076
\subsection{Animating the Bouncing Ball}Animating2732,111233

15.sockets.tex,6865
\chapter{Sockets and Networking}Sockets7,112
\label{chapter-sockets}chapter-sockets8,145
\label{pg-chapter-sockets}pg-chapter-sockets9,169
\section{Introduction}Introduction45,1311
\section{An Overview of Networks}An57,1918
\subsection{Network Size and Topology}Network64,2253
shown in Figures~\ref{fig-topology1}fig-topology176,2938
\label{fig-topology1}fig-topology185,3308
In a star network (Fig.~\ref{fig-topology1}fig-topology189,3383
A ring network (Fig.~\ref{fig-topology1}fig-topology197,3839
information.  The tree topology (Fig.~\ref{fig-topology2}fig-topology299,3970
\subsection{Internets}Internets117,4729
\noindent An {\bf internet}\index{internet}internet118,4752
distinct networks, joined by devices called {\bf routers}\index{routers}routers119,4847
(Fig.~\ref{fig-internet}fig-internet120,4920
\label{fig-internet}fig-internet135,5746
The United Nations is an apt analogy for the {\bf Internet}\index{Internet}Internet139,5806
\subsection{Network Protocols}Network160,6498
\noindent A {\bf protocol}\index{protocol}protocol162,6589
\subsubsection*{*178,7460
(URL)}\index{Uniform Resource Locator (URL)}. A URL specifies threeUniform185,7904
organizations can buy their own {\bf domain names}\index{domain names}, such as {\ttdomain224,9720
\subsection{Client/Server Applications}Client/Server242,10466
client/server protocols}\index{client/server protocols}, and the applications they support areclient/server244,10576
subtasks, one performed by the {\bf client}\index{client}client247,10811
{\bf server}\index{server}server248,10894
\subsection{Lower Level Network Protocols}Lower308,13042
information, or {\bf packets}\index{packets}packets325,13740
these are protocols, such as the \mbox{\bf ethernet protocol}\index{ethernet protocol} and {\itethernet338,14404
Protocol (IP)}\index{Internetworking Protocol (IP)}, which governs the task of translating one networkInternetworking351,15162
protocol to a common format (Fig.~\ref{fig-ipprotocol}fig-ipprotocol352,15265
\subsection{The {\tt java.net} Package}The367,16005
in Java.   The {\tt java.net} (Fig.~\ref{fig-nethier}fig-nethier388,16896
\label{fig-nethier}fig-nethier395,17138
\section{Using Network Resources from an Applet}Using420,18261
\section{From the Java Library: {\tt java.net.URL}}From468,20410
\subsection{Code Reuse: The {\tt java.applet.Applet} Class}Code519,22661
\section{The Slide Show Applet}The589,25119
\subsection*{*590,25151
\subsection*{*608,25927
\subsection*{*632,26860
\label{fig-p830f2}fig-p830f2635,27084
Chapter~14, this is a form of {\em busy waiting}\index{busy waiting}busy646,27408
\subsection{The {\tt SlideShowApplet} class}The671,28492
of a {\bf callback method}\index{callback method} (Fig.~15.12).callback783,33018
of {\tt SlideShowApplet}, which is shown in Figure~\ref{fig-slideapplet}fig-slideapplet791,33411
\subsection{The {\tt Timer} Class}The839,34825
{\tt Timer} is shown in Figure~\ref{fig-timerthread}fig-timerthread869,36035
\section{Using Network Resources from an \\Application}Using909,37097
Section~\ref{sec-security}sec-security916,37541
\subsection*{*925,38056
\subsection{Downloading a Text File from the Web}Downloading953,39258
\subsection*{*1032,42629
\subsection*{*1092,45015
\label{fig-realestategui}fig-realestategui1097,45151
and ``East'' borders, respectively.  Figure~\ref{fig-realestategui}fig-realestategui1117,46156
\subsection*{*1123,46378
in Figure~\ref{fig-realviewer1}fig-realviewer11203,49386
\subsection*{*1210,49717
and~\ref{fig-imagepanel}fig-imagepanel1219,50012
\subsection*{*1231,50680
{\tt RealEstateViewer} (Fig.~\ref{fig-realviewer1}fig-realviewer11233,50775
\subsection*{*1310,53282
\subsection*{*1344,54430
earlier.  Figure~\ref{fig-realestatescreen}fig-realestatescreen1404,57220
information to a user. Figure~\ref{fig-realestateclass}fig-realestateclass1406,57328
\subsection{Reusing Code}Reusing1526,61442
\section{Client/Server Communication via {\tt Socket}s}Client/Server1558,62944
A {\bf socket}\index{socket}socket1566,63400
port}\index{port}port1576,63933
Figure~\ref{fig-clientserverpict}fig-clientserverpict1611,65787
\subsection{The Server Protocol}The1629,66505
The template in Figure~\ref{fig-serverpro}fig-serverpro1631,66618
\subsection{The Client Protocol}The1695,68988
\noindent The client protocol (Fig.~\ref{fig-clientpro}fig-clientpro1696,69021
\subsection{A Two-Way Stream Connection}A1737,70473
\section{CASE STUDY: Generic Client/Server Classes}CASE1846,75283
\label{sec-clientserver}sec-clientserver1849,75442
\subsection{Object-Oriented Design}Object-Oriented1925,78813
\subsection*{*1934,79310
(Fig.~\ref{fig-clientserver}fig-clientserver1966,80967
\subsection{The {\tt EchoServer} Class}The2021,82890
\label{fig-p852f1}fig-p852f12025,83018
EchoServer}, in Figure~\ref{fig-echoserver}fig-echoserver2115,86421
\subsection{The {\tt EchoClient} Class}The2201,89565
Figure~\ref{fig-echoclient}fig-echoclient2331,94572
\subsection*{*2406,97110
methods (Figs.~\ref{fig-echoserver}fig-echoserver2408,97223
\section{Playing One Row Nim Over the Network}Playing2464,99166
organized into the hierarchy shown in Figure~\ref{fig-p858f1}fig-p858f12501,101008
{\tt Client} shown in Figures~\ref{fig-serverclass}fig-serverclass2527,102552
~\ref{fig-clientclass}fig-clientclass2528,102608
\subsection{The {\tt NimServer} Class}The2637,105781
Figure~\ref{fig-nimserverclass}fig-nimserverclass2719,108631
\subsection{The {\tt NimClient} Class}The2767,111357
Client} class (Fig.~\ref{fig-clientclass}fig-clientclass2773,111679
NimClient} (Fig.~\ref{fig-nimclientclass}fig-nimclientclass2774,111748
\subsection{Testing the Nim Service}Testing2828,113773
\section{Java Network Security Restrictions}Java2867,115274
\label{sec-security}sec-security2868,115319
so-called {\bf sandbox security model}\index{sandbox security model}, which refers to the practicesandbox2886,116375
code}\index{trusted code}. For example, the Java class libraries would be placed in such atrusted2905,117380
\section{Java Servlets and Java Server Pages}Java2955,119791
\subsection{Java Server Pages}Java2981,121314
extend over one or more lines. Figure~\ref{fig-jspcode}fig-jspcode2995,121800
string value is displayed on the Web page (Fig.~\ref{fig-jspscreen}fig-jspscreen3051,123275
\label{fig-jspscreen}fig-jspscreen3055,123423
\subsection{Java Servlets}Java3075,124440
\subsection{A Simple Servlet Example}A3144,127306
page, Figure~\ref{fig-hiservlet}fig-hiservlet3147,127415
\subsection{The Nim Servlet}The3221,130483
Figure~\ref{fig-nimscreen}fig-nimscreen3238,131185
Figures~\ref{fig-nimservlet}fig-nimservlet3249,131817
\subsection{Setting Up and Using Java Servlets}Setting3473,141282

16.datastructs.tex,5023
\chapter{Data Structures: Lists, Stacks, and Queues}Data8,129
\label{chapter-datastructures}chapter-datastructures9,182
\label{pg-chapter-datastructures}pg-chapter-datastructures10,213
\section{Introduction}Introduction49,1580
\noindent A {\bf data structure}\index{data structure} is used todata50,1603
example of a {\bf static structure}\index{static structure}, becausestatic57,2071
The {\tt Vector}\index{vector}vector62,2287
example of a {\bf dynamic structure}\index{dynamic structure}---thatdynamic65,2494
\section{The Linked List Data Structure}The84,3470
list}\index{list}list90,3844
\subsection{Using References to Link Objects}Using97,4225
A {\bf linked list}\index{linked list} is a list in which a linked134,5134
objects.  A {\bf self-referential object}\index{self-referentialself-referential139,5381
\label{fig-nodeuml}fig-nodeuml153,5791
The {\tt next} variable is often called a {\bf link}\index{link}link156,5973
example, Figure~\ref{fig-linkedlist}fig-linkedlist158,6103
\subsection{Example: The Dynamic Phone List}Example:229,8929
implement a phone list (Fig.~\ref{fig-phoneuml}fig-phoneuml233,9047
definition shown in Figure~\ref{fig-phonelistnode}fig-phonelistnode242,9592
\label{fig-phoneuml}fig-phoneuml246,9737
\subsection{Manipulating the Phone List}Manipulating375,13697
Figure~\ref{fig-phonelistprelim}fig-phonelistprelim395,14538
\subsection*{*433,15851
\label{fig-insertions}fig-insertions448,16579
head} to point to the node [Figure~\ref{fig-insertions}fig-insertions455,16830
traverse}\index{traverse}traverse457,16956
[Figure~\ref{fig-insertions}fig-insertions459,17066
{\tt null} (Fig.~\ref{fig-inserting}fig-inserting505,18824
list [Figure~\ref{fig-inserting}fig-inserting507,18961
node being inserted [Figure~\ref{fig-inserting}fig-inserting516,19532
\subsection*{*532,20180
\subsection*{*572,21966
\subsection*{*630,24300
As Figure~\ref{fig-remove}fig-remove645,25014
the second node in the list [Figure~\ref{fig-removal}fig-removal679,26326
\label{fig-removal}fig-removal692,26944
[Figure~\ref{fig-removal}fig-removal702,27438
\subsection*{*714,27770
The {\tt main()} program in Figure~\ref{fig-testlist}fig-testlist721,28094
\section{OBJECT-ORIENTED DESIGN:  \\The List Abstract Data Type (ADT)}OBJECT-ORIENTED801,31082
An {\bf Abstract Data Type (ADT)}\index{Abstract Data Type (ADT)} Abstract822,32236
\subsection*{*856,33959
Figure~\ref{fig-nodeclass}fig-nodeclass883,35144
\subsection*{*926,36440
\label{fig-listuml}fig-listuml939,36950
Figure~\ref{fig-listadt}fig-listadt1022,39686
The new {\tt insertAtFront()} method (Fig.~\ref{fig-listadt}fig-listadt1043,40561
\noindent See Figure~\ref{fig-insertions}fig-insertions1056,40973
\subsection*{*1081,42218
objects.  The {\tt main()} method in Figure~\ref{fig-testlistadt}fig-testlistadt1089,42633
(Fig.~\ref{fig-phonerecorduml}fig-phonerecorduml1139,44277
Figure~\ref{fig-phonerecord}fig-phonerecord1140,44338
\label{fig-phonerecorduml}fig-phonerecorduml1147,44666
\section{The Stack ADT}The1193,45669
\noindent A {\bf stack}\index{stack}stack1195,45694
last-in--first-out (LIFO)}\index{last-in--first-out (LIFO)} behavior last-in--first-out1198,45870
stack  (Fig.~\ref{fig-stack}fig-stack1205,46227
\label{fig-stack}fig-stack1210,46383
The stack operations are conventionally called {\bf push}\index{push}push1213,46436
for insert, and {\bf pop}\index{pop}pop1214,46507
\subsection{The {\tt Stack} Class}The1238,47711
respectively (Fig.~\ref{fig-stackadt}fig-stackadt1251,48438
\subsection{Testing the {\tt Stack} Class}Testing1314,50862
(Fig.~\ref{fig-stackadttest}fig-stackadttest1323,51376
\section{The {Queue} ADT}The1358,52420
\noindent A {\bf queue}\index{queue}queue1359,52446
(FIFO)}\index{first-in--first-out (FIFO)} behavior on the list.  Thinkfirst-in--first-out1362,52643
and you leave the line at the front (Fig.~\ref{fig-queue}fig-queue1364,52784
enqueue}\index{enqueue}enqueue1368,52922
\subsection{The {\tt Queue} Class}The1394,53879
(Fig.~\ref{fig-queueadt}fig-queueadt1399,54097
(Fig.~\ref{fig-queueadttest}fig-queueadttest1402,54289
\section*{*1480,56397
\section{From the Java Library: The Java Collections Framework and Generic Types}From1547,59397
\subsection{Generic types in Java}Generic1563,60228
\subsection*{*1645,63729
that modifies Figure~\ref{fig-stackadttest}fig-stackadttest1672,64605
\subsection{The {\tt List<E>} interface \\and the {\tt LinkedList<E>} class}The1676,64773
Figure~\ref{fig-listtest}fig-listtest1715,66628
\section{ Using the {\tt Set} and {\tt Map} Interfaces}1806,70008
\subsection{Using the {\tt Set} Interface.}Using1812,70230
\subsection*{*1864,73162
Figure~\ref{fig-settest}fig-settest1885,74039
\subsection{Using the {\tt Map<K,V>} Interface.}Using1964,76696
Figure~\ref{fig-maptest}fig-maptest2004,78497
\section{ The Binary Search Tree Data Structure}2045,79726
\label{fig-btree}fig-btree2062,80645

2.objects.tex,4569
\chapter{Objects: Using, Creating, and Defining}Objects:6,125
\label{chapter-objects}chapter-objects7,174
\section{Introduction}Introduction40,1273
object-oriented programming\index{object-oriented metaphor}.  We beginobject-oriented42,1367
\section{Using {\tt String} Objects}Using56,2041
\subsection{Creating and Combining Strings}Creating80,3373
Figure~\ref{fig-sillystr}fig-sillystr305,12196
\section{Drawing Shapes with a {\tt Graphics} Object (Optional)}Drawing363,13973
example. The program is reproduced in Figure~\ref{fig-helloworld2}fig-helloworld2371,14438
Figure~\ref{fig-drawstr}fig-drawstr455,17665
\subsection{Graphics Drawing Methods}Graphics465,17942
colors.  Table~\ref{table-colors}table-colors510,20058
\label{table-colors}table-colors525,20571
in Figure~\ref{fig-hw2appletclass}fig-hw2appletclass578,22934
Figure~\ref{fig-drawrect}fig-drawrect611,24059
review Section~\ref{sec-applet}sec-applet615,24339
\label{fig-drawrect}fig-drawrect623,24707
\label{pg-fig-drawrect}pg-fig-drawrect624,24728
\section{Class Definition}Class627,24767
\label{sec-classdef}sec-classdef628,24794
\label{pg-sec-classdef}pg-sec-classdef629,24815
\subsection{The {\tt Riddle} Class}The657,25952
Figure~\ref{fig-riddleclass2}fig-riddleclass2689,27428
\subsection{The {\tt RiddleUser} Class}The739,29249
Figure~\ref{fig-p63f2}fig-p63f2771,30907
\label{fig-p63f2}fig-p63f2780,31400
\label{pg-fig-p63f2}pg-fig-p63f2781,31418
\subsection{Object Instantiation: Creating {\tt Riddle} Instances}Object801,32358
\noindent Figure~\ref{fig-riddleuser}fig-riddleuser803,32426
\subsection{Interacting with {\tt Riddle}s }Interacting859,34400
\subsection{Define, Create, Use}Define,899,35825
\label{sect-mantra}sect-mantra900,35858
(Fig.~\ref{fig-riddleclass2}fig-riddleclass2922,36621
(Fig.~\ref{fig-riddleuser}fig-riddleuser935,36900
\section{CASE STUDY: Simulating a Two-Person Game}CASE948,37174
\subsection{Designing a OneRowNim class}Designing966,38222
\subsubsection*{*967,38263
\subsubsection*{*978,38803
\subsubsection*{*991,39556
\subsubsection*{*1029,41619
\subsection{Defining the {\tt OneRowNim} Class}Defining1064,43422
\subsubsection*{*1070,43645
\subsubsection*{*1094,44578
Figure~\ref{fig-form}fig-form1105,45047
(Fig.~\ref{fig-riddleclass2}fig-riddleclass21135,46016
declaring variables that were described in Section~\ref{sec-vardecl}sec-vardecl1139,46203
\subsubsection*{*1218,49952
\subsubsection*{*1264,51561
\subsubsection*{*1283,52422
class definition of {\tt OneRowNim}, in Figure~\ref{fig-ornmheaders}fig-ornmheaders1381,57284
\subsubsection*{*1385,57445
The completed class definition is shown in Figure~\ref{fig-orndef}fig-orndef1460,60350
\subsection{Testing the {\tt OneRowNim} Class}Testing1499,61411
Section~\ref{sect-mantra}sect-mantra1502,61522
\subsection{Flow of Control: Method Call and Return}Flow1619,65888
\label{sec-methodcall}sec-methodcall1620,65941
\label{pg-sec-methodcall}pg-sec-methodcall1621,65964
statement located in another method. Figure~\ref{fig-methodcall}fig-methodcall1632,66457
\noindent Recall that if a {\tt void}\index{void}void1654,67441
\subsection{Tracing the {\tt OneRowNim} Program}Tracing1663,67833
\label{subsect-trace}subsect-trace1664,67882
we will perform a trace of its execution. Figure~\ref{fig-trace}fig-trace1667,67978
Figure~\ref{fig-trace}fig-trace1717,69600
\subsection{Object-Oriented Design: Basic Principles}Object-Oriented1766,71955
\item  {\bf Encapsulation\index{Encapsulation Principle}.}Encapsulation1775,72238
\section*{*1828,74799
\section{From the Java Library: {\tt java.util.Scanner}.}From1871,77057
\label{pg-sec-scannerclass}pg-sec-scannerclass1872,77115
\subsection{Keyboard Input with the {\tt Scanner} Class} Keyboard1915,79630
number, or string from the keyboard.  The program in Figure~\ref{fig-scannerprog}fig-scannerprog1943,80775
\subsection{Keyboard Input with the {\tt KeyboardReader} Class} Keyboard2074,85814
TestKeyboardReader} class definition in Figure~\ref{fig-kbreaderprog}fig-kbreaderprog2099,87252
For the {\tt Riddle} class (Fig.~\ref{fig-riddleclass2}fig-riddleclass22273,92012
For {\tt RiddleUser} class (Fig.~\ref{fig-riddleuser}fig-riddleuser2285,92332
\item  In the {\tt RiddleUser} class (Fig.~\ref{fig-riddleuser}fig-riddleuser2397,95916
\item  In the {\tt RiddleUser} class (Fig.~\ref{fig-riddleuser}fig-riddleuser2405,96238
diagram to depict this relationship. See Figure~\ref{fig-p63f2}fig-p63f22596,102974

3.methods.tex,5980
\chapter{Methods: Communicating with Objects}Methods:6,122
\label{chapter-methods}chapter-methods7,168
\label{pg-chapter-methods}pg-chapter-methods8,192
\section{Introduction}Introduction45,1416
\section{Passing Information to an Object}Passing67,2534
Methods.}{An {\bf accessor method}\index{accessor method} is a publicaccessor76,2995
mutator method}\index{mutator method} is a public method used tomutator80,3261
parameter}\index{formal parameter} is a variable that serves as aformal132,5536
\label{meth-setsticks}meth-setsticks161,6754
\noindent As we will see in Section~\ref{sec-constructors}sec-constructors171,6925
\subsubsection*{*192,7708
of variables can be used. The {\bf scope}\index{scope}scope197,7971
A parameter's scope\index{parameter scope} is limited to the body ofparameter201,8115
referred to as {\bf local scope}\index{local scope}.local213,8842
local scope}\index{local scope} which extends from the point at whichlocal217,9009
scope}\index{class scope}, which extends throughout the class.class253,10779
qualified\index{qualified name} names, or dot notation, must bequalified271,11778
\subsection{Arguments and Parameters}Arguments305,13371
given in Figure~\ref{fig-ornclass2}fig-ornclass2308,13468
parameter\index{parameter}parameter394,16752
\subsection{Passing an {\tt int} value to a {\tt OneRowNim} method.}Passing437,18361
Figure~\ref{fig-testorn1}fig-testorn1443,18692
\label{fig-parameps}fig-parameps474,20005
\subsection{Passing keyboard input to {\tt takeSticks()}}Passing490,20822
in Figure~\ref{fig-testorn1}fig-testorn1493,20954
{\tt main()} method shown in Figure~\ref{fig-testorn2}fig-testorn2498,21293
a {\it method invocation}\index{method invocation}.method549,22903
\item  Modify the {\tt OneRowNim} class of Figure~\ref{fig-testorn2}fig-testorn2554,23043
\section{Constructor Methods}Constructor568,23769
\label{sec-constructors}sec-constructors569,23799
As you recall from Chapter 0, a {\bf constructor\index{constructor}constructor576,24147
\subsection{Default Constructors}Default725,30015
\label{sec-defaultconstructors}sec-defaultconstructors726,30049
constructor\index{constructor default}. The default constructor takesconstructor732,30342
\subsection{Constructor Overloading and Method Signatures}Constructor759,31186
\subsection{Constructor Invocation}Constructor863,34919
\section{Retrieving Information from an Object}Retrieving902,36374
\subsection{Invoking a Method That Returns a Value}Invoking959,38758
\subsection{An Expanded {\tt OneRowNim} Class}An1017,40914
\noindent Figure~\ref{fig-ornuml2}fig-ornuml21037,41996
\label{fig-ornuml2}fig-ornuml21056,42542
in Figure~\ref{fig-testorn3}fig-testorn31062,42786
\section{Passing a Value and Passing a Reference}Passing1126,44590
\label{sec-passby}sec-passby1127,44640
\label{pg-sec-passby}pg-sec-passby1128,44659
whether you are passing a value of primitive type\index{primitiveprimitive1131,44757
type\index{reference type} (such as ``Hello'' or {\tt game1}).  Whenreference1133,44879
shown in Figure~\ref{fig-primcall}fig-primcall1162,45743
\label{fig-vparameps}fig-vparameps1202,47477
(Fig.~\ref{fig-refcall}fig-refcall1217,48228
\section{Flow of Control: Control Structures}Flow1300,51486
\subsection{The Simple If Statement}The1334,53046
\label{sec-if}sec-if1335,53083
\label{pg-sec-if}pg-sec-if1336,53098
\noindent Semantically, the if statement\index{if statement} has the followingif1397,55160
\noindent The flowchart in Figure~\ref{fig-getplayerflow}fig-getplayerflow1429,56425
that when a {\tt return}\index{return statement} statement is executedreturn1436,56794
\subsection{The {\tt if-else} Statement}The1502,59273
\label{sec-ifelse}sec-ifelse1503,59314
\label{pg-sec-ifelse}pg-sec-ifelse1504,59333
Semantically, the if-else statement\index{if-else statement} has theif-else1547,61036
interpretation is shown in Figure~\ref{fig-ifelsechart}fig-ifelsechart1554,61423
\subsection{The Nested if/else Multiway Selection Structure}The1556,61481
\label{sec-multi}sec-multi1557,61542
\label{pg-sec-multi}pg-sec-multi1558,61560
if-else statement, thereby creating a {\it nested\index{nestednested1565,61989
{\bf multiway selection\index{multiway selection}}. As shown inmultiway1569,62255
Figure~\ref{fig-multiway}fig-multiway1570,62319
\label{fig-multiway}fig-multiway1577,62626
Figure~\ref{fig-multiway}fig-multiway1585,62957
\subsection{The While Structure}The1704,66752
The {\bf while statement}\index{while statement} is a loop statementwhile1760,68919
\noindent In pseudocode, the {\it while structure}\index{while structure} wouldwhile1795,70440
\label{fig-whileflow}fig-whileflow1825,71558
The semantics of the while structure are shown in Figure~\ref{fig-whileflow}fig-whileflow1831,71735
\section{Testing an Improved {\tt OneRowNim}}Testing1848,72331
Figure~\ref{fig-ornclass}fig-ornclass1918,75348
in Figure~\ref{fig-ornclass}fig-ornclass1929,76106
Figure~\ref{fig-tornclass}fig-tornclass2009,78238
\section*{*2071,80891
\section{{\bf From the Java Library} {\tt java.lang.Object}}2109,82851
\label{sec-tostring}sec-tostring2110,82912
\noindent The {\tt toString()}\index{toString() method} methodtoString()2144,84156
and then run the program shown in Figure~\ref{fig-orntostring}fig-orntostring2231,87386
\section{Object-Oriented Design: Inheritance and Polymorphism}Object-Oriented2272,88722
\section{Drawing Lines and Defining Graphical Methods (Optional)}Drawing2377,93771
Figure~\ref{fig-drawsticksprog}fig-drawsticksprog2434,96439
\label{fig-drawstickseps}fig-drawstickseps2511,98949
\item  A {\it formal parameter\index{parameter}parameter2567,99763
\item  The {\it signature\index{signature}signature2584,100549
\item  A {\it constructor\index{constructor}constructor2589,100758
{\it information hiding\index{Information Hiding Principle}}.Information2595,101037

4.uis.tex,5044
\chapter{Input/Output: Designing the User Interface}Input/Output:6,130
\label{chapter-io}chapter-io7,183
\section{Introduction}Introduction36,989
\section{The User Interface}The61,2333
Figure~\ref{fig-ui}fig-ui89,3876
\label{fig-ui}fig-ui96,4161
\label{pg-fig-ui}pg-fig-ui97,4176
the relationship shown in Figure~\ref{fig-ui}fig-ui101,4278
\section{A Command-Line Interface}A110,4742
console (Fig.~\ref{fig-command-line}fig-command-line116,5033
environment, as in Figure~\ref{fig-console}fig-console129,5501
\label{fig-console}fig-console134,5622
\label{pg-fig-console}pg-fig-console135,5642
which data flow (Fig.~\ref{fig-streams}fig-streams145,6085
\label{fig-streams}fig-streams155,6497
\label{pg-fig-streams}pg-fig-streams156,6517
associated with the keyboard (Fig.~\ref{fig-streams}fig-streams162,6748
\subsection{Using a {\tt BufferedReader} to Input Strings from the Keyboard}Using169,7156
\label{fig-buffrdr}fig-buffrdr187,8071
\label{pg-fig-buffrdr}pg-fig-buffrdr188,8091
Figure~\ref{fig-buffrdr}fig-buffrdr191,8129
\subsection{Inputting Numbers from the Keyboard}Inputting240,10365
\subsection{Designing a Keyboard Reader Class}Designing304,12874
Figure~\ref{fig-keybrdrdr}fig-keybrdrdr320,13428
Note that Figure~\ref{fig-keybrdrdr}fig-keybrdrdr354,15047
Figure~\ref{fig-keybrdrdrclass}fig-keybrdrdrclass380,16420
\subsection{Designing a Command-Line Interface}Designing481,20331
described in Figure~\ref{fig-ui}fig-ui486,20569
Figure~\ref{fig-greeter}fig-greeter521,22023
Figure~\ref{fig-greeterapp}fig-greeterapp537,22752
\section{A Graphical User Interface (GUI)}A623,25907
\subsection{Java's GUI Components}Java's654,27539
Figure~\ref{fig-guiscreen}fig-guiscreen666,28133
\subsection{Class Inheritance: Extending a Superclass}Class716,30721
\label{fig-swing1}fig-swing1772,33359
\label{pg-fig-swing1}pg-fig-swing1773,33378
Figure~\ref{fig-swing1}fig-swing1779,33579
\subsection{Top-level Windows}Top-level802,34586
Referring again to Figure~\ref{fig-swing1}fig-swing1804,34618
\label{fig-framecapture}fig-framecapture830,35794
\label{pg-fig-framecapture}pg-fig-framecapture831,35819
Figure~\ref{fig-framecapture}fig-framecapture834,35862
Figure~\ref{fig-simpleframe}fig-simpleframe845,36521
JFrame} (Fig.~\ref{fig-framesubclass}fig-framesubclass872,37277
inherited from {\tt JFrame}.  Figure~\ref{fig-framesubclass}fig-framesubclass902,38491
\subsection{GUI Components for Input, Output, and Control}GUI909,38863
be necessary to give it some components. Figure~\ref{fig-swing2}fig-swing2912,38992
\label{fig-swing2}fig-swing2931,39994
\label{pg-fig-swing2}pg-fig-swing2932,40013
(Fig.~\ref{fig-guiscreen}fig-guiscreen944,40650
\label{fig-constructors}fig-constructors961,41336
\label{pg-fig-constructors}pg-fig-constructors962,41361
Figure~\ref{fig-constructors}fig-constructors965,41404
\subsection{Adding GUI Components to a Top-Level Window}Adding993,42509
Container} (Fig.~\ref{fig-swing1}fig-swing1997,42704
(Fig.~\ref{fig-borderlayout}fig-borderlayout1024,43927
\label{fig-borderlayout}fig-borderlayout1029,44121
\label{pg-fig-borderlayout}pg-fig-borderlayout1030,44146
\subsection{Controlling the GUI's Action}Controlling1078,46003
event. As Figure~\ref{fig-eventmodel}fig-eventmodel1084,46324
Figure~\ref{fig-eventhier}fig-eventhier1121,47771
\label{fig-eventhier}fig-eventhier1133,48395
\label{pg-fig-eventhier}pg-fig-eventhier1134,48417
For our simple GUI, the methods described in Figure~\ref{fig-constructors}fig-constructors1162,49693
\subsection{The ActionListener Interface}The1168,49963
\subsection{Connecting the GUI to the Computational Object}Connecting1312,55932
Figure~\ref{fig-simplegui}fig-simplegui1314,55993
illustrated in Figure~\ref{fig-greeter}fig-greeter1393,59068
(Fig.~\ref{fig-command-line}fig-command-line1396,59253
\subsection{Using the GUI in a Java Application}Using1443,61544
\subsection{Using the GUI in a Java Applet}Using1473,62658
as a subclass of {\tt JFrame}.  Figure~\ref{fig-guipanel}fig-guipanel1508,63879
shown in Figure~\ref{fig-greeterapplet}fig-greeterapplet1587,66234
\label{fig-greeterapplet}fig-greeterapplet1594,66461
\label{pg-fig-greeterapplet}pg-fig-greeterapplet1595,66487
\section{Case Study: The One Row Nim Game }Case1598,66531
\subsection{A Command-line Interface to {\tt OneRowNim}}A1630,68222
KeyboardReader} (Fig.~\ref{fig-keybrdrdr}fig-keybrdrdr1635,68492
shown in Figure~\ref{fig-ornapp}fig-ornapp1637,68627
Figure~\ref{fig-ornapp}fig-ornapp1710,72238
\subsection{A GUI for {\tt OneRowNim}}A1824,77115
Figure~\ref{fig-orngui}fig-orngui1970,82737
(Fig.~\ref{fig-simplegui}fig-simplegui1974,82991
\section{From the Java Library: {\tt java.io.File} \\ and File Input (Optional)}From2064,87147
\label{pg-sec-fileclass}pg-sec-fileclass2067,87311
\subsection{File Input with the {\tt File} and {\tt Scanner} Classes} File2091,88548
The program in Figure~\ref{fig-fileprog}fig-fileprog2167,92073

5.data.tex,5692
\chapter{Java Data and Operators}Java6,110
\label{chapter-models}chapter-models7,144
\label{pg-chapter-models}pg-chapter-models8,167
\section{Introduction}Introduction43,1311
dominoes as shown in Figure~\ref{fig-chessboard}fig-chessboard74,2959
\label{fig-chessboard}fig-chessboard85,3513
\section{Boolean Data and Operators}Boolean104,4338
type is derived from the work of British mathematician George Boole\index{Boole, George}, Boole,108,4570
\subsection{Boolean (or Logical) Operations}Boolean154,6226
\subsection{Precedence and Associativity}Precedence234,10165
Java, the \&\& \mbox{operator} has higher precedence\index{precedence}precedence265,11299
\subsection{Short-Circuit Evaluation}Short-Circuit359,14607
\section*{*452,17624
\subsection{Using Booleans in OneRowNim}Using497,20275
Figure~\ref{fig-ornclass}fig-ornclass502,20492
\noindent The remaining changes are shown in Figure~\ref{fig-newonerow}fig-newonerow552,22322
\section{Numeric Data and Operators}Numeric652,25235
\subsection{Numeric Operations}Numeric762,30713
\TBT{2pc}{The standard arithmetic operators\index{arithmetic operators} in Java}arithmetic773,31336
integer\index{integer division}. Hence, (3/2) has the value 1, aninteger808,32970
and {\it floating-point division\index{floating-pointfloating-point825,33921
\subsubsection*{*873,35820
\JavaRule{Type Promotion\index{promotion rule}.}{Inpromotion929,38407
\subsection{Operator Precedence}Operator1018,41214
\noindent The built-in precedence order for arithmetic\index{arithmeticarithmetic1019,41247
\TBT{3.5pc}{Precedence order of the arithmetic operators\index{arithmetic operators}}arithmetic1026,41593
expressions have highest precedence\index{precedence}precedence1041,42287
\subsection{Increment and Decrement Operators}Increment1127,45048
{\it k++} uses the {\it increment operator}\index{increment operator ++}increment1130,45238
be used either as a {\it preincrement}\index{preincrement}preincrement1144,45782
{\it postincrement\index{postincrement}postincrement1147,45965
decrement\index{decrement operator --}} operator {\it $--$}, which candecrement1211,48341
also be used in the predecrement\index{predecrement}predecrement1212,48412
postdecrement\index{postdecrement}postdecrement1213,48469
\subsection{Assignment Operators}Assignment1269,50880
\noindent In addition to the simple assignment\index{assignment operator =}assignment1270,50914
\TBT{0pc}{Java's assignment operators\index{assignment operators}}assignment1317,52301
\subsection{Relational Operators}Relational1359,54041
\TBT{4pc}{Relational operators\index{relational operators}}relational1369,54484
precedence\index{precedence}precedence1409,56377
\section{{\bf From the Java Library} {\tt java.lang.Math}}1532,60206
\section{Numeric Processing Examples}Numeric1646,64490
\subsection{Example: Rounding to Two Decimal Places}Example:1652,64708
\subsection{Example: Converting Fahrenheit to Celsius}Example:1705,66761
\subsubsection*{*1710,66998
serve as the user interface (Fig.~\ref{fig-convapplobjs}fig-convapplobjs1715,67279
\label{fig-convapplobjs}fig-convapplobjs1722,67546
\label{pg-fig-convapplobjs}pg-fig-convapplobjs1723,67571
\subsubsection*{*1728,67684
\subsubsection*{*1774,70212
Figure~\ref{fig-temperature}fig-temperature1777,70336
to the design shown in Figure~\ref{fig-p242f2}fig-p242f21785,70805
\subsubsection*{*1831,72167
\subsubsection*{*1873,74028
interface. Figure~\ref{fig-tempcmdline}fig-tempcmdline1883,74560
\item  Following the design in Figure~\ref{fig-tempcmdline}fig-tempcmdline1897,75047
The GUI should have the layout shown in Figure~\ref{fig-convapplgui}fig-convapplgui1918,75956
\subsection{Example: Using Class Constants}Example:1921,76040
\noindent As we noted in Chapter~\ref{chapter-intro}chapter-intro1923,76085
program easier to modify and maintain\index{MaintainabilityMaintainability2028,80440
shown in Figure~\ref{fig-constnim}fig-constnim2064,82157
\subsection{OBJECT-ORIENTED DESIGN: \\ Information Hiding}OBJECT-ORIENTED2141,84578
\subsection{Example: A Winning Algorithm for One Row Nim}Example:2187,86694
\section{{\bf From the Java Library} \\{\tt java.text.NumberFormat}}2423,95464
amounts, percentages, and other formats (Fig.~\ref{fig-pg267f1}fig-pg267f12437,96164
shown in Table~\ref{fig-bankcd}fig-bankcd2491,98085
\section{Character Data and Operators}Character2550,100685
{\tt char}\index{char}char2553,100794
backward compatible with ASCII\index{ASCII character set} systems, theASCII2583,102258
\TBT{0pc}{ASCII\index{ASCII}ASCII2590,102592
\subsection{Character to Integer Conversions}Character2624,103546
type conversions\index{type conversion rule} from a narrower type to atype2747,108254
\subsection{Lexical Ordering}Lexical2798,109899
\subsection{Relational Operators}Relational2824,111370
\TBT{2.5pc}{Relational operations\index{relational operators} on characters}relational2842,112383
\section{Example: Character Conversions }Example:2860,113171
characters\index{character conversion} as integers is that we cancharacter2862,113275
\noindent This method\index{toUpperCase() method}toUpperCase()2920,115305
digit\index{digitToInteger() method} to its corresponding integerdigitToInteger()2960,116795
The Java application program shown in Figure~\ref{fig-testapplet}fig-testapplet2996,118103
\jjjprogstop{A Java program illustrating character\index{charactercharacter3033,119362
\section{Problem Solving = Representation + Action}Problem3039,119586
\TBT{0pc}{Java operator precedence and associativity table\index{precedence table}}precedence3160,123632

6.loops.tex,4618
\chapter{Control Structures}Control6,105
\label{chapter-loops}chapter-loops7,134
\label{pg-chapter-loops}pg-chapter-loops8,156
\section{Introduction}Introduction42,1185
\section{Flow of Control: Repetition Structures}Flow73,2842
\section{Counting Loops}Counting160,6029
\subsection{The For Structure}The239,9107
\label{fig-forloop}fig-forloop243,9239
\label{pg-fig-forloop}pg-fig-forloop244,9259
Figure~\ref{fig-forloop}fig-forloop248,9311
{\tt while} structure (Fig.~\ref{fig-whileflow6}fig-whileflow6250,9454
\subsection{Loop Bounds}Loop330,12339
\subsection{Infinite Loops}Infinite363,13732
\subsection{Loop Indentation}Loop414,16000
\subsection{Nested Loops}Nested607,21747
\section{Example: Car Loan}Example:754,27028
\subsection*{*762,27436
\subsection*{*785,28499
\subsection*{*834,30133
Figure~\ref{fig-carloan}fig-carloan844,30737
\section{Graphics Example: Drawing a Checkerboard}Graphics883,32259
checkers game in Chapter~\ref{chapter-inheritance}chapter-inheritance898,33110
\subsection*{*900,33163
whose implementation is given in Figure~\ref{fig-checkerapplet}fig-checkerapplet913,33830
\subsection*{*949,35041
are shown in Figure~\ref{fig-checkeruml}fig-checkeruml964,35929
\subsection*{*990,37363
Figure~\ref{fig-checkerclass}fig-checkerclass993,37529
The calculation here is illustrated in Figure~\ref{fig-checkerlayout}fig-checkerlayout1099,41698
\label{fig-checkerlayout}fig-checkerlayout1110,42216
\label{pg-fig-checkerlayout}pg-fig-checkerlayout1111,42242
\section{Conditional Loops}Conditional1159,44188
\subsection{The While Structure, Revisited}The1198,45887
whose flowchart is shown in Figure~\ref{fig-whileflow6}fig-whileflow61224,46902
\subsection{The \mbox{Do-While} Structure}The1360,50916
Figure~\ref{fig-dowhileflow}fig-dowhileflow1464,55244
\label{fig-dowhileflow}fig-dowhileflow1470,55408
\label{pg-fig-dowhileflow}pg-fig-dowhileflow1471,55432
occur.\index{loop design}}loop1494,56189
\section{Example: Computing Averages}Example:1557,58091
\index{Compute Average Example}Compute1558,58129
Figure~\ref{fig-avg}fig-avg1731,65676
\section{Example: Data Validation}Example:1796,68227
\index{Data Validation Example}Data1797,68262
(Fig.~\ref{fig-avg}fig-avg1845,70405
which we name {\tt Validate} (Fig.~\ref{fig-validate}fig-validate1849,70687
\section{Principles of Loop Design}Principles1905,72847
principles\index{loop design principles} involved in correctlyloop1907,72951
\item  A {\it counting\index{counting loop} loop} cancounting1911,73047
\item  A {\it while structure}\index{while structure} shouldwhile1916,73263
\item  A {\it do-while structure}\index{do-while structure} shoulddo-while1921,73479
\item  A loop's {\it bound\index{bound}bound1929,73880
\item  An {\it infinite\index{infinite loop} loop} may result if theinfinite1934,74136
\section{The {\tt switch} Multiway Selection Structure}The1988,76231
A {\tt switch} statement\index{switch statement} is executed accordingswitch2042,78067
structure\index{multiway-selection structure}, which would output,multiway-selection2086,79196
to {\tt break\index{break}break2110,79842
(Fig.~\ref{fig-multiwayswitch}fig-multiwayswitch2138,80612
\section{OBJECT-ORIENTED DESIGN: \\Structured Programming}OBJECT-ORIENTED2231,83123
\index{structured programming}structured2237,83357
{\it go to\index{goto statement}} statement, which could be used to transfergoto2248,83992
research results of that era was a 1966 paper by Boehm\index{Boehm}Boehm2258,84561
Jacopini\index{Jacopini}Jacopini2259,84633
influential paper by Edgar Dikjstra\index{Dikjstra}Dikjstra2262,84832
The Pascal language, introduced by Nicklaus Wirth\index{Wirth}Wirth2266,85026
in a program (Fig.~\ref{fig-controlstructs}fig-controlstructs2271,85364
statement.\index{control structures}}control2277,85560
\subsection*{*2317,86911
entry point and exit (Fig.~\ref{fig-controlstructs}fig-controlstructs2323,87230
4. Figure~\ref{fig-preposts}fig-preposts2375,89494
\subsection*{*2473,92621
\subsection*{*2548,95614
\subsection*{*2584,97301
basic control structures (Fig.~\ref{fig-controlstructs}fig-controlstructs2622,99383
\section*{*2684,101290
\item  A {\it repetition structure} is a control structure\index{repetition structure}repetition2804,105533
\item The {\tt for} statement\index{for statement} has the following syntax:for2814,105989
\item  {\it Structured programming\index{structured programming}}structured2861,107408
\item  The Fibonacci\index{Fibonacci sequence} sequenceFibonacci3688,130148

7.strings.tex,5216
\chapter{Strings and String  Processing}Strings6,116
\label{chapter-strings}chapter-strings7,157
\label{pg-chapter-strings}pg-chapter-strings8,181
\section{Introduction}Introduction39,1094
data structure}.  A {\bf data structure}\index{data structure} is adata69,2587
\section{String Basics}String95,3804
\label{sec-strconstr}sec-strconstr97,3861
\label{pg-sec-strconstr}pg-sec-strconstr98,3883
class (Fig.~\ref{fig-p349f1}fig-p349f1104,4245
\subsection{Constructing Strings}Constructing135,5707
the reference to it.  Figure~\ref{fig-emptystring}fig-emptystring159,6440
the sequence of characters. That information is hidden. As Figure~\ref{fig-emptystring}fig-emptystring166,6936
reference to the object (Fig.~\ref{fig-literalstr}fig-literalstr193,8079
literal object ``Socrates,'' which is depicted in Figure~\ref{fig-literalstr}fig-literalstr208,8589
objects.  Instead, as Figure~\ref{fig-literalrefs}fig-literalrefs231,9452
\marginfig{chptr07/p351f1.eps}{Together with the objects in Figure~\ref{fig-literalrefs}fig-literalrefs246,10331
\noindent In this case, as shown in Figure~\ref{fig-strobjects}fig-strobjects261,10772
\subsection{Concatenating Strings }Concatenating281,11733
two other strings. Recall from Chapter~\ref{chapter-objects}chapter-objects283,11840
\subsection{Indexing {\tt String}s }Indexing390,15311
indexed}\index{zero indexed}---that is, the index of the firstzero424,16717
7 (Fig.~\ref{fig-zeroindex}fig-zeroindex430,17125
\subsection{Converting Data to Strings}Converting444,17768
\section{Finding Things Within a String}Finding523,20469
methods\index{lastIndexOf() method} are instance methods that can belastIndexOf()534,21031
As Figure~\ref{fig-helloindex}fig-helloindex601,23501
\section{Example: Keyword Search}Example:693,26593
Figure~\ref{fig-keywordsearch}fig-keywordsearch749,29293
\subsection*{*784,30449
\section{From the Java Library: java.lang.StringBuffer}From824,32391
\section{Retrieving Parts of Strings}Retrieving956,38512
\noindent The {\tt charAt()} method\index{charAt() method}charAt()976,39325
The {\tt substring()} methods\index{substring() method} work in asubstring()981,39594
\section{Example: Processing Names and Passwords}Example:1110,44170
\section{Processing Each Character in a {\tt String}}Processing1210,47680
\subsection{Off-by-One Error}Off-by-One1249,49498
{\bf off-by-one error}\index{off-by-one error}, which can occur in many different ways.  Foroff-by-one1251,49606
\subsection{Example: Counting Characters}Example:1270,50518
(Fig.~\ref{fig-countchar}fig-countchar1282,51058
\subsection{Example: Reversing a String}Example:1317,52466
\subsection{Example: Capitalizing the First Letter }Example:1356,53986
\subsection{Miscellaneous {\tt String} Methods}Miscellaneous1407,55990
\section{Comparing Strings}Comparing1445,58116
Lexicographic order\index{lexicographic order} can be extended tolexicographic1466,59104
\noindent We can define {\bf lexicographic order}\index{lexicographic order} for strings as follows:lexicographic1484,59955
\subsection{Object Identity Versus Object Equality}Object1554,62798
equals()}\index{String.equals()}String.equals()1566,63207
(Fig.~\ref{fig-venus}fig-venus1596,64480
Figure~\ref{fig-equals}fig-equals1628,65722
\subsection{String Identity Versus String Equality}String1696,68166
in Figure~\ref{fig-strings}fig-strings1702,68421
\figaleft{chptr07/p375f1.eps}{For {\tt String} objects, equality\index{String equality}String1706,68486
and identity\index{String identity} are different.   Two distinctString1707,68574
\label{fig-strings}fig-strings1712,68856
\label{pg-fig-strings}pg-fig-strings1713,68876
in Section~\ref{sec-strconstr}sec-strconstr1753,70108
\section{From the Java Library: \\java.util.StringTokenizer}From1870,73574
Java's {\tt java.util.StringTokenizer}\index{StringTokenizer class} classStringTokenizer1883,74324
(Fig.~\ref{fig-p377f1}fig-p377f11887,74547
\section{Handling Text in a Graphics Context \\(Optional)}Handling1968,77155
(Fig.~\ref{fig-fontmethods}fig-fontmethods1984,77960
Java programs back in Chapter~\ref{ch:intro2}ch:intro21989,78302
\subsection{The {\tt Font} and {\tt FontMetrics} Classes}The2003,78787
\subsection{Font Metrics}Font2089,82378
are associated with a font.   The {\bf baseline}\index{baseline}baseline2113,83454
as the character's {\bf ascent}\index{ascent}ascent2128,83995
The {\tt FontMetrics} class (Fig.~\ref{fig-fontmetrics2}fig-fontmetrics22143,84728
\subsection{Example: Centering a Line of Text}Example:2155,85406
remaining task is to draw the string (Fig.~\ref{fig-centertext}fig-centertext2246,89528
Figure~\ref{fig-centertextscreen}fig-centertextscreen2249,89732
\label{fig-centertextscreen}fig-centertextscreen2299,91311
\label{pg-fig-centertextscreen}pg-fig-centertextscreen2300,91340
\item  A {\tt String\index{String}String2357,91827
and {\tt last\-Index\-Of()} methods\index{String methods} are used forString2377,92834
\item  See Figure~\ref{fig-strobjects3}fig-strobjects32443,94942
\label{ans-strobjects2}ans-strobjects22444,94983
\label{pg-ans-strobjects2}pg-ans-strobjects22445,95007

8.oop.tex,5072
\chapter{Inheritance and Polymorphism}Inheritance6,115
\label{chapter-inheritance}chapter-inheritance7,154
\section{Introduction}Introduction37,1080
\section{Java's Inheritance Mechanism}Java's78,3376
Figure~\ref{fig-horsehier}fig-horsehier90,3897
\subsection{Using an Inherited Method}Using112,5187
\noindent Figure~\ref{fig-student1}fig-student1143,6276
\subsection{Overriding an Inherited Method}Overriding186,8100
is shown in Figure~\ref{fig-student2}fig-student2213,9065
\subsection{Static Binding, Dynamic Binding \\and Polymorphism}Static239,10042
\subsection{Polymorphism and Object-Oriented Design}Polymorphism364,16156
\subsection{Using {\tt super} to Refer to the Superclass}Using463,20072
\subsection{Inheritance and Constructors}Inheritance531,22078
in Figure~\ref{fig-collstudent}fig-collstudent568,23540
     \section{Abstract Classes, Interfaces, \\ and Polymorphism}Abstract652,26941
\subsection{Implementing an Abstract Method}Implementing669,27549
Figure~\ref{fig-animals}fig-animals697,28761
Figure~\ref{fig-animalsubs}fig-animalsubs770,31650
\subsection{Implementing a Java Interface}Implementing898,36724
(Fig.~\ref{fig-speakable}fig-speakable920,37903
\section{Example: A Toggle Button}Example:1024,41941
\label{sec-toggle}sec-toggle1025,41976
\label{pg-sec-toggle}pg-sec-toggle1026,41995
alternate labels (Fig.~\ref{fig-toggleuml}fig-toggleuml1065,44133
Figure~\ref{fig-togglebutton}fig-togglebutton1079,44763
(Fig~\ref{fig-p204}fig-p2041174,49174
applet that uses a {\tt ToggleButton} (Fig.~\ref{fig-toggletest}fig-toggletest1188,49802
\label{fig-toggledump}fig-toggledump1235,51415
\label{pg-fig-toggledump}pg-fig-toggledump1236,51438
principles of object-oriented\index{object-oriented design}object-oriented1241,51552
\section*{*1273,52754
{\it encrypt\index{encryption}encryption1278,52982
\hspace*{1pc}One of the earliest and simplest {\it ciphers\index{cipher}cipher1286,53540
Caesar\index{Caesar cipher} cipher, used by Julius Caesar during theCaesar1287,53621
{\bf plaintext} alphabet\index{plaintext alphabet}.  Thus, ``hello'' would beplaintext1304,54315
\hspace*{1pc}The Caesar cipher is a {\bf substitution cipher}\index{substitution cipher},substitution1306,54426
alphabet\index{ciphertext alphabet}. A more general form of aciphertext1309,54624
substitution cipher uses a {\it keyword\index{keyword, cipher}} tokeyword,1310,54686
cipher}.\index{transposition cipher} In this type of cipher, thetransposition1326,55313
\section{Example: The Cipher Class Hierarchy}Example:1331,55553
(Fig.~\ref{fig-cipherhier}fig-cipherhier1364,57311
\subsection{Class Design: {\tt Caesar} }Class1436,60150
\noindent Figure~\ref{fig-cipher}fig-cipher1437,60191
\subsection{Algorithm Design: Shifting Characters}Algorithm1508,63018
(Fig.~\ref{fig-caesar}fig-caesar1510,63145
\subsection{Class Design: {\tt Transpose} }Class1640,68202
\noindent The {\tt Transpose} class (Fig.~\ref{fig-transpose}fig-transpose1641,68246
\jjjprogstop{The {\tt Transpose} class\index{Transpose class}.}Transpose1669,69327
\subsection{Testing and Debugging}Testing1673,69421
\noindent Figure~\ref{fig-testcipher}fig-testcipher1674,69456
\jjjprogstop{The {\tt TestEncrypt} class\index{TestEncrypt class}.}TestEncrypt1701,70633
\section{Case Study: A Two Player Game Hierarchy}Case1734,71723
\subsection{Design Goals}Design1758,73052
\subsection{Designing the {\tt TwoPlayerGame} Class}Designing1787,74612
OneRowNim} class---would inherit these elements.  Figure~\ref{fig-onerownim}fig-onerownim1796,75128
Figure~\ref{fig-twoplayergame}fig-twoplayergame1835,77258
\label{fig-twoplayergame}fig-twoplayergame1844,77668
\label{pg-fig-twoplayergame}pg-fig-twoplayergame1845,77694
\subsection{The {\tt TwoPlayerGame} Superclass}The1854,78062
Figure~\ref{fig-twoplayercode}fig-twoplayercode2045,86367
\subsection{The {\tt CLUIPlayableGame} Interface}The2104,88106
Figure~\ref{fig-twoplayergame}fig-twoplayergame2107,88203
As Figure~\ref{fig-twoplayergame}fig-twoplayergame2221,92979
\subsection{Object Oriented Design: Interfaces or Abstract Classes}Object2226,93230
\subsection{The Revised {\tt OneRowNim} Class}The2271,95627
Figure~\ref{fig-revisednim}fig-revisednim2273,95675
(Fig.~\ref{fig-revisednim2}fig-revisednim22404,100656
\subsection{The {\tt IPlayer} Interface}The2481,104794
Figure~\ref{fig-nimbad}fig-nimbad2546,107555
\subsection{Playing {\tt OneRowNim}}Playing2600,109770
Figure~\ref{fig-playnim}fig-playnim2714,114093
\subsection{Extending the {\tt TwoPlayerGame} Hierarchy}Extending2755,115646
\label{fig-wordguessuml}fig-wordguessuml2778,116851
\label{pg-fig-wordguessuml}pg-fig-wordguessuml2779,116876
Figure~\ref{fig-wordguessuml}fig-wordguessuml2784,117031
source code is shown in Figures~\ref{fig-wordguess}fig-wordguess2938,123121
\ref{fig-wordguess2}fig-wordguess22939,123177
(Fig.~\ref{fig-wordguesser}fig-wordguesser2994,126488
\section{Principles Of Object-Oriented Design}Principles3035,128016

9.arrays-mod.tex,5944
\chapter{Arrays and Array Processing}Arrays6,114
\label{chapter-arrays}chapter-arrays7,152
\label{pg-chapter-arrays}pg-chapter-arrays8,175
\section{Introduction}Introduction43,1289
\section{One-Dimensional Arrays}One-Dimensional106,3574
\subsection{Declaring and Creating Arrays}Declaring203,7469
has {\it N} components\index{array component}, then we say that thearray220,8485
{\bf array length}\index{array length} is {\it N}. Each of thearray221,8553
{\it component\index{array component type} type}.  An {\it empty}array223,8687
A {\bf one-dimensional} array\index{one-dimensional array} hasone-dimensional226,8797
components that are called the array's {\bf elements\index{arrayarray229,8964
element}}. Their type is the array's {\bf element\index{array elementarray230,9029
create both a name for the array and then the array\index{arrayarray238,9524
\subsection{Array Allocation}Array265,10419
the loop bound.  Every array has a {\tt length}\index{array length}array297,11761
When an array\index{array allocation} of {\it N} elements isarray434,17525
\subsection{Initializing Arrays}Initializing470,18866
array initializer}\index{array initializer} is written as a list of expressions separated byarray481,19354
\subsection{Assigning and Using Array Values}Assigning511,20510
subscripted.  For example, the following assignment\index{arrayarray516,20791
\section{Simple Array Examples}Simple568,22031
principle\index{Maintainability Principle}.Maintainability630,24403
\label{fig-squaresout}fig-squaresout703,27304
storage\index{array storage} locations.  In this example, {\tt intArr}array709,27450
\section{Example: Counting Frequencies of Letters}Example:760,29285
\subsection{A Class to Store the Frequency of One Letter}A786,30871
\label{fig-letfreq}fig-letfreq852,33141
\subsection{A Class to Count Letter Frequencies}A858,33352
\label{fig-anafreq}fig-anafreq980,37461
\section{Array Algorithms: Sorting}Array1010,38530
\label{sec-sort}sec-sort1011,38566
\subsection{Insertion Sort}Insertion1020,39016
\subsection{Selection Sort}Selection1228,47259
\label{sec-selectionsort}sec-selectionsort1229,47287
\subsection{Algorithm: Swapping Memory Elements}Algorithm:1281,49631
\subsection{Passing a Value and Passing a Reference}Passing1354,52203
\label{fig-arrayparam}fig-arrayparam1433,55463
\section{Array Algorithms: Searching}Array1465,56516
\subsection{Sequential Search}Sequential1474,56956
\noindent This approach is known as a {\bf sequential\index{sequential search}sequential1476,57047
\subsection{Binary Search}Binary1549,59693
binary\index{binary search} search}, which is abinary1555,60036
divide-and-conquer\index{divide-and-conquer}divide-and-conquer1556,60084
\section{Two-Dimensional Arrays}Two-Dimensional1727,66944
{\tt IndexOutOfBoundsException}\index{IndexOutOfBoundsException}IndexOutOfBoundsException1828,71053
\subsection{Two-Dimensional Array Methods}Two-Dimensional1931,75807
\subsubsection*{*1959,77013
\subsubsection*{*1994,78577
\subsection{Passing Part of an Array to a Method}Passing2058,81079
\section{Multidimensional Arrays (Optional)}Multidimensional2247,88378
\label{fig-threedarray}fig-threedarray2282,89738
\noindent Note again the proper use of the {\tt length}\index{array length}array2308,90687
\subsection{Array Initializers}Array2320,91323
\noindent It is possible to use an initializer\index{initializer, array} with ainitializer,2321,91355
{\bf multidimensional array}\index{multidimensional array}.  For instance, themultidimensional2322,91435
\section{OBJECT-ORIENTED DESIGN: \\[2pt]Polymorphic Sorting (Optional)}OBJECT-ORIENTED2356,92927
\label{fig-testsort}fig-testsort2514,99518
\label{pg-fig-testsort}pg-fig-testsort2515,99539
\subsection{The {\tt java.util.Arrays.sort()} Method}The2533,100439
\section{From the Java Library: java.util.Vector}From2582,102177
\label{sec-vectors}sec-vectors2583,102227
Figure~\ref{fig-vectordemo}fig-vectordemo2603,103085
\section{Case Study: An N-Player Computer Game}Case2668,105662
\subsection{The {\tt ComputerGame} Hierarchy}The2685,106610
\label{fig-game}fig-game2690,106769
\label{pg-fig-game}pg-fig-game2691,106786
Figure~\ref{fig-game}fig-game2694,106821
\subsection{The {\tt ComputerGame} Class}The2733,109044
Figure~\ref{fig-computergame}fig-computergame2735,109087
Figure~\ref{fig-gamesource}fig-gamesource2793,111695
(Fig.~\ref{fig-gamesource}fig-gamesource2876,114386
\subsection{The {\tt WordGuess} and {\tt WordGuesser} Classes}The2912,115925
example from Chapter~\ref{chapter-inheritance}chapter-inheritance2915,116056
Figure~\ref{fig-wordguess}fig-wordguess2923,116528
you compare it with the design we used in Chapter~\ref{chapter-inheritance}chapter-inheritance2924,116610
Player} (Figure~\ref{fig-wordguesser}fig-wordguesser3033,120723
Figure~\ref{fig-player}fig-player3049,121342
\section{A GUI-Based Game (Optional Graphics)}A3130,124612
game. An appropriate GUI is shown Figure~\ref{fig-capture}fig-capture3151,125742
\subsection{The {\tt GUIPlayableGame} Interface}The3168,126580
Figure~\ref{fig-capture}fig-capture3179,127225
can be implemented by any game that wishes to use a GUI (Fig.~\ref{fig-GUIplayable}fig-GUIplayable3188,127730
\subsection{The {\tt SlidingTilePuzzle}}The3236,129750
Figure~\ref{fig-slidingpuzzle}fig-slidingpuzzle3240,129901
Figure~\ref{fig-puzzlecode}fig-puzzlecode3339,133571
\subsection{The {\tt SlidingGUI} Class}The3398,135356
Chapter~\ref{chapter-io}chapter-io3402,135529
Figure~\ref{fig-slidingGUI}fig-slidingGUI3404,135557
Figure~\ref{fig-GUIsource}fig-GUIsource3423,136616
\item An {\bf array}\index{array}array3616,142508
subscript\index{subscript}subscript3619,142704
values to each array location.  An {\it initializer\index{arrayarray3650,143914
square}. A magic square\index{square}square4147,158179

9.arrays.tex,6769
\chapter{Arrays and Array Processing}Arrays6,114
\label{chapter-arrays}chapter-arrays7,152
\label{pg-chapter-arrays}pg-chapter-arrays8,175
\section{Introduction}Introduction43,1289
\section{One-Dimensional Arrays}One-Dimensional106,3574
Figure~\ref{fig-intarray}fig-intarray127,4574
element within the array. As Figure~\ref{fig-intarray}fig-intarray135,4908
expression.  Using Figure~\ref{fig-intarray}fig-intarray144,5266
\subsection{Declaring and Creating Arrays}Declaring203,7462
has {\it N} components\index{array component}, then we say that thearray220,8478
{\bf array length}\index{array length} is {\it N}. Each of thearray221,8546
{\it component\index{array component type} type}.  An {\it empty}array223,8680
A {\bf one-dimensional} array\index{one-dimensional array} hasone-dimensional226,8790
components that are called the array's {\bf elements\index{arrayarray229,8957
element}}. Their type is the array's {\bf element\index{array elementarray230,9022
create both a name for the array and then the array\index{arrayarray238,9517
in Figure~\ref{fig-intarray}fig-intarray240,9652
\subsection{Array Allocation}Array265,10411
\noindent Creating the array in Figure~\ref{fig-intarray}fig-intarray266,10441
the loop bound.  Every array has a {\tt length}\index{array length}array297,11752
references to those objects (Fig.~\ref{fig-arrayobjs}fig-arrayobjs321,13019
When an array\index{array allocation} of {\it N} elements isarray433,17455
\subsection{Initializing Arrays}Initializing469,18796
array initializer}\index{array initializer} is written as a list of expressions separated byarray480,19284
initialize the array shown in Figure~\ref{fig-intarray}fig-intarray483,19473
\subsection{Assigning and Using Array Values}Assigning510,20439
subscripted.  For example, the following assignment\index{arrayarray515,20720
\section{Simple Array Examples}Simple567,21960
\noindent The program in Figure~\ref{fig-initarrays}fig-initarrays569,21993
principle\index{Maintainability Principle}.Maintainability607,23686
\label{fig:printarraysout}fig:printarraysout619,24112
\noindent The example in Figure~\ref{fig-squares100}fig-squares100667,26000
storage\index{array storage} locations.  In this example, {\tt intArr}array698,27161
\label{fig-squaresout}fig-squaresout709,27455
\section{Example: Counting Frequencies of Letters}Example:773,29600
\subsection{A Class to Store the Frequency of One Letter}A799,31186
in Figure~\ref{fig-letfreq}fig-letfreq867,33466
\subsection{A Class to Count Letter Frequencies}A871,33642
\noindent given in Figure~\ref{fig-anafreq}fig-anafreq995,37762
\section{Array Algorithms: Sorting}Array1023,38796
\label{sec-sort}sec-sort1024,38832
\subsection{Insertion Sort}Insertion1033,39263
The {\tt Sort} class (Fig~\ref{fig-bubblemeth}fig-bubblemeth1150,43880
\subsection{Selection Sort}Selection1241,47505
\label{sec-selectionsort}sec-selectionsort1242,47533
\subsection{Algorithm: Swapping Memory Elements}Algorithm:1294,49877
\subsection{Passing a Value and Passing a Reference}Passing1367,52449
the same array (Fig.~\ref{fig-arrayparam}fig-arrayparam1441,55502
\label{fig-arrayparam}fig-arrayparam1446,55708
\section{Array Algorithms: Searching}Array1478,56761
\subsection{Sequential Search}Sequential1487,57201
\noindent This approach is known as a {\bf sequential\index{sequential search}sequential1489,57292
The {\tt Search} class (Figs.~9.15 and \ref{fig-search}fig-search1513,58134
\subsection{Binary Search}Binary1563,59926
binary\index{binary search} search}, which is abinary1569,60269
divide-and-conquer\index{divide-and-conquer}divide-and-conquer1570,60317
(Fig.~\ref{fig-search}fig-search1619,62504
The {\tt TestSearch} class (Figs.~9.17 and \ref{fig-testsearch}fig-testsearch1680,65102
\section{Two-Dimensional Arrays}Two-Dimensional1742,67168
(Fig.~\ref{fig-rainfall}fig-rainfall1805,69705
As Figure~\ref{fig-rainfall}fig-rainfall1815,70005
{\tt IndexOutOfBoundsException}\index{IndexOutOfBoundsException}IndexOutOfBoundsException1843,71275
row in the representation shown in Figure~\ref{fig-rainfall}fig-rainfall1880,72821
\subsection{Two-Dimensional Array Methods}Two-Dimensional1947,76028
\subsubsection*{*1975,77234
\subsubsection*{*2010,78798
\subsection{Passing Part of an Array to a Method}Passing2074,81300
Figure~\ref{fig-twodrow}fig-twodrow2114,82920
\noindent The {\tt Rainfall} class (Figs.~9.21 and \ref{fig-rainfallclass}fig-rainfallclass2145,84275
\section{Multidimensional Arrays (Optional)}Multidimensional2263,88597
In Figure~\ref{fig-threedarray}fig-threedarray2289,89579
\label{fig-threedarray}fig-threedarray2298,89956
\noindent Note again the proper use of the {\tt length}\index{array length}array2324,90905
\subsection{Array Initializers}Array2336,91541
\noindent It is possible to use an initializer\index{initializer, array} with ainitializer,2337,91573
{\bf multidimensional array}\index{multidimensional array}.  For instance, themultidimensional2338,91653
\section{OBJECT-ORIENTED DESIGN: \\[2pt]Polymorphic Sorting (Optional)}OBJECT-ORIENTED2372,93145
The {\tt TestSort} class (Figs.~9.25 and ~\ref{fig-testsort}fig-testsort2474,97423
\subsection{The {\tt java.util.Arrays.sort()} Method}The2548,100563
\section{From the Java Library: java.util.Vector}From2598,102302
\label{sec-vectors}sec-vectors2599,102352
Figure~\ref{fig-vectordemo}fig-vectordemo2619,103188
\section{Case Study: An N-Player Computer Game}Case2684,105765
\subsection{The {\tt ComputerGame} Hierarchy}The2701,106713
\label{fig-game}fig-game2706,106872
\label{pg-fig-game}pg-fig-game2707,106889
Figure~\ref{fig-game}fig-game2710,106924
\subsection{The {\tt ComputerGame} Class}The2749,109147
Figure~\ref{fig-gamesource}fig-gamesource2809,111780
(Fig.~\ref{fig-gamesource}fig-gamesource2892,114471
\subsection{The {\tt WordGuess} and {\tt WordGuesser} Classes}The2929,116011
Figure~\ref{fig-player}fig-player3066,121348
\section{A GUI-Based Game (Optional Graphics)}A3147,124618
game. An appropriate GUI is shown Figure~\ref{fig-capture}fig-capture3168,125748
\subsection{The {\tt GUIPlayableGame} Interface}The3185,126586
Figure~\ref{fig-capture}fig-capture3196,127231
\subsection{The {\tt SlidingTilePuzzle}}The3253,129739
Figure~\ref{fig-puzzlecode}fig-puzzlecode3356,133541
\subsection{The {\tt SlidingGUI} Class}The3415,135326
Figure~\ref{fig-GUIsource}fig-GUIsource3440,136555
\item An {\bf array}\index{array}array3633,142447
subscript\index{subscript}subscript3636,142643
values to each array location.  An {\it initializer\index{arrayarray3667,143853
square}. A magic square\index{square}square4164,158118

a.tex,660
\renewcommand{\thetable}\thetable3,45
\renewcommand{\thefigure}\thefigure4,96
\chapter{Coding Conventions}Coding9,193
\label{appendix-codestyle}appendix-codestyle13,358
\label{pg-appendix-codestyle}pg-appendix-codestyle14,385
\section*{*39,1379
\subsection*{*59,2490
\subsection*{*72,3126
\subsection*{*85,3418
\subsection*{*109,4353
\section*{*142,5471
\section*{*204,7593
\section*{*244,9471
\section*{*295,11075
\subsection*{*304,11398
contained in the file.  Figure~\ref{fig-example1}fig-example1345,12969
\section*{*397,14102
\subsection*{*398,14124
\section*{*439,15214
\section*{*479,16395
\section*{*495,17213

b.tex,544
\renewcommand{\thetable}\thetable3,45
\renewcommand{\thefigure}\thefigure4,96
\chapter{The Java Development Kit}The6,151
\label{appendix-jdk}appendix-jdk11,335
\label{pg-appendix-jdk}pg-appendix-jdk12,356
\section*{*62,2511
\subsection*{*122,4932
\section*{*178,7761
\section*{*227,9054
\subsection*{*274,10920
\subsection*{*365,14311
\vspace{-6pt}\subsection*{*427,16270
\vspace{-6pt}\section*{*484,17891
\section*{*600,22028
The {\tt FirstApplet} program from Chapter~\ref{chapter-intro2}chapter-intro2616,22868

c.tex,182
\renewcommand{\thetable}\thetable3,45
\renewcommand{\thefigure}\thefigure4,96
\chapter{The ASCII and Unicode Character Sets}The6,151
\TBT{0pc}{ASCII\index{ASCII}ASCII42,1793

d.tex,117
\renewcommand{\thetable}\thetable3,45
\renewcommand{\thefigure}\thefigure4,96
\chapter{Java Keywords}Java6,151

e.tex,137
\renewcommand{\thetable}\thetable3,45
\renewcommand{\thefigure}\thefigure4,96
\chapter{Operator Precedence Hierarchy}Operator7,152

f.tex,211
\renewcommand{\thetable}\thetable3,45
\renewcommand{\thefigure}\thefigure4,96
\chapter{Java Inner Classes}Java6,151
\section*{*17,663
\section*{*60,2921
\section*{*180,7420
\subsection*{*291,12233

g.tex,176
\renewcommand{\thetable}\thetable3,45
\renewcommand{\thefigure}\thefigure4,96
\chapter{Java Autoboxing and Enumeration}Java6,151
\section*{*19,781
\section*{*97,3666

h.tex,167
\renewcommand{\thetable}\thetable3,45
\renewcommand{\thefigure}\thefigure4,96
\chapter{Java and UML Resources}Java7,153
\section*{*12,331
\section*{*36,1172

iftests.tex,137
\newcommand{\printTrueOrFalse}\printTrueOrFalse23,462
\newcommand{\dayOfWeek}\dayOfWeek35,747
\newcommand{\oddpage}\oddpage54,1229

preface-os.tex,17
\chapter*{*1,0

preface.tex,218
\chapter*{*1,0
\section*{*57,2388
\section*{*114,5047
\section*{*123,5439
\section*{*186,8955
Table\ref{tab-course}tab-course235,11522
\label{tab-course}tab-course247,11946
\def\mstrut{\mstrut249,11984

jjj.tex,0

jjj-os.tex,0

jjj-os-2html.tex,0

index.tex,0

fm.tex,0

figures_key.tex,0

figures_key-1.tex,0

figures2.tex,0

figures.tex,0

eula.tex,0
