<section xml:id="ch-recursion-exs">
    <title>Exercises</title>
<exercises>
<title>Recursion Exercises</title>
<p><term>Note:</term> For programming exercises,first draw a UML class diagram describing all classes and 
their inheritance relationships and/or associations.
</p>

<exercise label="jrcx_matching_java_definitions">
      <title>Java Concept Matching</title>
      <statement>
	<p>
          Match each of the following 
	  Recursion concepts.
	</p>
      </statement>
      <matches>
	<match>
	  <order>1</order>
          <premise><em>iteration</em></premise>
          <response>using a loop structure for repetition </response>
	</match>
	<match>
	  <order>2</order>
          <premise><em>recursion</em></premise>
          <response>using a method that calls itself to perform repetition</response>
	</match>
	<match>
	  <order>3</order>
          <premise><em>recursive method</em></premise>
          <response>a method that calls itself</response>
	</match>
	<match>
	  <order>5</order>
	  <premise><em>recursive definition</em> </premise>
          <response>a sequential definition with a base case or multiple base cases, and then a recursive case that uses one or more earlier elements of the sequence to define the current element of the sequence </response>
	</match>
	<match>
	  <order>6</order>
          <premise><em>base case</em> </premise>
          <response>a case where the method doesn't call itself</response>
	</match>
	<match>
	  <order>7</order>
          <premise><em>recursive case</em></premise>
          <response>a condition where the method calls itself.</response>
	</match>
	<match>
	  <order>8</order>
          <premise>head</premise>
          <response>the first element of a string or an array</response>
	</match>
	<match>
	  <order>9</order>
          <premise> tail </premise>
          <response>everything after the first element of a string or an array</response>
	</match>
	<match>
	  <order>10</order>
          <premise> tail recursive </premise>
          <response>a recursive method where the only call to itself is the last call in the method.</response>
	</match>
	<match>
	  <order>11</order>
          <premise>nontail recursive </premise>
          <response>a recursive method that has a recursive call that is not the last call in the method.</response>
	</match>
	
	
      </matches>
      </exercise>

    
                 <exercise label="jrcx_call_stack">       
<title>Call Stack</title>       
 <statement>

        <p>
          Describe how the <em>method call stack</em>
          is used during a method call and return.
        </p>
      </statement>
      <response />
    </exercise>
                 <exercise label="jrcx_recursion_vs_iteration">       
<title>Recursion Vs. Iteration</title>       
 <statement>

        <p>
          Why is a recursive algorithm generally less efficient than an iterative algorithm?
        </p>
      </statement>
      <response />
    </exercise>
                 <exercise label="jrcx_tree_recursion">       
<title>Tree Recursion</title>       
 <statement>

        <p>
          A tree, such as a maple tree or pine tree,
          has a recursive structure.
          Describe how a tree's structure displays
          <em>self-similarity</em>
          and <em>divisibility</em>.
        </p>
      </statement>
      <response />
		 </exercise>
      <exercisegroup>
 <title>Writing Recursive Methods</title>
 <introduction>
<p>
    Each of the  problems that follow asks you to write a recursive method.
    Of course, as you are developing the method in a stepwise
    fashion, you should test it. Here's a simple application
    program that you can use for this purpose:
</p>
<program language="java"><input>
            <![CDATA[

public class MethodTester {
    public static void countdown(int i) {
        if(i <= 0) {
            System.out.println("Blastoff!");
            return;
        }
        System.out.println(i);
        countdown(i-1);
    }
    public static void main(String args[]) {
        countdown(10);
    }
}
    ]]>
</input></program>
    <p>
        Just replace
        the <c> countdown()</c> method with your method. Note that
        you must declare your method <c> static</c> if you want
        to call it directly from <c> main()</c> as we do here.
    </p>
    </introduction>
      
		 
                 <exercise label="jrcx_recursive_array_print">       
<title>Recursive Array Print</title>       
 <statement>

        <p>
          Write a recursive method to print each element of an array of <c>double</c>.
        </p>
      </statement>
      <program label="jrcx_array_print_prg" interactive="activecode" language="java">
<input>
	    public class Program {		
		public static void main(String args[]) {
		    
		}
	    }
</input>
</program>    

    </exercise>
                 <exercise label="jrcx_recursive_reverse_array_print">       
<title>Reverse Recursive Array Print</title>       
 <statement>

        <p>
          Write a recursive method to print each element of an array of <c>double</c> from the last to the first element.
        </p>
      </statement>
      <program label="jrcx_reverse_print_prg" interactive="activecode" language="java">
<input>
	    public class Program {		
		public static void main(String args[]) {
		    
		}
	    }
</input>
</program>    

    </exercise>
                 <exercise label="jrcx_recursive_array_to_phrase">       
<title>Recursive Array To Phrase</title>       
 <statement>

        <p>
          Write a recursive method that will concatenate the elements of an array of <c>String</c> into a single <c>String</c> delimited by blanks.
        </p>
      </statement>
      <program label="jrcx_concat_prg" interactive="activecode" language="java">
<input>
	    public class Program {		
		public static void main(String args[]) {
		    
		}
	    }
</input>
</program>    

    </exercise>
                 <exercise label="jrcx_recursive_odd_print">       
<title>Recursive Odd Print</title>       
 <statement>

        <p>
          Write a recursive method that is passed a single <c>int</c> parameter,
          <m>N \geq 0</m>,
          and prints all the odd numbers between 1 and <em>N</em>.
        </p>
      </statement>
      <program label="jrcx_odd_seq_prg" interactive="activecode" language="java">
<input>
	    public class Program {		
		public static void main(String args[]) {
		    
		}
	    }
</input>
</program>    

    </exercise>
                 <exercise label="jrcx_recursive_even_countdown">       
<title>Recursive Even Countdown</title>       
 <statement>

        <p>
          Write a recursive method that takes a single <c>int</c> parameter <m>N \geq 0</m> and prints the sequence of even numbers between <em>N</em> down to 0.
        </p>
      </statement>
      <program label="jrcx_even_seq_prg" interactive="activecode" language="java">
<input>
	    public class Program {		
		public static void main(String args[]) {
		    
		}
	    }
</input>
</program>    

    </exercise>
                 <exercise label="jrcx_recursive_count_by_ten">       
<title>Recursive Count By Ten</title>       
 <statement>

        <p>
          Write a recursive method that takes a single <c>int</c> parameter
          <m>N \geq 0</m> and prints the multiples of 10 between 0 and <em>N</em>.
        </p>
      </statement>
      <program label="jrcx_mult_ten_prg" interactive="activecode" language="java">
<input>
	    public class Program {		
		public static void main(String args[]) {
		    
		}
	    }
</input>
</program>    

    </exercise>
                 <exercise label="jrcx_recursive_ramp">       
<title>Recursive Ramp</title>       
 <statement>

        <p>
          Write a recursive method to print the following geometric pattern:
 <program language="java"><input>
#
# #
# # #
# # # #
# # # # #
 </input></program>
        </p>
      </statement>
      <program label="jrcx_pattern_slide_prg" interactive="activecode" language="java">
<input>
	    public class Program {		
		public static void main(String args[]) {
		    
		}
	    }
</input>
</program>    

    </exercise>
                 <exercise label="jrcx_recursive_patterns">       
<title>Recursive Patterns</title>       
 <statement>

        <p>
          Write recursive methods to print each of the following patterns.
 <program language="java"><input>
# # # # # # # #     # # # # # # # #
  # # # # # # #     # # # # # # #
    # # # # # #     # # # # # #
      # # # # #     # # # # #
        # # # #     # # # #
          # # #     # # #
            # #     # #
              #     #
 </input></program>
        </p>
      </statement>
      <program label="jrcx_two_patterns_prg" interactive="activecode" language="java">
<input>
	    public class Program {		
		public static void main(String args[]) {
		    
		}
	    }
</input>
</program>    

    </exercise>
                 <exercise label="jrcx_recursive_multiples">       
<title>Recursive Multiples</title>       
 <statement>

        <p>
          Write a recursive method to print all multiples of <em>M</em>
          up to <em>M</em> * <em>N</em>.
        </p>
      </statement>
      <program label="jrcx_mult_table_prg" interactive="activecode" language="java">
<input>
	    public class Program {		
		public static void main(String args[]) {
		    
		}
	    }
</input>
</program>    

    </exercise>
                 <exercise label="jrcx_recursive_grade_sum">       
<title>Recursive Grade Sum</title>       
 <statement>

        <p>
          Write a recursive method to compute the sum of grades stored in an array.
        </p>
      </statement>
      <program label="jrcx_sum_grades_prg" interactive="activecode" language="java">
<input>
	    public class Program {		
		public static void main(String args[]) {
		    
		}
	    }
</input>
</program>    

    </exercise>
                 <exercise label="jrcx_recursive_count_substring">       
<title>Recursive Count Substring</title>       
 <statement>

        <p>
          Write a recursive method to count the occurrences of a substring within a string.
        </p>
      </statement>
      <program label="jrcx_count_substr_prg" interactive="activecode" language="java">
<input>
	    public class Program {		
		public static void main(String args[]) {
		    
		}
	    }
</input>
</program>    

    </exercise>
                 <exercise label="jrcx_recursive_tag_removal">       
<title>Recursive Tag Removal</title>       
 <statement>

        <p>
          Write a recursive method to remove the HTML tags from a string.
        </p>
      </statement>
      <program label="jrcx_rm_tags_prg" interactive="activecode" language="java">
<input>
	    public class Program {		
		public static void main(String args[]) {
		    
		}
	    }
</input>
</program>    

    </exercise>
                 <exercise label="jrcx_recursive_shift_decode">       
<title>Recursive Shift Decode</title>       
 <statement>

        <p>
          Implement a recursive version of the <c>Caesar.decode()</c> method from Chapter<nbsp/>8.
        </p>
      </statement>
      <program label="jrcx_decode_recurse_prg" interactive="activecode" language="java">
<input>
	    public class Program {		
		public static void main(String args[]) {
		    
		}
	    }
</input>
</program>    

    </exercise>
                 <exercise label="jrcx_recursive_fibonacci">       
<title>Recursive Fibonacci</title>       
 <statement>

        <p>
          The Fibonacci
            <idx><h>Fibonacci sequence</h></idx>
          sequence (named after the Italian mathematician Leonardo of Pisa,
          ca. 1200) consists of the numbers <c>0,1,1,2,3,5,8,13,</c><ellipsis /> in which each number
          (except for the first two)
          is the sum of the two preceding numbers.
          Write a recursive method <c>fibonacci(N)</c> that prints the first
          <em>N</em> Fibonacci numbers.
        </p>
      </statement>
      <program label="jrcx_fib_recurse_prg" interactive="activecode" language="java">
<input>
	    public class Program {		
		public static void main(String args[]) {
		    
		}
	    }
</input>
</program>    

    </exercise>
                 <exercise label="jrcx_recursive_string_rotate">       
<title>Recursive String Rotate</title>       
 <statement>

        <p>
          Write a recursive method to rotate a <c>String</c> by
          <em>N</em> characters to the right.
          For example, <c>rotateR("hello", 3)</c> should return
          <q>llohe.</q>
        </p>
      </statement>
      <program label="jrcx_rotate_right_prg" interactive="activecode" language="java">
<input>
	    public class Program {		
		public static void main(String args[]) {
		    
		}
	    }
</input>
</program>    

    </exercise>
                 <exercise label="jrcx_recursive_left_rotate">       
<title>Recursive Left Rotate</title>       
 <statement>

        <p>
          Write a recursive method to rotate a <c>String</c> by
          <em>N</em> characters to the left.
          For example, <c>rotateL("hello", 3)</c> should return
          <q>lohel.</q>
        </p>
      </statement>
      <program label="jrcx_rotate_left_prg" interactive="activecode" language="java">
<input>
	    public class Program {		
		public static void main(String args[]) {
		    
		}
	    }
</input>
</program>    

    </exercise>
                 <exercise label="jrcx_recursive_binary_to_decimal">       
<title>Recursive Binary to Decimal</title>       
 <statement>

        <p>
          Write a recursive method to convert a <c>String</c> representing a binary number to its decimal equivalent.
          For example,
<c>binTodecimal("101011")</c> should return the <c>int</c> value 43.
        </p>
      </statement>
      <program label="jrcx_bin_to_dec_prg" interactive="activecode" language="java">
<input>
	    public class Program {		
		public static void main(String args[]) {
		    
		}
	    }
</input>
</program>    

    </exercise>
    <exercise label="jrcx_recursive_palindrome">
      <title>Recursive Palindrome Detector</title>
      <statement>
        <p>
          A palindrome is a string that is equal to its reverse<mdash/>
          <q>mom,</q>
          <q>i,</q>
          <q>radar</q>
          and
          <q>able was i ere i saw elba.</q>
          Write a recursive
<c>boolean</c> method that determines whether its <c>String</c> parameter is a palindrome.
        </p>
      </statement>
      <program label="jrcx_is_pal_recur_prg" interactive="activecode" language="java">
<input>
	    public class Program {		
		public static void main(String args[]) {
		    
		}
	    }
</input>
</program>    

    </exercise>
  </exercisegroup>
                   <exercise label="jrcx_recursive_binary_tree">       
<title>Recursive Binary Tree</title>       
 <statement>

        <p>
          <image width="73%" source="chptr12/btree.png"/>  Challenge:  Incorporate a <c>drawBinaryTree()</c> method into the <c>RecursivePatterns</c> program.
          A level-one binary tree has two branches.
          At each subsequent level,
          two smaller branches are grown from the endpoints of every existing branch.
          The geometry is easier if you use 45-degree angles for the branches.
          The picture above shows a level-four binary tree drawn upside down.
        </p>
      </statement>
      <program label="jrcx_draw_binary_prg" interactive="activecode"
	       language="java" datafile="HtmlImageUtil.java">
	<input>
	  import javax.swing.*;
          import java.awt.*;

	    public class TreeCanvas extends Canvas {		
		public static void main(String args[]) {
		    
		}
	    }
</input>
</program>    

    </exercise>
                 <exercise label="jrcx_recursive_towers_of_hanoi">       
<title>Recursive Towers of Hanoi</title>       
 <statement>

        <p>
          Challenge: Towers of Hanoi.
          According to legend,
          some Buddhist monks were given the task of moving 64 golden disks from one diamond needle to another needle,
          using a third needle as a backup.
          To begin with,
          the disks were stacked one on top of the other from largest to smallest (Fig.<nbsp/>12.37).
          The rules were that only one disk can be moved at a time and that a larger disk can never go on top of a smaller one.
          The end of the world was supposed to occur when the monks finished the task!
          Write a recursive method,
<c>move(int N, char A, char B, char C)</c>, that will print out directions the monks can use to solve the towers of Hanoi problem.
          For example,
          here's what it should output for the three-disk case,
<c>move(3, "A", "B", "C")</c>: <image width="73%" source="chptr12/hanoi.png"/> \caption{The towers of Hanoi problem.
          Move all the disks from needle A to needle B.<nbsp/>Only one disk can be moved at a time,
          and a larger disk can never go on top of a smaller one. }
 <program language="java"><input>
Move 1 disk from A to B.
Move 1 disk from A to C.
Move 1 disk from B to C.
Move 1 disk from A to B.
Move 1 disk from C to A.
Move 1 disk from C to B.
Move 1 disk from A to B.
 </input></program>
        </p>
      </statement>
      <program label="jrcx_hanoi_method_prg" interactive="activecode" language="java">
<input>
	    public class Program {		
		public static void main(String args[]) {
		    
		}
	    }
</input>
</program>    

    </exercise>
    </exercises>
</section> 
