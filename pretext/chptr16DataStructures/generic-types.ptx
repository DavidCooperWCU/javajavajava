<section xml:id="generic-types">
  <title>From the Java Library: The Java Collections Framework and Generic Types</title>
  <introduction>
   <!-- ???
         <em>java.sun.com/j2se/1.5.0/docs/api/</em>
   -->
    <p>
      The Java class library contains implementations of some abstract data types.
      The Java utility package, <c>java.util.*</c>, contains a good number of classes and interfaces designed to facilitate storing and manipulating groups of objects.
      This family of related interfaces and classes is called the
      <term>Java collections framework</term>.
      It contains structures that correspond to the ADTs that we have just discussed,
      plus other data structures.
      Java 5.0 has reimplemented the Java collections framework using
      <term>generic types</term>
      that allow a programmer to specify a type for the objects that are stored in the structure.
    </p>
  </introduction>
  <subsection>
    <title>Generic types in Java</title>
    <p>
      Declaring classes that use the generic type construct introduced in Java 5.0  involves using new syntax to refer to the class name.
      Such classes and interfaces, including those in the collections framework,
      use angle brackets containing one or more variables
      (separated by commas)
      to refer to unspecified type names.
      For example,
      you would use <c>&lt;E&gt;</c> or <c>&lt;K,V&gt;</c> to refer to unspecified type names.
      Thus, names of classes or interfaces implemented with generic types are written with the syntax <c>ClassName&lt;E&gt;</c>.
    </p>
   <!-- <figure xml:id="fig-libvecuml">
      <caption>The <c>Java.util.ArrayList</c> class is implemented with a generic type in <c>Java 5.0</c>.</caption>
      <image width="73%" source="chptr16/libvectoruml.png"/>
</figure> -->
    <p>
      Let's reconsider the <c>ArrayList</c> class,
      which was introduced in Chapter<nbsp/>9.
      The <c>ArrayList&lt;E&gt;</c> class,
      which is part of the Java collections framework,
      has a generic type implementation in Java 5.0. 
        The <c>ArrayList</c> class contains the methods listed in <xref ref="fig-arraylist2">Figure</xref> for storing and retrieving objects,
        and for accessing objects by their index position within the
        <c>ArrayList</c>.
      </p>
        <figure xml:id="fig-arraylist2">
        <caption>Public methods in the <c>ArrayList</c> class.</caption>
          <image width="100%" source="chptr09/ArrayList-methods.jpg"/>
        </figure>
     <!-- <xref ref="fig-libvecuml">Figure</xref> describes the <c>ArrayList&lt;E&gt;</c> class.
     -->
<p>     Notice that the
<c>E</c> refers to an unspecified type name, that is,
      the name of a class or interface.
      This type is specified when a corresponding variable is declared.
      The type must also be included after a constructor's type name when an object is instantiated and assigned to the variable.
      The following code demonstrates how to create a <c>ArrayList&lt;E&gt;</c> object 
      for storing <c>String</c> objects.
    </p>
    <activity label="arraylistdemo">
      <statement>Run the following code. Try adding more elements to the ArrayList.
        How would you get out the last element of the ArrayList? 
      </statement>
      
   <program language="java" interactive="activecode"><input>
      import java.util.ArrayList;

      public class ArrayListDemo {
        
        public static void main(String args[]) {
          // An empty arraylist of Strings
          ArrayList&lt;String> strlist = new ArrayList&lt;String>();  
          strList.add("alpha");
          strList.add("beta");
          String str = strList.get(0);
          System.out.println("The 0th element is " + str);          
          // ArrayLists know how to print themselves without a loop!
          System.out.println(strList);
        } // main()
      } // ArrayListDemo
   </input></program>
    </activity>
 
    <p>
      In effect, the <c>&lt;E&gt;</c> serves as parameter for the type of 
      objects that will be stored in the <c>ArrayList</c>. 
     <!-- no longer allowed: Java 5.0 still allows the use of the unparameterized <c>ArrayList</c> 
      class which is equivalent to instantiating a <c>ArrayList&lt;Object&gt;</c> object.
      If you use a <c>ArrayList</c> object,
      the above code would be written as follows.
    </p>
 <program language="java"><input>
   ArrayList strList = new ArrayList();
   strList.add("alpha");
   strList.add("beta");
   String str = (String)strList.get(0);
 </input></program> 
    <p> -->
      One benefit that a generic type provides is type checking of method arguments at compile time.
      If <c>strList</c> is a <c>ArrayList&lt;String&gt;</c> object,
      then the statement
    <c>strList.add(new Integer(57));</c>
       will generate a compile-time error.
      By contrast,
      if <c>strList</c> was just a plain <c>ArrayList</c> object,
      no error would be found at compile time.
      Thus, if a programmer wishes to create an array of
<c>String</c> objects,
      using generic types will help guarantee that the objects being stored are actually of type <c>String</c>. In this way,
      using generic types helps to reduce the number of programming errors and thereby makes programs safer and more robust.
    </p>
 <!--   <p>
      A second benefit of using generic types is that the return type of objects retrieved from the data structure will be of the specified type rather than of type <c>Object</c>. If you compare the last statement in each of the two code segments above,
      you can see that using a generic type eliminates the need to cast an <c>Object</c> to a
<c>String</c>. This is a big convenience for the programmer,
      because forgetting to cast objects from one type to another is a common programming error.
    </p> -->
   </subsection>
  
  <subsection>
    <title>The <c>java.util.Stack&lt;E&gt;</c> class</title>
    <p>
      The Java collections framework includes the <c>Stack&lt;E&gt;</c> class,
      implemented as a subclass of the <c>Vector&lt;E&gt;</c> class which has been replaced by the <c>ArrayList&lt;E></c> class.
      It contains the methods shown in <xref ref="fig-libstackuml">Figure</xref>.
      For the most part,
      its methods provide the same functionality as the methods we developed earlier in this chapter.
    </p>
    <figure xml:id="fig-libstackuml">
      <caption>The <c>java.util.Stack&lt;E&gt;</c> class.</caption>
      <image width="50%" source="chptr16/libstackuml.png"/>
   </figure>
    <p>
      Note that the methods provide the functionality of a stack ADT but the details of its implementation are hidden from the user.
      An object of this class can be declared, instantiated,
      and used in a manner like the <c>ArrayList&lt;E&gt;</c> code.
    </p>
    <activity label="stackdemo"><statement>Run the code below. Try pushing more items to the stack and popping two items.
    </statement>
  <program language="java" interactive="activecode"><input>
    import java.util.*;

    public class StackDemo {
      
      public static void main(String args[]) {
        // An empty Stack of Strings
        Stack&lt;String&gt; stk = new Stack&lt;String&gt;();
        stk.push("alpha");
        stk.push("beta");
        String str = stk.pop();
        System.out.println("The top of the stack was " + str);          
      } 
    } 
 </input></program>
   </activity>
 
 <exercises><title>Self-Study Exercise</title>
    <exercise label="stackReverseEx">
      <statement>
          <p>
            Modify the code to use the parameterized
<c>java.util.Stack&lt;E&gt;</c> class instead of the <c>Stack</c> class we defined in the earlier sections.           </p>
</statement>
          <program language="java" interactive="activecode"><input>
            import java.util.*;
        
            public class StackReverse {
            public static void main( String args[] ) {
                 // Change this to be a Stack of a specific type (hint: not String)
                 Stack stack = new Stack();
                 String string = "Hello this is a test string";
                 System.out.println("String: " + string);
                 for (int k = 0; k &lt; string.length(); k++)
                     stack.push(string.charAt(k)); // type Character
                 Object o = null;
                 String reversed = "";
                 while (!stack.isEmpty()) {
                     o  = stack.pop();
                     reversed = reversed + o.toString();
                 }
                 System.out.println("Reversed String: " + reversed);
            } // main()
          } // StackReverse
             </input></program>
             <hint>Use the type Character, not String, for the Stack.</hint>
             <solution>
              <p>
                The following class tests the <c>java.util.Stack&lt;E&gt;</c> class:
       <program language="java"><input>
      import java.util.*;
      public class StackTest{
      public static void main( String args[] ) {
         Stack&lt;Character> stack = new Stack&lt;Character>();
         String string = "Hello this is a test string";
         System.out.println("String: " + string);
         for (int k = 0; k &lt; string.length(); k++)
           stack.push(string.charAt(k));
         Character ch = null;
         String reversed = "";
         while (!stack.empty()) {
           ch  = stack.pop();
           reversed = reversed + ch.charValue();
         }
         System.out.println("Reversed String: " + reversed);
        } // main()
      } // StackTest class
       </input></program>
              </p>
             </solution>
        </exercise>
        </exercises>
 </subsection>

 <subsection>
    <title>The <c>List&lt;E&gt;</c> interface
    and the <c>LinkedList&lt;E&gt;</c> class</title>
    <p>
      The <c>java.util.LinkedList&lt;E&gt;</c> is an implementation of a linked list 
      (<xref ref="fig-liblinklist">Figure</xref>).
      Like our implementation earlier in this chapter,
      it contains methods that can be used to define the standard stack and queue methods.
    </p>
    <figure xml:id="fig-liblinklist">
      <caption>LinkedList Class</caption>
      <image width="50%" source="chptr16/liblinlist.png"/>
    </figure>
    <p>
      Many of the standard list-processing methods are defined as part of the <c>java.util.List&lt;E&gt;</c> interface.
      The advantage of defining list operations as an interface is that they can be implemented by a number of data structures.
      Code for using the list methods can be written to work independently of the data structure being used.
    </p>
    <p>
      For example,
      the collections framework contains <c>LinkedList&lt;E&gt;</c> and <c>ArrayList&lt;E&gt;</c>, both of which implement the <c>List&lt;E&gt;</c> interface.
      In this section,
      we will demonstrate how to make appropriate use of the <c>List&lt;E&gt;</c> interface and data structures that implement it.
    </p>
    <p>
      Suppose that a programmer is developing an application to track activity of employees working at a small company's phone-in help desk.
      The programmer has decided to use the <c>LinkedList&lt;E&gt;</c> data structure to store objects of the <c>PhoneRecord</c> class that was defined earlier in this chapter and will use methods of the <c>List&lt;E&gt;</c> interface to manipulate the data.
      A list seems to be an appropriate structure for this problem since
      <ul>
        An unknown (but relatively small) amount of data will be involved. The company wants the data stored in the order it is generated. The main use of the data will be to print out the list's phone records.
      </ul>
    </p>
    <p>
      The programmer might write a short method like that in <xref ref="listing-listtest">Listing</xref>
      to demonstrate how the <c>List&lt;E&gt;</c> and
<c>LinkedList&lt;E&gt;</c> structures will be used.
    </p>
    <listing xml:id="listing-listtest">
      <caption>A method that demonstrates the interface <c>List&lt;E&gt;</c>
      and the class <c>LinkedList&lt;E&gt;</c>.</caption>
 <program language="java"><input>
/**
  * testList() creates a list of PhoneRecord objects using the
  * LinkedList constructor and then prints out that list. 
  */
public static void testList() {
  List&lt;PhoneRecord> theList = new LinkedList&lt;PhoneRecord>();
  // new ArrayList&lt;PhoneRecord>(); could also be used.
  theList.add(new PhoneRecord("Roger M", "090-997-2918"));
  theList.add(new PhoneRecord("Jane M", "090-997-1987"));
  theList.add(new PhoneRecord("Stacy K", "090-997-9188"));
  theList.add(new PhoneRecord("Gary G", "201-119-8765"));
  theList.add(new PhoneRecord("Jane M", "090-997-1987"));
  System.out.println("Testing a LinkedList List");
  for (PhoneRecord pr : theList)
     System.out.println(pr);
 } // testList
</input></program>
</listing>

<activity label="linkedlistdemo"><statement>
<p>  Run the code below. Try adding a new PhoneRecord to the linked list.</p>
</statement>
<program language="java" interactive="activecode"><input>
import java.util.*;

public class LinkedListOfPhoneRecords {    

  /**
  * testList() creates a list of PhoneRecord objects using the
  * LinkedList constructor and then prints out that list. 
  */
 public static void testList() {
   List&lt;PhoneRecord> theList = new LinkedList&lt;PhoneRecord>();
   theList.add(new PhoneRecord("Roger M", "090-997-2918"));
   theList.add(new PhoneRecord("Jane M", "090-997-1987"));
   theList.add(new PhoneRecord("Stacy K", "090-997-9188"));
   theList.add(new PhoneRecord("Gary G", "201-119-8765"));
   theList.add(new PhoneRecord("Jane M", "090-997-1987"));
   System.out.println("Testing a LinkedList List");
   for (PhoneRecord pr : theList)
      System.out.println(pr);
  } // testList
  
  public static void main( String argv[] ) {
    testList();
  } // main
} // LinkedListOfPhoneRecords

/** The PhoneRecord class
* Description: Contains a single name and phone number.
* This version of the class implements comparable.
*/
class PhoneRecord implements Comparable{
    private String name;
    private String phone;

    /**
    * PhoneRecord constructor
    * Creates an object containing the name and number.
    * @param aName is a person's name.
    * @param aPhone is a phone number for aName.
    */
    public PhoneRecord(String aName, String aPhone){
        name = aName;
        phone = aPhone;
    } // PhoneRecord() constructor

    /**
    * toString() overides the toString() of the Object class.
    * @return is a String with this object's name and number.
    */
    public String toString(){
        return name + " " + phone;
    } // toString()

    /**
    * getName returns the value of the name variable
    * @return name.
    */
    public String getName(){
        return name;
    } // getName()

    /**
    * getPhone returns the value of the phone variable
    * @return phone.
    */
    public String getPhone(){
        return phone;
    } // getPhone()

    /**
    * equals() overides the equals() of the Object class.
    * @param ob is a PhoneRecord object.
    * @return is true if the name variable of the two
    * PhoneRecord objects are equal as Strings.
    */
    public boolean equals(Object ob){
        return name.equals(((PhoneRecord)ob).getName());
    } // equals()

    /**
    * compareTo() implements the Comparable interface.
    * @param ob is a PhoneRecord object.
    * @return is -1, 0, or +1 if the name variable of
    * this PhoneRecord object is less, equal, or greater
    * than ob.name as Strings. 
    */
     public int compareTo(Object ob){
        return name.compareTo(((PhoneRecord)ob).getName());
    } // compareTo()

    /**
    * hashCode() overides hashCode() of the Object class.
    * @param ob is a PhoneRecord object.
    * @return is the hashCode() value of name as a String.
    */
    public int hashCode(){
        return name.hashCode();
    } // hashCode()

} // PhoneRecord
 </input></program>
</activity>
    <p>
      Note that the statement
    </p>
 <program language="java"><input>
List&lt;PhoneRecord> theList = new LinkedList&lt;PhoneRecord>();
 </input></program>
    <p>
      declares a variable <c>theList</c> of interface type <c>List&lt;E&gt;</c> but assigns an object of class type <c>LinkedList&lt;E&gt;</c>. This is appropriate because the class implements the interface and the code uses only methods from the interface.
      The class <c>ArrayList&lt;E&gt;</c> in the collections framework also implements the <c>List&lt;E&gt;</c> interface.
      It uses an array rather than a linked list to store elements and has a constructor with an <c>int</c> parameter that sets the size of the array.
      If the programmer knew that <c>theList</c> would contain close to,
      but always less than, 100 elements,
      then it might be better to declare:
    </p>
 <program language="java"><input>
List&lt;PhoneRecord> theList = new ArrayList&lt;PhoneRecord>(100);
 </input></program>
    <p>
      Also note the unusual looking <c>for</c> loop at the end of the method.
      This is a new feature of Java 5.0 which can be used to simplify the coding of loops that iterate through every object in a collection of objects.
      The statement 
    </p>
 <program language="java"><input>
for (PhoneRecord pr : theList) { *** }
 </input></program>
    <p>
      should be thought of as executing the enclosed statements
      <em>for each</em><c>PhoneRecord</c> object, <c>pr</c>, in the <c>theList</c> data structure.
      In previous versions of Java,
      an interface named <c>Iterator</c> had to be used to enumerate all the elements in a collection.
      The <c>Iterator</c> approach is more flexible<mdash/>for example,
      it allows you to iterate through just some of the members of the collection<mdash/> and will therefore still have to be used for more complex loops.
    </p>
    <p>
      The output of the method will be:
    </p>
 <program language="java"><input>
          Roger M 090-997-2918
          Jane M 090-997-1987
          Stacy K 090-997-9188
          Gary G 201-119-8765
          Jane M 090-997-1987
 </input></program>
    <p>
      In the next section we will examine two other structures in the collections framework,
      the <c>Set</c> interface and the <c>Map</c> interface.
    </p>
    <principle>
      <title>EFFECTIVE DESIGN: Code Reuse</title>
      <p>
        Given the relative difficulty of writing correct and efficient list-processing algorithms,
        applications that depend on lists should make use of library classes whenever possible.
      </p>
    </principle>

  </subsection>
</section>