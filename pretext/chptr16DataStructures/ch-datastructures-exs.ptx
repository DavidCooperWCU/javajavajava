<section xml:id="ch-datastructures-exs">
    <title>Exercises</title>
<exercises>
<title>Data Structures Exercises</title>


  <p>
       <term>Note:</term> For programming exercises, <term>first</term> draw a UML class diagram describing 
       all classes and their inheritance relationships and/or associations.
  </p>


<exercise label="jdsx_matching_java_definitions">
      <title>Java Concept Matching</title>
      <statement>
	<p>
          Match each of the following 
	  Data Structures  concepts.
	</p>
      </statement>
      <matches>
	<match>
	  <order>1</order>
          <premise><em>stack</em></premise>
          <response>A Last In First Out (LIFO) data structure; how you would organize dishes of the same size if you placed them or removed them one at a time. </response>
	</match>
	<match>
	  <order>2</order>
          <premise><em>queue</em></premise>
          <response>A First In First Out (FIFO) data structure; the typical way people proceed on a water slide. </response>
	</match>
	<match>
	  <order>3</order>
          <premise><em>static structure</em> </premise>
          <response>a structure whose size doesn't change during the course of execution</response>
	</match>
	<match>
	  <order>4</order>
          <premise><em>dynamic structure</em> </premise>
          <response> a structure whose size can change during the course of execution. </response>
	</match>
	<match>
	  <order>5</order>
	  <premise><em>data structure</em> </premise>
          <response>a description or construct of how collections of data are organized </response>
	</match>
	<match>
	  <order>6</order>
          <premise><em>abstract data type</em>  </premise>
          <response>a description of the type(s) of data to store, and the ways manipulate the data stored </response>
	</match>
	<match>
	  <order>7</order>
          <premise>push</premise>
          <response> a stack operation for adding an element to the top of the stack</response>
	</match>
	<match>
	  <order>8</order>
          <premise>pop</premise>
          <response>a stack operation for removing an element from the top of the stack </response>
	</match>
	<match>
	  <order>9</order>
          <premise> enqueue </premise>
          <response>a queue operation adding an element to the end of the queue</response>
	</match>
	<match>
	  <order>10</order>
          <premise> dequeue </premise>
          <response>a queue operation for removing an element from the beginning of the queue.</response>
	</match>
	<match>
	  <order>11</order>
          <premise> linked list </premise>
          <response>a collection of nodes linked together, typically in a linear fashion</response>
	</match>

<match>
	  <order>12</order>
          <premise>node </premise>
          <response>a part of a linked list that holds one piece of data and may have a link out to one or more other nodes.</response>
	</match>

      </matches>
      </exercise>
   <exercisegroup>
    <title>Fill in the Blanks</title>
    <introduction>
      <p>
        Fill in the blanks.
        </p>
	</introduction>
                        
 <exercise label="jdsx_fill_in_1">       
<title></title>       
 <statement>

            <p>
              An <em>Abstract Data Type</em> consists of two main parts: <var width="15"/> and <var width="15"/> .
            </p>
          </statement>
      <setup>
          <var case="insensitive">
            <condition string="data">
              <feedback>
		<p>Correct</p>
              </feedback>
            </condition>
	    
            <condition string=".*">
              <feedback>
		<p>Try again. You may want to review the technical terms from this chapter.</p>
              </feedback>
            </condition>
          </var>
          <var case="insensitive">
            <condition string="methods">
              <feedback>
		<p>Correct</p>
              </feedback>
            </condition>
	    
            <condition string=".*">
              <feedback>
		<p>Try again. You may want to review the technical terms from this chapter.</p>
              </feedback>
            </condition>
          </var>
	</setup>	

    </exercise>
                        
 <exercise label="jdsx_fill_in_2">       
<title></title>       
 <statement>

            <p>
              An object that contains a variable that refers to an object of the same class is a <var width="15"/> .
            </p>
          </statement>
      <setup>
          <var case="insensitive">
            <condition string="self-referential object|self referential object">
              <feedback>
		<p>Correct</p>
              </feedback>
            </condition>
	  
            <condition string=".*">
              <feedback>
		<p>Try again. You may want to review the technical terms from this chapter.</p>
              </feedback>
            </condition>
          </var>
	</setup>	

    </exercise>
                        
 <exercise label="jdsx_fill_in_3">       
<title></title>       
 <statement>

            <p>
              One application for a <var width="15"/> is to manage the method calls and returns in a computer program.
            </p>
          </statement>
      <setup>
          <var case="insensitive">
            <condition string="stack">
              <feedback>
		<p>Correct</p>
              </feedback>
            </condition>
	    
            <condition string=".*">
              <feedback>
		<p>Try again. You may want to review the technical terms from this chapter.</p>
              </feedback>
            </condition>
          </var>
	</setup>	

    </exercise>
                        
 <exercise label="jdsx_fill_in_4">       
<title></title>       
 <statement>

            <p>
              One application for a <var width="15"/> is to balance the parentheses in an arithmetic expression.
            </p>
          </statement>
      <setup>
          <var case="insensitive">
            <condition string="stack">
              <feedback>
		<p>Correct</p>
              </feedback>
            </condition>
	   
            <condition string=".*">
              <feedback>
		<p>Try again. You may want to review the technical terms from this chapter.</p>
              </feedback>
            </condition>
          </var>
	</setup>	

    </exercise>
                        
 <exercise label="jdsx_fill_in_5">       
<title></title>       
 <statement>

            <p>
              A <var width="15"/> operation is one that starts at the beginning of a list and processes each element.
            </p>
          </statement>
      <setup>
          <var case="insensitive">
            <condition string="traversal">
              <feedback>
		<p>Correct</p>
              </feedback>
            </condition>
	    
            <condition string=".*">
              <feedback>
		<p>Try again. You may want to review the technical terms from this chapter.</p>
              </feedback>
            </condition>
          </var>
	</setup>	

    </exercise>
                        
 <exercise label="jdsx_fill_in_6">       
<title></title>       
 <statement>

            <p>
              A vector is an example of a <var width="15"/> data structure.
            </p>
          </statement>
      <setup>
          <var case="insensitive">
            <condition string="dynamic">
              <feedback>
		<p>Correct</p>
              </feedback>
            </condition>
	    <condition string="static">
              <feedback>
		<p>Try again. Static data structures can't change the number of elements</p>
              </feedback>
            </condition>
            <condition string=".*">
              <feedback>
		<p>Try again. You may want to review the technical terms from this chapter.</p>
              </feedback>
            </condition>
          </var>
	</setup>	

    </exercise>
                        
 <exercise label="jdsx_fill_in_7">       
<title></title>       
 <statement>

            <p>
              An array is an example of a <var width="15"/> data structure.
            </p>
          </statement>
      <setup>
          <var case="insensitive">
            <condition string="static">
              <feedback>
		<p>Correct</p>
              </feedback>
            </condition>
	    <condition string="dynamic">
              <feedback>
		<p>Try again. dynamic data structures can change size, but arrays have a fixed size once they are instantiated</p>
              </feedback>
            </condition>
            <condition string=".*">
              <feedback>
		<p>Try again. You may want to review the technical terms from this chapter.</p>
              </feedback>
            </condition>
          </var>
	</setup>	

    </exercise>
                        
 <exercise label="jdsx_fill_in_8">       
<title></title>       
 <statement>

            <p>
              By default, the initial value of a reference variable is <var width="15"/> .
            </p>
          </statement>
      <setup>
          <var case="insensitive">
            <condition string="null">
              <feedback>
		<p>Correct</p>
              </feedback>
            </condition>
	    
            <condition string=".*">
              <feedback>
		<p>Try again. You may want to review the technical terms from this chapter.</p>
              </feedback>
            </condition>
          </var>
	</setup>	

    </exercise>
       </exercisegroup>           
 <exercise label="jdsx_code_remove_at">       
<title>Remove At</title>       
 <statement>

      <p>
        Add a <c>removeAt()</c> method to the <c>List</c> class to return the object at a certain index location in the list.
        This method should take an <c>int</c> parameter,
        specifying the object's position in the list,
        and it should return an <c>Object</c>.
      </p>
    </statement>
      <program label="jdsx_remove_at_prg" interactive="activecode" language="java">
<input>
	    public class Program {		
		public static void main(String args[]) {
		    
		}
	    }
</input>
</program>    

    </exercise>
                  
 <exercise label="jdsx_code_insert_at">       
<title>Insert At</title>       
 <statement>

      <p>
        Add an <c>insertAt()</c> method to the <c>List</c> class that will insert an object at a certain position in the list.
        This method should take two parameters,
        the <c>Object</c> to be inserted,
        and an
<c>int</c> to designate where to insert it.
        It should return a
<c>boolean</c> to indicate whether the insertion was successful.
      </p>
    </statement>
      <program label="jdsx_insert_at_prg" interactive="activecode" language="java">
<input>
	    public class Program {		
		public static void main(String args[]) {
		    
		}
	    }
</input>
</program>    

    </exercise>
                  
 <exercise label="jdsx_code_remove_all">       
<title>Remove All</title>       
 <statement>

      <p>
        Add a <c>removeAll()</c> method to the <c>List</c> class.
        This <c>void</c> method should remove all the members of the list.
      </p>
    </statement>
      <program label="jdsx_remove_all_prg" interactive="activecode" language="java">
<input>
	    public class Program {		
		public static void main(String args[]) {
		    
		}
	    }
</input>
</program>    

    </exercise>
                  
 <exercise label="jdsx_code_size">       
<title>List Size</title>       
 <statement>

      <p>
        Write an <c>int</c> method named <c>size()</c> that returns the number of elements in a <c>List</c>.
      </p>
    </statement>
      <program label="jdsx_size_prg" interactive="activecode" language="java">
<input>
	    public class Program {		
		public static void main(String args[]) {
		    
		}
	    }
</input>
</program>    

    </exercise>
                  
 <exercise label="jdsx_code_contains">       
<title>List Contains</title>       
 <statement>

      <p>
        Write an <c>boolean</c> method named <c>contains(Object o)</c> that returns
<c>true</c> if its <c>Object</c> parameter is contained in the list.
      </p>
    </statement>
      <program label="jdsx_contains_prg" interactive="activecode" language="java">
<input>
	    public class Program {		
		public static void main(String args[]) {
		    
		}
	    }
</input>
</program>    

    </exercise>
                  
 <exercise label="jdsx_code_tail">       
<title>List Tail</title>       
 <statement>

      <p>
        The <em>head</em> of a list is the first element in the list.
        The <em>tail</em> of a list consists of all the elements except the head.
        Write a method named <c>tail()</c> that returns a reference to the tail of the list.
        Its return value should be <c>Node</c>.
      </p>
    </statement>
      <program label="jdsx_tail_prg" interactive="activecode" language="java">
<input>
	    public class Program {		
		public static void main(String args[]) {
		    
		}
	    }
</input>
</program>    

    </exercise>
                  
 <exercise label="jdsx_code_average_numbers">       
<title>Averaging a List</title>       
 <statement>

      <p>
        Write a program that uses the <c>List</c>ADT to store a list of 100 random floating-point numbers.
        Write methods to calculate the average of the numbers.
      </p>
    </statement>
      <program label="jdsx_average_numbers_prg" interactive="activecode" language="java">
<input>
	    public class Program {		
		public static void main(String args[]) {
		    
		}
	    }
</input>
</program>    

    </exercise>
                  
 <exercise label="jdsx_code_mean_gpa">       
<title>List of Students</title>       
 <statement>

      <p>
        Write a program that uses the <c>List</c>ADT to store a list of <c>Student</c> records,
        using a variation of the Student class defined in Chapter 11.
        Write a method to calculate the mean grade point average for all students in the list.
      </p>
    </statement>
      <program label="jdsx_student_list_prg" interactive="activecode" language="java">
<input>
	    public class Program {		
		public static void main(String args[]) {
		    
		}
	    }
</input>
</program>    

    </exercise>
                  
 <exercise label="jdsx_code_copy_list">       
<title>Copy List</title>       
 <statement>

      <p>
        Write a program that creates a copy of a <c>List</c>. It is necessary to copy each node of the list.
        This will require that you create new nodes that are copies of the nodes in the original list.
        To simplify this task,
        define a copy constructor for your node class and then use that to make copies of each node of the list.
      </p>
    </statement>
      <program label="jdsx_copy_list_prg" interactive="activecode" language="java">
<input>
	    public class Program {		
		public static void main(String args[]) {
		    
		}
	    }
</input>
</program>    

    </exercise>
                  
 <exercise label="jdsx_code_palindrom_stack">       
<title>Stack Palindrome Test</title>       
 <statement>

      <p>
        Write a program that uses a <c>Stack</c>ADT to determine if a string is a palindrome<mdash/>spelled the same way backward and forward.
      </p>
    </statement>
      <program label="jdsx_palindrome_stack_prg" interactive="activecode" language="java">
<input>
	    public class Program {		
		public static void main(String args[]) {
		    
		}
	    }
</input>
</program>    

    </exercise>
                  
 <exercise label="jdsx_code_matching_parens_stack">       
<title>Stack Parentheses Matching Test</title>       
 <statement>

      <p>
        Design and write a program that uses a <c>Stack</c> to determine whether a parenthesized expression is well-formed.
        Such an expression is well formed only if there is a closing parenthesis for each opening parenthesis.
      </p>
    </statement>
      <program label="jdsx_matching_parens_prg" interactive="activecode" language="java">
<input>
	    public class Program {		
		public static void main(String args[]) {
		    
		}
	    }
</input>
</program>    

    </exercise>
                  
 <exercise label="jdsx_code_matching_brackets">       
<title>Stack Brackets Matching</title>       
 <statement>

      <p>
        Design and write a program that uses <c>Stack</c> s to determine whether an expression involving both parentheses and square brackets is well formed.
      </p>
    </statement>
      <program label="jdsx_matching_brackets_prg" interactive="activecode" language="java">
<input>
	    public class Program {		
		public static void main(String args[]) {
		    
		}
	    }
</input>
</program>    

    </exercise>
                  
 <exercise label="jdsx_code_list_append">       
<title>Append Two Lists</title>       
 <statement>

      <p>
        Write a program that links two lists together,
        appending the second list to the end of the first list.
      </p>
    </statement>
      <program label="jdsx_append_prg" interactive="activecode" language="java">
<input>
	    public class Program {		
		public static void main(String args[]) {
		    
		}
	    }
</input>
</program>    

    </exercise>
                  
 <exercise label="jdsx_code_stack_array">       
<title>ArrayList based Stack</title>       
 <statement>

      <p>
        Design a <c>Stack</c> class that uses a <c>ArrayList</c> instead of a linked list to store its elements.
        This is the way Java's <c>Stack</c> class is defined.
      </p>
    </statement>
      <program label="jdsx_al_stack_prg" interactive="activecode" language="java">
<input>
	    public class Program {		
		public static void main(String args[]) {
		    
		}
	    }
</input>
</program>    

    </exercise>
                  
 <exercise label="jdsx_code_queue_array_list">       
<title>ArrayList Based Queue</title>       
 <statement>

      <p>
        Design a <c>Queue</c> class that uses a <c>ArrayList</c> instead of a linked list to store its elements.
      </p>
    </statement>
      <program label="jdsx_al_queue_prg" interactive="activecode" language="java">
<input>
	    public class Program {		
		public static void main(String args[]) {
		    
		}
	    }
</input>
</program>    

    </exercise>
                  
 <exercise label="jdsx_code_linked_list_students">       
<title>LinkedList Students</title>       
 <statement>

      <p>
        Write a program that uses the <c>List&lt;E&gt;</c> and <c>LinkedList&lt;E&gt;</c> classes to store a list of <c>Student</c> records,
        using a variation of the <c>Student</c> class defined in Chapter 11.
        Write a method to calculate the mean grade point average for all students in the list.
      </p>
    </statement>
      <program label="jdsx_linked_list_students_prg" interactive="activecode" language="java">
<input>
	    public class Program {		
		public static void main(String args[]) {
		    
		}
	    }
</input>
</program>    

    </exercise>
                  
 <exercise label="jdsx_code_phone_tree">       
<title>Phone Tree</title>       
 <statement>

      <p>
        Write an implementation of the <c>insert()</c> method of the <c>PhoneTree</c> class described at the end of this chapter.
      </p>
    </statement>
      <program label="jdsx_insert_prg" interactive="activecode" language="java">
<input>
	    public class Program {		
		public static void main(String args[]) {
		    
		}
	    }
</input>
</program>    

    </exercise>
                  
 <exercise label="jdsx_code_phone_node">       
<title>Phone Tree Node</title>       
 <statement>

      <p>
        Write an implementation of the <c>insert()</c> method of the <c>PhoneTreeNode</c> class described at the end of this chapter.
      </p>
    </statement>
      <program label="jdsx_phone_tree_prg" interactive="activecode" language="java">
<input>
	    public class Program {		
		public static void main(String args[]) {
		    
		}
	    }
</input>
</program>    

    </exercise>
                  
 <exercise label="jdsx_code_list_design">       
<title>List Design</title>       
 <statement>

      <p>
    <em>Challenge:</em> Design a <c>List</c> class,
        similar in functionality to the one we designed in this chapter,
        that uses an <em>array</em> to store the list's elements.
        Set it up so that the middle of the array is where the first element is placed.
        That way you can still insert at both the front and rear of the list.
        One limitation of this approach is that,
        unlike a linked list, an array has a fixed size.
        Allow the user to set the initial size of the array in a constructor,
        but if the array becomes full,
        don't allow any further insertions.
    </p>
    </statement>
      <program label="jdsx_list_class_design_prg" interactive="activecode" language="java">
<input>
	    public class Program {		
		public static void main(String args[]) {
		    
		}
	    }
</input>
</program>    

    </exercise>
                  
 <exercise label="jdsx_code_resize_array">       
<title>Resize Array</title>       
 <statement>

      <p>
        <em>Challenge:</em> Add a method to the program in the previous exercise that 
        lets the user increase the size of the array used to store the list.
      </p>
    </statement>
      <program label="jdsx_resize_array_prg" interactive="activecode" language="java">
<input>
	    public class Program {		
		public static void main(String args[]) {
		    
		}
	    }
</input>
</program>    

    </exercise>
                  
 <exercise label="jdsx_code_recursive_print">       
<title>Recursive Print and Lookup</title>       
 <statement>

      <p>
        <em>Challenge:</em> Recursion is a useful technique for list processing.
        Write recursive versions of the <c>print()</c> method and the lookup-by-name method for the <c>PhoneList</c>.
         (<em>Hint</em>: The base case in processing a list is the empty list.
        The recursive case should handle the head of the list and then recurse on the tail of the list.
        The tail of the list is everything but the first element.) Challenge: Design an <c>OrderedList</c> class.
        An ordered list is one that keeps its elements in order.
        For example, if it's an ordered list of integers,
        then the first integer is less than or equal to the second,
        the second is less than or equal to the third, and so on.
        If it's an ordered list of employees,
        then perhaps the employees are stored in order according to their social security numbers.
        The <c>OrderedList</c> class should contain an <c>insert(Object o)</c> method that inserts its object in the proper order.
        One major challenge in this project is designing your class so that it will work for any kind of object.
        (<em>Hint:</em> Define an <c>Orderable</c> interface that defines an abstract <c>precedes()</c> method.
        Then define a subclass of <c>Node</c> that implements <c>Orderable</c>. This will let you compare any 
        two <c>Node</c> s to see which one comes before the other.)
      </p>
    </statement>
      <program label="jdsx_print_lookup_prg" interactive="activecode" language="java">
<input>
	    public class Program {		
		public static void main(String args[]) {
		    
		}
	    }
</input>
</program>    

    </exercise>
  </exercises>

</section> 
