<section xml:id="ch-datastructures-sum">
	<title>Chapter Summary</title>
<introduction>
   <p>
    In this chapter,
    we have given you a brief introduction to the concept of a dynamic data 
    structure and tried to illustrate how they work and why they are useful 
    for organizing and managing large amounts of data.
    We also introduced you to an important new language feature introduced 
    in Java 5.0, the concept of generic types.
    Obviously, we have only scratched the surface of the important topic of 
    data structures and the algorithms used to manage them.
    For a broader and deeper treatment of this subject,
    you will have to take a <em>Data Structures and Algorithms</em> course,
    which is a fundamental course in most computer science curricula.
  </p>   
</introduction>
<subsection>
      <title>Technical Terms</title> 
      <p>
       <tabular>
       <row>
      <cell> Abstract Data Type (ADT)</cell>
      <cell>linked list</cell>
       </row>
       <row>
      <cell>binary search tree</cell>
      <cell>list</cell>
       </row>
       <row>
      <cell>data structure</cell>
      <cell>pop</cell>
       </row>
       <row>
      <cell>dequeue</cell>
      <cell>push</cell>
       </row>
       <row>
      <cell>dynamic structure</cell>
      <cell>queue</cell>
       </row>
       <row>
      <cell>enqueue</cell>
      <cell>reference</cell>
       </row>
       <row>
      <cell>first-in<ndash/>first-out (FIFO)</cell>
      <cell>self-referential object</cell>
       </row>
       <row>
      <cell>generic type</cell>
      <cell>stack</cell>
       </row>
       <row>
      <cell>Java collections framework</cell>
      <cell>static structure</cell>
       </row>
       <row>
      <cell>key</cell>
      <cell>traverse</cell>
       </row>
       <row>
      <cell>last-in<ndash/>first-out (LIFO)</cell>
      <cell>value</cell>
       </row>
       <row>
        <cell>link</cell>
       </row>
      </tabular>
    </p>
</subsection>
<subsection>
 <title>Important Points</title>
    <ul>
      <li>
        <p>
          A <term>data structure</term> is used to organize data and make them more efficient to process.
          An array is an example of a <term>static structure</term>,
          since its size does not change during a program's execution.
          An <c>ArrayList</c> is an example of a <term>dynamic structure</term>,
          one whose size can grow and shrink during a program's execution.
        </p>
      </li>
      <li>
        <p>
          A <term>linked list</term> is a linear structure in which the individual nodes of the list are joined together by references.
          A <term>reference</term> is a variable that refers to an object.
          Each node in the list has a <term>link</term>
          variable that refers to another node.
          An object that can refer to the same kind of object is said to be
          <term>self-referential</term>.
        </p>
      </li>
      <li>
        <p>
          The <c>Node</c> class is an example of a self-referential class.
          It contains a link variable that refers to a <c>Node</c>. By assigning references to the link variable, <c>Node</c> s can be chained together into a linked list.
          In addition to their link variables, <c>Node</c> s contain data variables,
          which should be accessible through public methods.
        </p>
      </li>
      <li>
        <p>
          Depending on the use of a linked list,
          nodes can be inserted at various locations in the list:
          at the head, the end, or in the middle of the list.
        </p>
      </li>
      <li>
        <p>
          Traversal algorithms must be used to access the elements of a singly linked list.
          To traverse a list you start at the first node and follow the links of the chain until you reach the desired node.
        </p>
      </li>
      <li>
        <p>
          Depending on the application,
          nodes can be removed from the front,
          rear, or middle of a linked list.
          Except for the front node,
          traversal algorithms are used to locate the desired node.
        </p>
      </li>
      <li>
        <p>
          In developing list algorithms,
          it is important to test them thoroughly.
          Ideally, you should test every possible combination of insertions and removals that the list can support.
          Practically,
          you should test every independent case of insertions and removals that the list supports.
        </p>
      </li>
      <li>
        <p>
          An <term>Abstract Data Type (ADT)</term>
          is a concept that combines two elements: A collection of data,
          and the operations that can be performed on the data.
          For the list ADT, the data are the values (<c>Object</c> s or <c>int</c> s) contained in the nodes that make up the list,
          and the operations are insertion, removal,
          and tests of whether the list is empty.
        </p>
      </li>
      <li>
        <p>
          In designing an ADT, it's important to provide a public interface that can be used to access the ADT's data.
          The ADT's implementation details should not matter to the user and should,
          therefore,
          be hidden.
          A Java class definition,
          with its <c>public</c> and <c>private</c> aspects,
          is perfectly suited to implement an ADT.
        </p>
      </li>
      <li>
        <p>
          A <term>stack</term> is a list that allows insertions and removals only at the front of the list.
          A stack insertion is called a <term>push</term>
          and a removal is called a <term>pop</term>.
          The first element in a stack is usually called the top of the stack.
          The <c>Stack</c>ADT can easily be defined as a subclass of <c>List</c>. Stacks are used for managing the method call and return in most programming languages.
        </p>
      </li>
      <li>
        <p>
          A <term>queue</term> is a list that only allows insertions at the rear and removals from the front of a list.
          A queue insertion is called <term>enqueue</term>,
          and a removal is called <term>dequeue</term>.
          The
<c>Queue</c>ADT can easily be defined as a subclass of <c>List</c>. Queues are used for managing the various lists used by the CPU scheduler<mdash/>such as the ready,
          waiting, and blocked queues.
        </p>
      </li>
      <li>
        <p>
          A <term>binary search tree</term> is a binary tree in which the ordered data stored at any node is greater than all data stored in the left subtree and is less than all data stored in the right subtree.
        </p>
      </li>
    </ul>
</subsection>  

<solutions scope="chapter-datastructures" divisional="solution" project="solution" inline="solution">
  <title>Solutions to Self-Study Exercises</title>
</solutions>

</section>