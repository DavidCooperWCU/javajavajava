<section xml:id="why-java">
  <title>Why Java?</title>
  <p>
    Originally named
    <q>Oak</q>
    after a tree outside the office of its developer, James Goslin, Java was initially 
    designed by Sun Microsystems in 1991 as a language for embedding programs into electronic consumer devices,
    such as microwave ovens and home security systems.
    However, the tremendous popularity of the Internet and the World Wide Web (WWW) led Sun to recast Java as a language for embedding programs into Web-based applications.
    As you recall, the Internet is a global computer network,
    and the WWW is an application that provides multimedia access to a vast range of information.
    Java has become one of the most important languages for Web and Internet applications.
  </p>
  <p>
    Today Java is one of the most widely used programming languages, particularly for Web-based client-sever applications.
  </p>
  <p>
    Java has been designed with a number of interesting features:
    <ul>
      <li>
        <p>
          Java is <em>object oriented</em>.
          Object-oriented languages divide programs into separate modules,
          called objects,
          that encapsulate the program's data and operations.
          Thus, <em>object-oriented programming (OOP)</em>
          and <em>object-oriented design (OOD)</em>
          refer to a particular way of organizing <aside>Object-oriented Languages</aside> programs,
          one which is rapidly emerging as the preferred approach for building complex software systems.
          Unlike the C++ language,
          in which object-oriented features were grafted onto the C language, Java was designed from scratch as an object-oriented language.
        </p>
      </li>
      <li>
        <p>
          Java is <em>robust</em>,
          meaning that errors in Java programs don't cause system crashes as often as errors in other programming languages.
          Certain features of the language enable many potential errors to be detected before a program is run.
        </p>
      </li>
      <li>
        <p>
          Java is <em>platform independent</em>. <aside>Platform independence</aside> A
          <em>platform</em>, in this context,
          is just a particular kind of computer system,
          such as a Macintosh or Windows system.
          Java's trademark is
          <q>Write once, run anywhere.</q>
          This means that a Java program can be run without changes on different kinds of computers.
          This is not true for other high-level programming languages.
          This <em>portability</em> <mdash/> the ability to run on virtually any platform <mdash/> is one reason that Java is well suited for WWW applications.
        </p>
      </li>
      <li>
        <p>
          Java is a <em>distributed</em> language,
          which means that its programs can be designed to run on computer networks.
          In addition to the language itself, Java comes with an extensive collection of
          <em>code libraries</em><mdash/>software that has been designed to be used directly for particular types of applications<mdash/>that make it particularly easy to build software systems for the Internet and the WWW. This is one of the reasons why Java is so well suited for supporting applications on corporate networks.
        </p>
      </li>
      <li>
        <p>
          Java is a <em>secure</em> language.
          Designed to be used on networks, Java contains features that protect against
          <em>untrusted code</em><mdash/>code that might introduce a virus or corrupt your system in some way.
        </p>
      </li>
    </ul>
  </p>
  <p>
    Despite this list of attractive features,
    perhaps the best reason for choosing Java as an introductory programming language is its potential for enabling beginning
    programmers to create graphically based games and other applications. Its easily accessible libraries bring such accomplishments within reach of the most novice programmers.
  </p>
  <p>
    For example,
    we will work on projects throughout the text that involve games and puzzles.
    We start out in <xref ref="chapter-objects">Chapter</xref>
    by designing very simple games that involve storing and retrieving data.
    As we learn more sophisticated programming techniques,
    we gradually build more complexity into the games and puzzles.
    For example, we learn how to create interactive,
    two-person games in <xref ref="chapter-io">Chapter</xref>.
    In <xref ref="chapter-inheritance">Chapter</xref>,
    we develop some games and puzzles that are played on virtual game boards.
    Finally, in <xref ref="chapter-threads">Chapter</xref>
    we learn how to introduce games with multiple players on different computers.
  </p>
</section>