<section xml:id="ch-io-exs">
    <title>Exercises</title>

    <exercises>
    <title> IO Exercises </title>

<exercisegroup>
<title>Fill in the blank</title>
    <introduction>
       <p>
          Fill in the blanks in each of the following sentences:
        </p>
	</introduction>
        
        
          <exercise label="jioe_fill_blank_1">       
 <statement>
            <p>
              The <c>JButton</c>, <c>JTextField</c>, and <c>JComponent</c> classes are 
              defined in the 	<var width="15"/> package.
            </p>
            </statement>       
<setup>
          <var>
            <condition string="javax.swing">
              <feedback>
		<p>Correct</p>
              </feedback>
            </condition>
	    <condition case="insensitive" string="javax.swing">
              <feedback>
		<p>Try again. Case matters.</p>
              </feedback>
            </condition>
	    <condition string="java.awt">
              <feedback>
		<p>Try again. That's the old graphics package</p>
              </feedback>
            </condition>
	    <condition string="java.io">
              <feedback>
		<p>Try again. that's for input and output streams</p>
              </feedback>
            </condition>
	    <condition string="java.lang">
              <feedback>
		<p>Try again. You don't need to import for java.lang</p>
              </feedback>
            </condition>
	    
            <condition string=".*">
              <feedback>
		<p>Try again. if you search for the java api JButton, you can look for the package at the top.</p>
              </feedback>
            </condition>
          </var>
	</setup>	
    
 </exercise>
           
          <exercise label="jioe_fill_blank_2">       
 <statement>
            <p>
              Java GUIs utilize a form of control known as 	<var width="30"/> programming.
            </p>
          </statement>       
<setup>
          <var>
            <condition case="insensitive" string="event driven|event-driven">
              <feedback>
		<p>Correct</p>
              </feedback>
            </condition>
	    <condition case="insensitive" string="object oriented">
              <feedback>
		<p>Try again. All of java is meant to be object oriented.</p>
              </feedback>
            </condition>
	    
	    
            <condition string=".*">
              <feedback>
		<p>Try again. Look at the GUI section of this chapter.</p>
              </feedback>
            </condition>
          </var>
	</setup>    
 </exercise>
          <exercise label="jioe_fill_blank_3">       
 <statement>
            <p>
              When the user clicks on a program's <c>JButton</c>, an <var width="30"/> will automatically be generated.
            </p>
          </statement>          
<setup>
          <var>
            <condition  string="ActionEvent">
              <feedback>
		<p>Correct</p>
              </feedback>
            </condition>
	    <condition case="insensitive" string="ActionEvent">
              <feedback>
		<p>Try again. Case Matters.</p>
              </feedback>
            </condition>
	    
	    
            <condition string=".*">
              <feedback>
		<p>Try again. Look at the GUI section of this chapter.</p>
              </feedback>
            </condition>
          </var>
	</setup>       
 </exercise>
          <exercise label="jioe_fill_blank_4">       
 <statement>
            <p>
              Two kinds of objects that generate <c>ActionEvent</c> s are <var width="10"/> and <var width="10"/> . <c>JButton</c>s, <c>JTextField</c>s, and
<c>JLabel</c>s are all subclasses of <var width="30"/> .
            </p>
          </statement>       
<setup>
          <var>
            <condition  string="JButton">
              <feedback>
		<p>Correct</p>
              </feedback>
            </condition>
	    <condition case="insensitive" string="JButton">
              <feedback>
		<p>Try again. Case Matters.</p>
              </feedback>
            </condition>
	    
	    <condition  string="JTextField">
              <feedback>
		<p>Try Again. Wrong order</p>
              </feedback>
            </condition>
            <condition string=".*">
              <feedback>
		<p>Try again. Look at the GUI section of this chapter.</p>
              </feedback>
            </condition>
          </var>
	  <var>
            <condition  string="JTextField">
              <feedback>
		<p>Correct</p>
              </feedback>
            </condition>
	    <condition case="insensitive" string="JTextField">
              <feedback>
		<p>Try again. Case Matters.</p>
              </feedback>
            </condition>
	     <condition string="JButton">
              <feedback>
		<p>Try again. Wrong Order.</p>
              </feedback>
            </condition>
	    
	    
            <condition string=".*">
              <feedback>
		<p>Try again. Look at the GUI section of this chapter.</p>
              </feedback>
            </condition>
          </var>

<var>
            <condition  string="JComponent">
              <feedback>
		<p>Correct</p>
              </feedback>
            </condition>
	    <condition string="Container">
              <feedback>
		<p>Try again. Not specific enough</p>
              </feedback>
            </condition>
	     <condition string="Component">
              <feedback>
		<p>Try again. Not specific enough.</p>
              </feedback>
            </condition>
	     <condition string="Object">
              <feedback>
		<p>Try again. Not specific enough.</p>
              </feedback>
            </condition>
	    
            <condition string=".*">
              <feedback>
		<p>Try again. Look at the GUI section of this chapter.</p>
              </feedback>
            </condition>
          </var>
	</setup>             
 </exercise>
          <exercise label="jioe_fill_blank_5">       
 <statement>
            <p>
              The <c>JFrame</c> class is a subclass of <var width="30"/> .
            </p>
          </statement>       
 <setup>
 <var>
            <condition  string="Frame">
              <feedback>
		<p>Correct</p>
              </feedback>
            </condition>
	    <condition string="Window">
              <feedback>
		<p>Try again. Not specific enough</p>
              </feedback>
            </condition>
	     <condition string="Container">
              <feedback>
		<p>Try again. Not specific enough.</p>
              </feedback>
            </condition>
<condition string="Component">
              <feedback>
		<p>Try again. Not specific enough.</p>
              </feedback>
            </condition>
<condition string="Object">
              <feedback>
		<p>Try again. Not specific enough.</p>
              </feedback>
            </condition>
	    
            <condition string=".*">
              <feedback>
		<p>Try again. Look at the GUI section of this chapter.</p>
              </feedback>
            </condition>
          </var>
	</setup>             
 </exercise>
          <exercise label="jioe_fill_blank_6">       
 <statement>
            <p>
              If a Java class intends to handle <c>ActionEvent</c> s, it must implement the <var width="30"/> interface.
            </p>
          </statement>       
 <setup>
 <var>
            <condition  string="ActionListener">
              <feedback>
		<p>Correct</p>
              </feedback>
            </condition>
	    <condition string="EventListener">
              <feedback>
		<p>Try again. Not specific enough</p>
              </feedback>
            </condition>
	     
	    
            <condition string=".*">
              <feedback>
		<p>Try again. Look at the GUI section of this chapter.</p>
              </feedback>
            </condition>
          </var>
	</setup>             
        
 </exercise>
        </exercisegroup>
    
    
    
        
  <exercise label="jioe_free_response_1">       
 <statement>
    <p>
      Explain the difference between: An <c>ActionEvent</c> and an <c>ActionListener()</c> method.
    </p>
  </statement>       
 <response />       
 </exercise>
    <exercise  label="jioe_free_response_2">       
 <statement>
        <p>
          Look up the documentation for the <c>JButton</c> class on Oracle's Web site:

<url href="https://docs.oracle.com/javase/8/docs/api/javax/swing/JButton.html" visual="">https://docs.oracle.com/javase/8/docs/api/javax/swing/JButton.html</url>.
   List the signatures of all its constructors.

        </p>
    </statement>       
 <response />       
 </exercise>
    <exercise label="jioe_free_response_3">       
 <statement>
    
          <p>
          Suppose we want to set the text in our program's <c>JTextField</c>.
          What method should we use and where is this method defined?
           <hint> Look up the documentation for <c>JTextField</c>.
           If no appropriate method is defined there, see if it is inherited from a superclass.</hint>
        </p>
    
      </statement>       
 <response />       
 </exercise>
      <exercise label="jioe_free_response_4">       
 <statement>
        <p>
          Does a <c>JButton</c> have an <c>init()</c> method?
          Explain.
        </p>
      </statement>       
 <response />       
 </exercise>
      <exercise label="jioe_free_response_5">       
 <statement>
    
         <p>
          Does a <c>JButton</c> have an <c>add()</c> method?
          Explain.
        </p>
      </statement>       
 <response />       
 </exercise>
      <exercise label="jioe_free_response_6">       
 <statement>
    
        <p>
          Suppose you have a program containing a <c>JButton</c> named <c>button</c>. Describe what happens,
          in terms of Java's event handling model,
          when the user clicks the button.
        </p>
    
    
      </statement>       
 <response />       
 </exercise>
      <exercise label="jioe_code_challenge_1">       
 <statement>
   
         <p>
          Design and implement a GUI that contains two <c>JButton</c> s, initially labeled,
          <q>Me first!</q>
          and
          <q>Me next!</q>
          Each time the user clicks either button,
          the labels on both buttons should be exchanged.
          <hint> You don't need an if-else statement for this problem.</hint>
        </p>
    
    </statement>       
 <response />       
 </exercise>
    <exercise label="jioe_code_challenge_2">       
 <statement>
         <p>
          Modify the GUI in the previous exercise so that it contains three <c>JButton</c> s,
          initially labeled <q>First,</q> <q>Second,</q> and <q>Third.</q>
          Each time the user clicks one of the buttons,
          the labels on the buttons should be rotated.
          Second should get first's label,
          third should get second's, and first should get third's label.
        </p>
    
      </statement>       
 <response />       
 </exercise>
      <exercise label="jioe_code_challenge_3">       
 <statement>
         <p>
          Design and implement a GUI that contains a
<c>JTextField</c> and two <c>JButton</c> s, initially labeled
          <q>Left</q>
          and
          <q>Right.</q>
          Each time the user clicks a button,
          display its label in the <c>JTextField</c>. A <c>JButton()</c>'s label can be gotten with the <c>getText()</c> method.
        </p>
    
      </statement>       
 <response />       
 </exercise>
      <exercise label="jioe_code_challenge_4">       
 <statement>
         <p>
          You can change the size of a <c>JFrame</c> by using the
<c>setSize(int h, int v)</c> method,
          where <em>h</em> and <em>v</em>
          give its horizontal and vertical dimensions pixels.
          Write a GUI application that contains two <c>JButton</c> s, labeled
          <q>Big</q>
          and
          <q>Small.</q>
          Whenever the user clicks on small,
          set the <c>JFrame's</c> dimensions to 200 <times/> 100,
          and whenever the user clicks on big,
          set the dimensions to 300 <times/> 200.
        </p>
    
      </statement>       
 <response />       
 </exercise>
      <exercise label="jioe_code_challenge_5">       
 <statement>
         <p>
          Rewrite your solution to the previous exercise so that it uses a single button whose label is toggled appropriately each time it is clicked.
          Obviously, when the <c>JButton</c> is labeled
          <q>Big,</q>
          clicking it should give the <c>JFrame</c> its big dimensions.
      </p>
      </statement>       
 <response />       
 </exercise>
      <exercise label="jioe_code_challenge_6">       
 <statement><p>
          Challenge: Design and write a Java GUI application that allows the user to change
           the <c>JFrame</c>'s background color to one of three choices,
          indicated by buttons.
          Like all other Java <c>Component</c> s, <c>JFrame</c>'s have an associated background color,
          which can be set by the following commands:
<program language="java">
    <input>
setBackground(Color.red);
setBackground(Color.yellow);
    </input>
</program>
</p>
<p>
The <c>setBackground()</c> method is defined in the
<c>Component</c> class,
          and 13 primary colors<mdash/><c>black</c>, <c>blue</c>,
<c>cyan</c>, <c>darkGray</c>, <c>gray</c>, <c>green</c>, <c>lightGray</c>,
<c>magenta</c>, <c>orange</c>, <c>pink</c>, <c>red</c>, <c>white</c>, <c>yellow</c><mdash/>are
defined in the <c>java.awt.Color</c> class.
         </p>
    
        </statement>       
 <response />       
 </exercise>
      </exercises>
      

    
    
  
    
  
</section>
