<section  xml:id="ch-loops-exs"><title>Exercises</title>

<exercises>
<title>Loop Exercises</title>

    <exercise label="jlex_matching_java_definitions">
      <title>Java Concept Matching</title>
      <statement>
	<p>
         Match the loop terms to the definitions.
	</p>
      </statement>
      <matches>
	<match>
	  <order>1</order>
          <premise><em>counting loop</em></premise>
          <response>used to perform a repetitive task when the number of iterations required is known beforehand </response>
	</match>
	<match>
	  <order>2</order>
          <premise><em>conditional loop</em></premise>
          <response>used to perform repetitive tasks when the number of iterations depends on a non-counting bound</response>
	</match>
	<match>
	  <order>3</order>
          <premise><em>for statement</em></premise>
          <response>a structured loop, with three parts in the header, designed to make counting loops easier to code</response>
	</match>
	<match>
	  <order>4</order>
          <premise><em>while statement</em></premise>
          <response>a conditional loop that has one part in the header, where the loop bound is checked before the loop body is executed.</response>
	</match>
	<match>
	  <order>5</order>
	  <premise><em>do-while statement</em> </premise>
          <response>a conditional loop that has one part in the header, where the loop bound is checked after the loop body is executed, so this kind of loop is always executed at least once</response>
	</match>
	<match>
	  <order>6</order>
          <premise><em>zero indexing</em> </premise>
          <response>counting starts at zero</response>
	</match>
	<match>
	  <order>7</order>
          <premise><em>unit indexing</em></premise>
          <response>counting starts at one</response>
	</match>
	<match>
	  <order>8</order>
          <premise><em>sentinel bound</em></premise>
          <response>a special value used to stop the loop</response>
	</match>
	<match>
	  <order>9</order>
          <premise><em>limit bound</em></premise>
          <response>a value that a loop approaches incrementally and when reached the loop terminates</response>
	</match>
	<match>
	  <order>10</order>
          <premise><em>counting bound</em></premise>
          <response>a value that stops the loop when the specific count is reached</response>
	</match>
	<match>
	  <order>11</order>
          <premise><em>flag bound</em></premise>
          <response>a boolean variable that stops the loop when its value is set to true</response>
	</match>
	<match>
	  <order>12</order>
          <premise><em>loop initializer</em></premise>
          <response>a statement executed before the first iteration of a loop</response>
	</match>
	<match>
	  <order>13</order>
          <premise><em>loop updater</em></premise>
          <response>a statement that is executed (typically at the end of) each iteration</response>
	</match>
	<match>
	  <order>14</order>
          <premise><em>named constant</em></premise>
          <response>a final variable whose value remains the same throughout the program</response>
	</match>
	<match>
	  <order>15</order>
          <premise><em>literal</em></premise>
          <response>an actual value or quoted string</response>
	  </match><match>
	  <order>16</order>
          <premise><em>compound statement</em></premise>
          <response>A sequence of simple statements contained withing a set of curly braces</response>
	</match>
	<match>
	  <order>17</order>
          <premise><em>null statement</em></premise>
          <response>The absense of a statment, signified by empty curly braces or a semicolon by itself.</response>
	</match>
	
	.
	
      </matches>
    </exercise>
    <exercisegroup>
    <title>Fill in the Blank</title>
    <introduction>
      <p>
        Fill in the blank.
	</p>
	</introduction>
        
              <exercise label="jlex_fill_in_reading_before">
      <title>Reading Datat</title>
      <statement>

            <p>
              The process of reading a data item before entering a loop is known as a <var width="18" /> .
            </p>
      </statement>
      <setup case="insensitive">
          <var>
            <condition  string="priming read">
              <feedback>
		<p>Correct</p>
              </feedback>
            </condition>
	    
            <condition string=".*">
              <feedback>
		<p>Try again. Look at the Computing Averages section of this chapter.</p>
              </feedback>
            </condition>
          </var>
	</setup>       

 <response />       
	      </exercise>
	      <!-- removed, not referenced in this chapter -->
	      <!--
              <exercise label="jlex_loop_only">
      <title>Empty Loop</title>
      <statement>

            <p>
              A loop that does nothing except iterate is an example of <var width="18" /> .
            </p>
      </statement>
      <setup>
          <var case="insensitive">
            <condition  string="busy waiting">
              <feedback>
		<p>Correct</p>
              </feedback>
            </condition>
	    
	    
	    
            <condition string=".*">
              <feedback>
		<p>Try again. Look at the GUI section of this chapter.</p>
              </feedback>
            </condition>
          </var>
	</setup>       

 <response />       
 </exercise>
	      -->
	      <!-- removed, unclear question -->
	      <!--
              <exercise label="jlex_no_body_loop">
      <title>Loop with no body</title>
      <statement>

            <p>
              A loop that contains no body is an example of a <var width="10" /> statement.
            </p>
      </statement>
      <setup case="insensitive">
          <var>
            <condition  string="null">
              <feedback>
		<p>Correct</p>
              </feedback>
            </condition>
	   
	    
	    
            <condition string=".*">
              <feedback>
		<p>Try again. Look at the GUI section of this chapter.</p>
              </feedback>
            </condition>
          </var>
	</setup>       

 <response />       
 </exercise>
	      -->
	     <!-- removed, unclear question -->
	      <!-- 
              <exercise label="jlex_loop_condition">
      <title>Loop Condition</title>
      <statement>

            <p>
              A loop whose entry condition is stated as
              <m>( k \lt 100\; ||\; k >= 0)</m> would be an example of an <var width="10" /> loop.
            </p>
      </statement>
      <setup>
          <var>
            <condition  string="compound condition">
              <feedback>
		<p>Correct</p>
              </feedback>
            </condition>
	    
	    
            <condition string=".*">
              <feedback>
		<p>Try again. </p>
              </feedback>
            </condition>
          </var>
	</setup>       

 <response />       
 </exercise>
 -->
              <exercise label="jlex_loop_types_1">
      <title>Loop Types</title>
      <statement>

            <p>
              A loop that should iterate until the user types in a special value should use a <var width="10" /> bound.
            </p>
      </statement>
      <setup>
          <var case="insensitive">
            <condition  string="sentinel">
              <feedback>
		<p>Correct</p>
              </feedback>
            </condition>
	    
	    
	    
            <condition string=".*">
              <feedback>
		<p>Try again. </p>
              </feedback>
            </condition>
          </var>
	</setup>       

 <response />       
 </exercise>
              <exercise label="jlex_loop_types_2">
      <title>More Loop Types</title>
      <statement>

            <p>
              A loop that should iterate until its variable goes from 5 to 100 should use a <var width="10" /> bound.
            </p>
      </statement>
      <setup>
          <var case="insensitive" >
            <condition  string="counting">
              <feedback>
		<p>Correct</p>
              </feedback>
            </condition>
	   
	    
	    
            <condition string=".*">
              <feedback>
		<p>Try again. Look at the GUI section of this chapter.</p>
              </feedback>
            </condition>
          </var>
	</setup>       

 <response />       
 </exercise>
              <exercise label="jlex_loop_types_3">
      <title>Loop Types Again</title>
      <statement>

            <p>
              A loop that should iterate until the difference between two values is less than 0.005 is an example of a <var width="10" /> bound.
            </p>
      </statement>
      <setup>
          <var case="insensitive" >
            <condition  string="limit">
              <feedback>
		<p>Correct</p>
              </feedback>
            </condition>
	    
	    
	    
            <condition string=".*">
              <feedback>
		<p>Try again. </p>
              </feedback>
            </condition>
          </var>
	</setup>       

 <response />       
 </exercise>
 </exercisegroup>
      
        <exercise label="jlex_syntax_errors">
      <title>Java Code Tracing</title>
      <introduction>

      <p>
        Identify the syntax errors in each of the following:
      </p>
      </introduction>
              <task label="jlex_syntax_error_1">
      <statement>

            <p>
              for (int k = 0; k &lt; 100; k++) System.out.println(k)
            </p>
          </statement>       
 <response />       
 </task>
              <task label="jlex_syntax_error_2">
      <statement>

            <p>
              for (int k = 0; k &lt; 100; k++); System.out.println(k);
            </p>
          </statement>       
 <response />       
 </task>
              <task label="jlex_syntax_error_3">
   
      <statement>

            <p>
              int k = 0 while k &lt; 100 { System.out.println(k); k++;}
            </p>
          </statement>       
 <response />       
 </task>
              <task label="jlex_syntax_error_4">
      <statement>

            <p>
              int k = 0; do { System.out.println(k);
              k++;} while k &lt; 100 ;
            </p>
          </statement>       
 <response />       
 </task>
        </exercise>
        <exercise label="jlex_determine_output">
      <title>Trace and Determine the Output</title>
      <introduction>

      <p>
        Determine the output and/or identify the error in each of the following code segments:
      </p>
      </introduction>
              <task label="jlex_output_counting_loop">
     <statement>

            <p>
              for (int k = 1; k == 100; k += 2) System.out.println(k);
            </p>
          </statement>       
 <response />       
 </task>
              <task label="jlex_output_counting_loop2">
      <statement>

            <p>
              int k = 0; while (k &lt; 100) System.out.println(k); k++;
            </p>
          </statement>       
 <response />       
 </task>
              <task label="jlex_output_counting_loop3">
      <statement>

            <p>
              for (int k = 0; k &lt; 100; k++) ; System.out.println(k);
            </p>
          </statement>       
 <response />       
 </task>
              
 </exercise>
        <exercise label="jlex_describe_algorithms">
      <title>Write Pseudocode</title>
      <introduction>

      <p>
        Write pseudocode algorithms for the following activities,
        paying particular attention to the <em>initializer</em>,
        <em>updater</em>, and <em>boundary condition</em> in each
	case.
      </p>
      </introduction>
      <task label="jlex_describe_softball_game">
	<statement>
          a softball game
	</statement>
	<response />
      </task>
      <task label="jlex_describe_five_question_quiz">
	<statement>
	  a five-question quiz
	  </statement>
	<response />
      </task>
      <task label="jlex_describe_name_lookup">
	<statement> looking up a name in the phone book
        </statement>
	<response />
      </task>    
 </exercise>
        <exercise label="jlex_pre_post_conditions">
      <title>Pre and Post Conditions</title>
      <introduction>

      <p>
        Identify the pre- and postconditions for each of the statements that follow.
        Assume that all variables are <c>int</c> and have been properly declared.
      </p>
      </introduction>
              <task label="jlex_pre_post_division">
      <title>Division</title>
      <statement>

            <p>
              int result = x / y;
            </p>
          </statement>       
 <response />       
 </task>
              <task label="jlex_pre_post_modulus">
      <title>Modulus</title>
      <statement>

            <p>
              int result = x % y;
            </p>
          </statement>       
 <response />       
 </task>
              <task label="jlex_pre_post_do_while">
      <title>Do-While</title>
      <statement>

            <p>
              int x = 95; do x /= 2; while(x >= 0);
            </p>
          </statement>       
 <response />       
 </task>
            
 </exercise>


 <exercise label="jlex_three_loops">
      <title>Compare Three Loops</title>
      <introduction>

      <p>
        Write three different loops<mdash/>a <c>for</c> loop,
        a <c>while</c> loop,
        and a <c>do-while</c> loop<mdash/>to print all the multiples of 10,
        including 0, up to and including 1,000.
      </p>
      </introduction>
              <task label="jlex_for_loop_multiples_ten">
      <title>For Loop</title>
      <statement>

            <p>
              print all the multiples of 10,
        including 0, up to and including 1,000 using a for loop
            </p>
          </statement>       
 <response />       
 </task>
              <task label="jlex_while_loop_multiples_ten">
      <title>While Loop</title>
      <statement>

            <p>
              print all the multiples of 10,
        including 0, up to and including 1,000 using a while loop
            </p>
          </statement>       
 <response />       
 </task>
              <task label="jlex_do_while_loop_multiples_ten">
      <title>Do-While Loop</title>
      <statement>

            <p>
              print all the multiples of 10,
        including 0, up to and including 1,000 using a do-while loop
            </p>
          </statement>       
 <response />       
 </task>
            
 </exercise>


 
        <exercise label="jlex_three_loops_descending">
      <title>Three Loops Descending</title>
      <statement>

      <p>
        Write three different loops<mdash/>a <c>for</c> loop,
        a <c>while</c> loop,
        and a <c>do-while</c> loop<mdash/>to print the following sequence of numbers: 45, 36, 27, 18, 9, 0, <m>-9</m>,
        <m>-18</m>,
        <m>-27</m>, <m>-36</m>, <m>-45</m>.
      </p>
    </statement>       
 <response />       
 </exercise>
        <exercise label="jlex_three_loops_ski_jump">
      <title>Three loops ski jump</title>
      <statement>

      <p>
        Write three different loops<mdash/>a <c>for</c> loop,
        a while <c>loop</c>, and a <c>do-while</c> loop<mdash/>to print the following ski-jump design:
 <program language="java"><input>
#
# #
# # #
# # # #
# # # # #
# # # # # #
# # # # # # #
 </input></program>
      </p>
    </statement>       
 <response />       
 </exercise>
        <exercise label="jlex_sentinel_pseudocode">
      <title>Promotional Looping Pseudocode</title>
      <statement>

      <p>
        The Straight Downhill Ski Lodge in Gravel Crest, Vermont,
        gets lots of college students on breaks.
        The lodge likes to keep track of repeat visitors.
        Straight Downhill's database includes an integer variable,
        <em>visit</em>,
        which gives the number of times a guest has stayed at the lodge (1 or more).
        Write the pseudocode to catch those visitors who have stayed at the lodge at least twice and to send them a special promotional package
        (pseudocode = send promo). (<em>Note:</em>
        The largest number of stays recorded is eight.
        The number nine is used as an end-of-data flag.)
      </p>
    </statement>       
 <response />       
 </exercise>
        <exercise label="jlex_coupon_pseudocode">
      <title>Extra Coupon Pseudocode</title>
      <statement>

      <p>
        Modify your pseudocode in the previous exercise.
        In addition to every guest who has stayed at least twice at the lodge receiving a promotional package,
        any guest with three or more stays should also get a $40 coupon good for lodging,
        lifts, or food.
      </p>
    </statement>       
 <response />       
 </exercise>
        <exercise label="jlex_even_number_loop">
      <title>Even Number Loop Method</title>
      <statement>

      <p>
        Write a method that is passed a single parameter, <em>N</em>,
        and displays all the even numbers from 1 to <em>N</em>.
      </p>
    </statement>       
       <program label="jlex_even_method_prg" interactive="activecode" language="java">
	<input>
	  public class Program
	  {
	     public static void main(String args[])   // Main method
	     {

	     }
	  }
	</input>
      </program>
       
 </exercise>
        <exercise label="jlex_odd_number_loop">
      <title>Odd Number Loop Method</title>
      <statement>

      <p>
        Write a method that is passed a single parameter, <em>N</em>,
        that prints all the odd numbers from 1 to <em>N</em>.
      </p>
    </statement>       
       <program label="jlex_odd_method_prg" interactive="activecode" language="java">
	<input>
	  public class Program
	  {
	     public static void main(String args[])   // Main method
	     {

	     }
	  }
	</input>
      </program>
       
 </exercise>
        <exercise label="jlex_countdown_by_ten">
      <title>Count Down By Ten Method</title>
      <statement>

      <p>
        Write a method that is passed a single parameter, <em>N</em>,
        that prints all the numbers divisible by 10 from <em>N</em> down to 1.
      </p>
    </statement>       
       <program label="jlex_factors_of_ten_prg" interactive="activecode" language="java">
	<input>
	  public class Program
	  {
	     public static void main(String args[])   // Main method
	     {

	     }
	  }
	</input>
      </program>
       
 </exercise>
        <exercise label="jlex_n_chars">
      <title>N Characters Method</title>
      <statement>

      <p>
        Write a method that is passed two parameters<mdash/>a <c>char</c><em>Ch</em>
        and an <c>int</c><em>N</em><mdash/>and prints a string of <em>N Chs</em>.
      </p>
    </statement>       
       <program label="jlex_repeated_char_prg" interactive="activecode" language="java">
	<input>
	  public class Program
	  {
	     public static void main(String args[])   // Main method
	     {

	     }
	  }
	</input>
      </program>
       
 </exercise>
        <exercise label="jlex_multiplication_table">
      <title>Multiplication Table Method</title>
      <statement>

      <p>
        Write a method that uses a nested <c>for</c> loop to print the following multiplication table:
 <program language="java"><input>
   1  2  3  4  5  6  7  8  9
1  1
2  2  4
3  3  6  9
4  4  8 12 16
5  5 10 15 20 25
6  6 12 18 24 30 36
7  7 14 21 28 35 42 48
8  8 16 24 32 40 48 56 64
9  9 18 27 36 45 54 63 72 81
 </input></program>
      </p>
    </statement>       
       <program label="jlex_mult_table_prg" interactive="activecode" language="java">
	<input>
	  public class Program
	  {
	     public static void main(String args[])   // Main method
	     {

	     }
	  }
	</input>
      </program>
       
 </exercise>
        <exercise label="jlex_four_patterns_method">
      <title>Four Patterns Method</title>
      <statement>

      <p>
        Write a method that uses nested <c>for</c> loops to print the patterns that follow.
        Your method should use the following statement to print the patterns: <c>System.out.print('#');</c>.
 <program language="java"><input>
# # # # # # # #     # # # # # # # #   # # # # # # # #   # # # # # # # #
  # # # # # # #     # # # # # # #       #         #                 #
    # # # # # #     # # # # # #           #     #                 #
      # # # # #     # # # # #               # #                 #
        # # # #     # # # #                 # #               #
          # # #     # # #                 #     #           #
            # #     # #                 #         #       #
              #     #                 # # # # # # # #   # # # # # # # #
 </input></program>
      </p>
    </statement>       
       <program label="jlex_four_pattenrs_prg" interactive="activecode" language="java">
	<input>
	  public class Program
	  {
	     public static void main(String args[])   // Main method
	     {

	     }
	  }
	</input>
      </program>
       
 </exercise>
        <exercise label="jlex_box_pattern_method">
      <title>Box Pattern Program</title>
      <statement>

      <p>
        Write a program that asks the user for the number of rows and the number of columns in a box of asterisks.
        Then use nested loops to generate the box.
      </p>
    </statement>       
       <program label="jlex_box_pattern_prg" interactive="activecode" language="java">
	<input>
	  public class Program
	  {
	     public static void main(String args[])   // Main method
	     {

	     }
	  }
	</input>
      </program>
       
 </exercise>
        <exercise label="jlex_consecutive_number_program">
      <title>Consecutive Number Program</title>
      <statement>

      <p>
        Write a Java application that lets the user input a sequence of consecutive numbers.
        In other words,
        the program should let the user keep entering numbers as long as the current number is one greater than the previous number.
      </p>
    </statement>       
       <program label="jlex_consecutive_prg" interactive="activecode" language="java">
	<input>
	  public class Program
	  {
	     public static void main(String args[])   // Main method
	     {

	     }
	  }
	</input>
      </program>
       
 </exercise>
        <exercise label="jlex_negative_sentinel">
      <title>Min and Max Program</title>
      <statement>

      <p>
        Write a Java application that lets the user input a sequence of integers terminated by any negative value.
        The program should then report the largest and smallest values that were entered.
      </p>
    </statement>       
       <program label="jlex_pos_integers_loop_prg" interactive="activecode" language="java">
	<input>
	  public class Program
	  {
	     public static void main(String args[])   // Main method
	     {

	     }
	  }
	</input>
      </program>
       
 </exercise>
        <exercise label="jlex_how_many_guesses">
      <title>How Many Guesses</title>
      <statement>

      <p>
        How many guesses does it take to guess a secret number between 1 and <em>N</em>?
        For example, I'm thinking of a number between 1 and 100.
        I'll tell you whether your guess is too high or too low.
        Obviously, an intelligent first guess would be 50.
        If that's too low, an intelligent second guess would be 75.
        And so on.
        If we continue to divide the range in half,
        we'll eventually get down to one number.
        Because you can divide 100 seven times (50, 25, 12, 6, 3, 1, 0),
        it will take at most seven guesses to guess a number between 1 and 100.
        Write a Java Swing program that lets the user input a positive integer,
        <em>N</em>,
        and then reports how many guesses it would take to guess a
	number between 1 and <em>N</em>. Separate the Swing GUI from
	the rest of the program, so that an alternate command line
	interface (CLI) can be used, and put the CLI (instead of the
	Swing UI) into the version below.
      </p>
    </statement>       
       <program label="jlex_max_guesses_prg" interactive="activecode" language="java">
	<input>
	  public class Program
	  {
	     public static void main(String args[])   // Main method
	     {

	     }
	  }
	</input>
      </program>
       
 </exercise>
        <exercise label="jlex_fire_suppression_expiration">
      <title>Fire Extinguisher Expiration</title>
      <statement>

      <p>
        Suppose you determine that the fire extinguisher in your kitchen loses <em>X</em>
        percent of its foam every day.
        How long before it drops below a certain threshold (<em>Y</em> percent),
        at which point it is no longer serviceable?
        Write a Java Swing program that lets the user input the values
        <em>X</em> and <em>Y</em>
        and then reports how many weeks the fire extinguisher will
	last.
	Separate the Swing GUI from
	the rest of the program, so that an alternate command line
	interface (CLI) can be used, and put the CLI (instead of the
	Swing UI) into the version below.
      </p>
    </statement>       
       <program label="jlex_half_life_prg" interactive="activecode" language="java">
	<input>
	  public class Program
	  {
	     public static void main(String args[])   // Main method
	     {

	     }
	  }
	</input>
      </program>
       
 </exercise>
        <exercise label="jlex_computing_pi">
      <title>Computing Pi</title>
      <statement>

      <p>
        Leibnitz's method for computing <m>\pi</m> is based on the following convergent series:
        <men>
          \frac{\pi}{4} \; = 1 \; - \; \frac{1}{3} \; + \; \frac{1}{5} \; - \; \frac{1}{7} + \; \cdots
        </men>
        How many iterations does it take to compute <m>\pi</m> to a value between 3.141 and 3.142 using this series?
        Write a Java program to find out.
      </p>
    </statement>       
       <program label="jlex_leibnitz_pi_prg" interactive="activecode" language="java">
	<input>
	  public class Program
	  {
	     public static void main(String args[])   // Main method
	     {

	     }
	  }
	</input>
      </program>
       
 </exercise>
        <exercise label="jlex_square_root">
      <title>Compute Square Root</title>
      <statement>

      <p>
        Newton's method for calculating the square root of <em>N</em>
        starts by making a (nonzero) guess at the square root.
        It then uses the original guess to calculate a new guess,
        according to the following formula:
 <program language="java"><input>
guess = (( N / guess) + guess) / 2;
 </input></program>No matter how wild the original guess is,
        if we repeat this calculation,
        the algorithm will eventually find the square root.
        Write a square root method based on this algorithm.
        Then write a program to determine how many guesses are required to find the square roots of different numbers.
        Uses <c>Math.sqrt()</c> to determine when to terminate the guessing.
      </p>
    </statement>       
       <program label="jlex_newton_sqrt_prg" interactive="activecode" language="java">
	<input>
	  public class Program
	  {
	     public static void main(String args[])   // Main method
	     {

	     }
	  }
	</input>
      </program>
       
 </exercise>
        <exercise label="jlex_prime_finder">
      <title>Prime Finder</title>
      <statement>

      <p>
        Your employer is developing encryption software and wants you to develop a Java Swing Program that will display all of the primes less than <em>N</em>,
        where <em>N</em> is a number to be entered by the user.
        In addition to displaying the primes themselves,
        provide a count of how many there are. Separate the Swing GUI from
	the rest of the program, so that an alternate command line
	interface (CLI) can be used, and put the CLI (instead of the
	Swing UI) into the version below.
      </p>
    </statement>       
       <program label="jlex_prime_prg" interactive="activecode" language="java">
	<input>
	  public class Program
	  {
	     public static void main(String args[])   // Main method
	     {

	     }
	  }
	</input>
      </program>
       
 </exercise>
        <exercise label="jlex_multiplication_quiz">
      <title>Multiplication Quiz</title>
      <statement>

      <p>
        Your little sister asks you to help her with her multiplication and you decide to write a Java application that tests her skills.
        The program will let her input a starting number, such as 5.
        It will generate multiplication problems ranging from from
        <m>5 \times 1</m> to <m>5 \times 12</m>.
        For each problem she will be prompted to enter the correct answer.
        The program should check her answer and should not let her advance to the next question until the correct answer is given to the current question.
      </p>
    </statement>       
       <program label="jlex_multiplication_prg" interactive="activecode" language="java">
	<input>
	  public class Program
	  {
	     public static void main(String args[])   // Main method
	     {

	     }
	  }
	</input>
      </program>
       
 </exercise>
        <exercise label="jlex_ascii_bar_graph">
      <title>ASCII bar graph</title>
      <statement>

      <p>
        Write an application that prompts the user for four values and draws corresponding bar graphs using an ASCII character.
        For example,
        if the user entered 15, 12, 9, and 4, the program would draw
 <program language="java"><input>
******************
************
*********
****
 </input></program>
      </p>
    </statement>       
       <program label="jlex_bar_graph_prg" interactive="activecode" language="java">
	<input>
	  public class Program
	  {
	     public static void main(String args[])   // Main method
	     {

	     }
	  }
	</input>
      </program>
       
 </exercise>
        <exercise label="jlex_ascii_vertical_bars">
      <title>ASCII Vertical Bar Graph</title>
      <statement>

      <p>
        Revise the application in the previous problem so that the bar charts are displayed vertically.
        For example,
        if the user inputs 5, 2, 3, and 4, the program should display
 <program language="java"><input>
 **
 **       **
 **    ** **
 ** ** ** **
 ** ** ** **
-------------
 </input></program>
      </p>
    </statement>       
    <program label="jlex_side_bar_graph_prg" interactive="activecode" language="java">
	<input>
	  public class Program
	  {
	     public static void main(String args[])   // Main method
	     {

	     }
	  }
	</input>
      </program>
       
 </exercise>
        <exercise label="jlex_fibonacci_method">
      <title>Fibonacci Method</title>
      <statement>

      <p>
        The Fibonacci
          <idx><h>Fibonacci sequence</h></idx>
        sequence (named after the Italian mathematician Leonardo of Pisa,
        ca. 1200) consists of the numbers <m>0,1,1,2,3,5,8,13,\dots</m> in which each number
        (except for the first two)
        is the sum of the two preceding numbers.
        Write a method <c>fibonacci(N)</c> that prints the first
        <em>N</em> Fibonacci numbers.
      </p>
    </statement>       
       <program label="jlex_fibonacci_prg" interactive="activecode" language="java">
	<input>
	  public class Program
	  {
	     public static void main(String args[])   // Main method
	     {

	     }
	  }
	</input>
      </program>
       
 </exercise>
        <exercise label="jlex_half_life">
      <title>Half Life Program</title>
      <statement>

      <p>
        The Nuclear Regulatory Agency wants you to write a program that will help determine how long certain radioactive substances will take to decay.
        The program should let the user input two values:
        a string giving the substance's name and its half-life in years. (A substance's half-life is the number of years required for the disintegration of half of its atoms.) The program should report how many years it will take before there is less than 2 percent of the original number of atoms remaining.
      </p>
    </statement>       
       <program label="jlex_half_life_years_prg" interactive="activecode" language="java">
	<input>
	  public class Program
	  {
	     public static void main(String args[])   // Main method
	     {

	     }
	  }
	</input>
      </program>
       
 </exercise>
        <exercise label="jlex_extended_car_loan">
      <title>Better Car Loan Program</title>
      <statement>

      <p>
        Modify the <c>CarLoan</c> program so that it calculates a user's car payments for loans of different interest rates and different loan periods.
        Let the user input the amount of the loan.
        Have the program output a table of monthly payment schedules.
      </p>
    </statement>       
       <program label="jlex_car_loan_prg" interactive="activecode" language="java">
	<input>
	  public class Program
	  {
	     public static void main(String args[])   // Main method
	     {

	     }
	  }
	</input>
      </program>
       
 </exercise>
</exercises>
</section>
