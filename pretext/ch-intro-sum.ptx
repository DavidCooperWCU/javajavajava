<section xml:id="ch-intro-sum">
    <title>Chapter Summary</title>
    <subsection>
      <title>Technical Terms</title> 
      <p>
       <tabular>
       <row>
      <cell>action (behavior)</cell>
      <cell>argument</cell>
      <cell>attribute</cell>
       </row>
       <row>
      <cell>class</cell>
      <cell>class inheritance</cell>
      <cell>class hierarchy</cell>
       </row>
       <row>
      <cell>class method</cell>
      <cell>class variable</cell>
      <cell>compiler</cell>
       </row>
       <row>
      <cell>computer program</cell>
      <cell>constructor</cell>
      <cell>high-level language</cell>
       </row>
       <row>
      <cell>instance</cell>
      <cell>instance method</cell>
      <cell>instance variable</cell>
       </row>
       <row>
      <cell>interpreter</cell>
      <cell>method</cell>
      <cell>message</cell>
       </row>
       <row>
      <cell>object</cell>
      <cell>object code</cell>
      <cell>object oriented</cell>
       </row>
       <row>
      <cell>result</cell>
      <cell>source code</cell>
      <cell>subclass</cell>
       </row>
       <row>
      <cell>superclass</cell>
      <cell>Unified Modeling Language (UML)</cell>
      <cell>variable</cell>
       </row>
      </tabular>
    </p>
</subsection>
<subsection>
 <title>Important Points</title>
    <ul>
      <li>
        <p>
          A computer system generally consists of input/output devices,
          primary and secondary memory,
          and a central processing unit.
          A computer can only run programs in its own
          <em>machine language</em>,
          which is based on the <em>binary code</em>.
          Special programs known as <em>compilers</em>
          and <em>interpreters</em>
          translate <em>source code</em>
          programs written in a <em>high-level language</em>, such as Java,
          into machine language <em>object code</em> programs.
          Application software refers to programs designed to provide a particular task or service;
          <em>systems software</em> assists the user in using application software.
        </p>
      </li>
      <li>
        <p>
          The <em>client/server</em> model is a form of
          <em>distributed computing</em>
          in which part of the software for a task is stored on a <em>server</em>
          and part on <em>client</em> computers.
        </p>
      </li>
      <li>
        <p>
          HyperText Markup Language (HTML) is the language used to encode WWW documents.
        </p>
      </li>
      <li>
        <p>
          A Java program is a set of interacting objects.
          This is the basic metaphor of <em>object-oriented programming</em>.
        </p>
      </li>
      <li>
        <p>
          An <em>object</em> in a Java program encapsulates the program's <em>attributes</em>
          (or <em>variables</em>)
          and <em>actions</em>
          (or <em>methods</em>).
          A variable is a named memory location where data of appropriate type can be stored.
          A method is a named section of code that can be called
          (or invoked)
          when needed.
        </p>
      </li>
      <li>
        <p>
          An object's methods are used to pass messages to it.
        </p>
      </li>
      <li>
        <p>
          A <em>class</em> is an abstract template that defines the characteristics and behaviors of all objects of a certain type.
        </p>
      </li>
      <li>
        <p>
          An object is an <em>instance</em> of a class.
          An object has <em>instance methods</em>
          and <em>instance variables</em>.
          A <em>class method</em>
          (or <em>class variable</em>)
          is a method
          (or variable)
          that is associated with the class itself, not with its instances.
        </p>
      </li>
      <li>
        <p>
          A <em>constructor</em> is a special method that is used to construct objects.
        </p>
      </li>
      <li>
        <p>
          Java classes are organized into a
          <em>class hierarchy</em>,
          with the
<c>Object</c> class at the top of the hierarchy.
          For a given class,
          classes that occur below it in the hierarchy are called its <em>subclasses</em>,
          while classes that occur above it are called its <em>superclasses</em>.
        </p>
      </li>
      <li>
        <p>
          Classes <em>inherit</em> attributes and methods from their superclasses.
          This is known as <em>class inheritance</em>.
        </p>
      </li>
      <li>
        <p>
          The main principles of the object-oriented programming approach are as follows:
        </p>
        <ul>
          <li>
            <p>
              Divide and Conquer: Successful problem solving involves breaking a complex problem into objects.
            </p>
          </li>
          <li>
            <p>
              Encapsulation and Modularity: Each object should be assigned a clear role.
            </p>
          </li>
          <li>
            <p>
              Public Interface: Each object should present a clear public interface that determines how other objects will use it.
            </p>
          </li>
          <li>
            <p>
              Information Hiding: Each object should shield its users from unnecessary details of how it performs its role.
            </p>
          </li>
          <li>
            <p>
              Generality: Objects should be designed to be as general as possible.
            </p>
          </li>
          <li>
            <p>
              Extensibility: Objects should be designed so that their functionality can be extended to carry out more specialized tasks.
            </p>
          </li>
          <li>
            <p>
              Abstraction is the ability to group a large quantity of information into a single chunk so it can be managed as a single entity.
            </p>
          </li>
        </ul>
      </li>
    </ul>
  </subsection>  
</section>
