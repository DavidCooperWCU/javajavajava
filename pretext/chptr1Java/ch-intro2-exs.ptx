
<section xml:id="ch1-exs">
<title>Exercises</title> 
  <exercises>
    
    <exercisegroup>
      <introduction>
	<p>
          Fill in the blanks in each of the following statements.
	</p>
      </introduction>
      <exercise label="jpdd_fill_in_blank_class_def">
	<statement>
          <p>
            A Java class definition contains an object's <var width="20"/> and <var width="10"/>. 
          </p>
	</statement>
	<setup>
          <var>
            <condition string="([Ii][Nn][Ss][Tt][Aa][Nn][Cc][Ee] +[Vv][Aa][Rr][Ii][Aa][Bb][Ll][Ee][Ss])|[Ff][Ii][Ee][Ll][Dd][Ss]">
              <feedback>
		<p>Correct, Instance Variables or Fields are part of an object's class definition.</p>
              </feedback>
            </condition>
            <condition string="([Mm][Ee][Tt][Hh][Oo][Dd][Ss]">
              <feedback>
		<p>Wrong Order, Methods are part of an object's class definition, but this answer is expected in the second blank."</p>
              </feedback>
            </condition>
            <condition string=".*">
              <feedback>
		<p>Incorrect. Think about what the two parts of an Object are.</p>
              </feedback>
            </condition>
          </var>
          <var>
            <condition string="([Mm][Ee][Tt][Hh][Oo][Dd][Ss]">
              <feedback>
		<p>Correct, Methods are part of an object's class definition."</p>
              </feedback>
            </condition>
            <condition string="([Ff][Uu][Nn][Cc][Tt][Ii][Oo][Nn][Ss]">
              <feedback>
		<p>Not descriptive enough, functions do not have to be part of an object. 
		Expecting the word for a function that belongs to a class.</p>
              </feedback>

            </condition>
            <condition string="([Ii][Nn][Ss][Tt][Aa][Nn][Cc][Ee] +[Vv][Aa][Rr][Ii][Aa][Bb][Ll][Ee][Ss])|[Ff][Ii][Ee][Ll][Dd][Ss]">
              <feedback>
		<p>Wrong Order, Instance Variables or Fields are part of an object's class definition, but this answer is expected in the first blank.</p>
              </feedback>
            </condition>
            <condition string=".*">
              <feedback>
		<p>Incorrect. Think about what the two parts of an Object are.</p>
              </feedback>
            </condition>
          </var>
	</setup>
	
      </exercise>
      <exercise label="jpdd_fill_in_blank_method_def">
	<statement>
	  <p>
            A method definition contains two parts,
            a <var width="10"/> and a <var width="7"/>.
	  </p>
	</statement>
	<setup>
          <var>
            <condition string="([Hh][Ee][Aa][Dd][Ee][Rr])|([Hh][Ee][Aa][Dd][Ii][Nn][Gg])">
              <feedback>
		<p>Correct, A header is the first part of a method definition.</p>
              </feedback>
            </condition>
            <condition string="([Bb][Oo][Dd][Yy]">
              <feedback>
		<p>Wrong Order, a body is part of a method definition, but this answer is expected in the second blank."</p>
              </feedback>
            </condition>
            <condition string=".*">
              <feedback>
		<p>Incorrect. Think about what the two parts of an method are.</p>
              </feedback>
            </condition>
          </var>
          <var>
            <condition string="([Bb][Oo][Dd][Yy]">
              <feedback>
		<p>Correct, a body is part of a method definition."</p>
              </feedback>
            </condition>
            <condition string="([Hh][Ee][Aa][Dd][Ee][Rr])|([Hh][Ee][Aa][Dd][Ii][Nn][Gg])">
              <feedback>
		<p>Wrong Order, A header is the first part of a method definition, but this answer is expected in the first blank.</p>
              </feedback>
            </condition>
            
            <condition string=".*">
              <feedback>
		<p>Incorrect. Think about what the two parts of an method are.</p>
              </feedback>
            </condition>
          </var>
	</setup>
      </exercise>
    </exercisegroup>
    
    <exercise label="jpdd_matching_java_definitions">
      <statement>
	<p>
          Explain the difference between each of the following pairs of concepts.
	</p>
      </statement>
      <matches>
	<match>
	  <order>1</order>
          <premise><em>single-line</em> comment</premise>
          <response>begins with <c>//</c> and is placed at the end of or immediately before a line of code to clarify the line </response>
	</match>
	<match>
	  <order>2</order>
          <premise><em>multiline</em> comment</premise>
          <response>provides clarification as well as important
	  information about the program. It may extend over several
	  lines and it begins with <c>/*</c> and ends with <c>*/</c></response>
	</match>
	<match>
	  <order>3</order>
          <premise><em>compiling</em> a program</premise>
          <response>translates it from Java language statements into Java bytecode</response>
	</match>
	<match>
	  <order>4</order>
          <premise><em>running</em> a program</premise>
          <response>uses a Java Virtual Machine (JVM) to interpret and execute the bytecode</response>
	</match>
	<match>
	  <order>5</order>
	  <premise><em>source code</em> file</premise>
          <response>a program file written in Java language statements</response>
	</match>
	<match>
	  <order>6</order>
          <premise><em>bytecode</em> file</premise>
          <response>a file that can be understood by the JVM</response>
	</match>
	<match>
	  <order>7</order>
          <premise><em>syntax</em></premise>
          <response>the set of rules that determine whether a particular
	  statement is correctly formulated</response>
	</match>
	<match>
	  <order>8</order>
          <premise><em>semantics</em></premise>
          <response>the meaning of a program statement â€“ that is, what action the statement takes</response>
	</match>
	<match>
	  <order>9</order>
          <premise><em>Syntax error</em></premise>
          <response>an incorrectly formulated statement that cannot be read by the Java compiler</response>
	</match>
	<match>
	  <order>10</order>
          <premise><em>semantic error</em></premise>
          <response>an error in the logic of the program that will
	  cause it to run incorrectly, but will not be detected by the compiler. The program may still run, but will not produce the desired results</response>
	</match>
	<match>
	  <order>11</order>
          <premise><em>data</em></premise>
          <response>ways of representing information needed to run the
	  program</response>
	</match>
	<match>
	  <order>12</order>
          <premise><em>methods</em></premise>
          <response>sections of code that manipulate information and perform particular actions</response>
	</match>
	<match>
	  <order>13</order>
          <premise><em>variable</em></premise>
          <response>a memory location in which a datum, such as an
	  integer or a character, may be stored</response>
	</match>
	<match>
	  <order>14</order>
          <premise><em>algorithm</em></premise>
          <response>a step-by-step description of the solution to a
	  problem</response>
	</match>
	<match>
	  <order>15</order>
          <premise><em>pseudocode</em></premise>
          <response>a hybrid between English and Java code that does
	  not pay attention to the Java syntax. It makes translating a program into Java code easier</response>
	  </match><match>
	  <order>16</order>
          <premise><em>Java code</em></premise>
          <response>Text that follows Java syntax and can be compiled
	  by the JVM if written correctly</response>
	</match>
	<match>
	  <order>17</order>
          <premise><em>method definition</em></premise>
          <response>the task a particular method is written to
	  perform</response>
	</match>
	<match>
	  <order>18</order>
          <premise><em>method invocation</em></premise>
          <response>the calling of a particular method to perform its
	  designated task</response>
	</match>
	
	.
	
      </matches>
    </exercise>

    <exercisegroup>
      <introduction>
	<p>
          For each of the following,
	  identify it as either a syntax error or a semantic error, and
	  identify the best explanation.
	</p>
      </introduction>
      <exercise label="jpdd_syntax_vs_semantics_mc1">
	
	<statement>
          <p>
            Write a class header as <c>public Class MyClass</c>.
          </p>
	</statement>
	<choices>
	  <choice><statement>syntax error, <c>MyClass</c> isn't descriptive enough.</statement></choice>
	  <choice correct="yes"><statement>syntax error, <c>Class</c> is not a keyword. the
	  keyword <c>class</c> starts with a lowercase character</statement></choice>
	  <choice><statement> semantic error, the class isn't always mine.</statement> </choice>
	  <choice><statement> semantic error, if the class is mine, then it should be
	  private. </statement></choice>
	</choices>
      </exercise>
      <exercise label="jpdd_syntax_vs_semantics_mc2">
	
	<statement>
          <p>
            Define the <c>init()</c> header as <c>public vid init()</c>.
          </p>
	</statement>
	<choices>
	  <choice correct = "yes"><statement>syntax error, <c>vid</c>is not a keyword understood by
	  the compiler</statement> </choice>
	  <choice><statement>syntax error, constructors don't have a return type.</statement> </choice>
	  <choice><statement> semantic error, returning a video instead of nothing
	  doesn't make sense. </statement> </choice>
	  <choice><statement> semantic error, public methods can be called by any class. </statement> </choice>
	</choices>
      </exercise>
      <exercise>
	
	<statement>
          <p>
            Print a string of five asterisks by <c>System.out.println("***");</c>.
          </p>
	</statement>
	<choices>
	  <choice><statement>syntax error, the statement doesn't return anything</statement> </choice>
	  <choice><statement>syntax error, semicolons end every statement</statement> </choice>
	  <choice correct = "yes"><statement> semantic error, prints three asterisks
	  instead of five. </statement> </choice>
	  <choice><statement> semantic error, prints a newline after the string. </statement> </choice>
	</choices>
      </exercise>
      <exercise label="jpdd_syntax_vs_semantics_mc3">
	<statement>
          <p>
            Forget the semicolon at the end of a <c>println()</c> statement.
          </p>
	</statement>
	<choices>
	  <choice><statement>syntax error, the statement doesn't return anything</statement> </choice>
	  <choice correct = "yes"><statement>syntax error, semicolons are needed to  end every statement</statement> </choice>
	  <choice><statement> semantic error, we don't know what the <c>println()</c> prints. </statement> </choice>
	  <choice><statement> semantic error, prints a newline after the string. </statement> </choice>
	</choices>
      </exercise>
      <exercise label="jpdd_syntax_vs_semantics_mc4">
	<statement>
          <p>
            Variables <c>n</c> and <c>m</c> have been initialized as numeric data
	    types. Calculate the sum of the two numbers as <c>n  -  m</c>.
          </p>
	</statement>
	<choices>
	  <choice ><statement>syntax error, expressions can be part of larger statements</statement> </choice>
	  <choice><statement>syntax error, semicolons are needed to end every statement</statement> </choice>
	  <choice correct = "yes"><statement> semantic error, It is correct syntax but the difference
	  of <c>n</c> and <c>m</c> will be calculated instead of the sum. </statement> </choice>
	  <choice><statement> semantic error, n and m could be any number that can be
	  represented by the data type</statement> </choice>
	</choices>
      </exercise>
    </exercisegroup>
    <ol>
      <li>
	<p>
	  Suppose you have a Java program stored in a file named <c>Test.java</c>. Describe the 
	  compilation and execution process for this program,
	  naming any other files that would be created.
	</p>
      </li>
    </ol>
    <exercisegroup>
      <introduction>
	<p>
	  Consider the following algorithm:
	  <c>
	    0. Print N.
	    1. If N equals 1, stop.
	    2. If N is even, divide it by 2,
	    3. Otherwise, triple it and add 1.
	    4. Go to step 0.
	  </c>
	</p>
      </introduction>
      <exercise  label="jpdd_algorithm_tracing_1">
	<statement>
	  
	  <p>
	    Suppose <em>N</em> is 7.
	    Select the sequence of numbers would be output by the above pseudocode algorithm.
	  </p>
	</statement>
	<choices>
	  <choice><statement>7,3,1</statement> </choice>
	  <choice correct="yes"><statement>7,22,11,34,17,52,26,13,40,20,10,5,16,8,4,2,1</statement> </choice>
	  <choice><statement> 7,20,10,5,14,7,... </statement> </choice>
	  <choice><statement> 7,16,8,4,2,1</statement> </choice>
	</choices>
      </exercise>
      <exercise label="jpdd_algorithm_tracing_2">
	<statement>
	  
	  <p>
	    Suppose <em>N</em> is 6.
	    Select the sequence of numbers would be output by the above pseudocode algorithm.
	  </p>
	</statement>
	<choices>
	  <choice><statement>6,3,1</statement> </choice>
	  <choice correct="yes"><statement>6,3,10,5,16,8,4,2,1</statement> </choice>
	  <choice><statement> 6,19,9,4,13,6,... </statement> </choice>
	  <choice><statement> 6,3,8,4,2,1</statement> </choice>
	</choices>
      </exercise>
    </exercisegroup>
    <exercise label="jpdd_algorithm_tracing_3">
      <statement>
	<p>
	  Suppose <em>N</em> is 5 and <em>M</em> is 3.
	  What value would be reported by the following pseudocode algorithm? <var  width="5" />
	  In general, what quantity does this algorithm calculate? <var  width="10"/>
	</p>
	
	<c>
	  0. Write 0 on a piece of paper.
	  1. If M equals 0, report what's on the paper and stop.
	  2. Add N to the quantity written on the paper.
	  3. Subtract 1 from M.
	  4. Go to step 1.
	</c>
      </statement>
      <setup>
	<var>
          <condition string="15">
            <feedback>
              <p>Correct, the paper has 0 then 5 and M becomes 2, then 10 and M becomes 1, then 15 and M becomes 0, and then the program stops after reporting 15."</p>
            </feedback>
          </condition>
          <condition string=".*">
            <feedback>
              <p>Incorrect. Make sure you are updating the value on the paper and the value of M at the appropriate times.</p>
            </feedback>
          </condition>
	</var>
	<var>
          <condition string="(N *([*x]| times ) *M)|(M *([*x]| times ) *N)">
            <feedback>
              <p>Correct, the pseudocode computes summation of the number N, M times, which is N * M. "</p>
            </feedback>
          </condition>
          <condition string=".*">
            <feedback>
              <p>Incorrect. Think about the relationship between N, M and the result.</p>
            </feedback>
          </condition>
	</var>
      </setup>
      

    </exercise>
    <exercise label="jpdd_puzzle_problem_1">
      <statement>
	<p><term>Puzzle Problem:</term>  You are given two different length ropes that have the characteristic 
	that they both take exactly one hour to burn.
	However, neither rope burns at a constant rate.
	Some sections of the ropes burn very fast;
	other sections burn very slowly.
	All you have to work with is a box of matches and the two ropes.
	Describe an algorithm that uses the ropes and the matches to calculate when exactly 45 minutes have elapsed.
	</p>
      </statement>
      <blocks indentation="hide">
	<block>
	  Light both ends of the first string and one end of
	  the second string at the same time.
	</block>
	<block>
	  When the first string is finished burning, light the unlit end of the second string.
	</block>
	<block>
	  When the second string is finished burning
	  exactly 45 minutes will have passed.
	</block>
	<block correct="no">
	  Light both ends of the first string at the same time.
	</block>
	<block correct="no">
	  Light one end of the second string.
	</block>
	<block correct="no">
	  When the first string is half of it's original length, light both ends of the second string at the same time.
	</block>
      </blocks>
    </exercise>

    <ol>
      <li>
	<p>
	  Write a <em>header</em> for a public method named <c>getName</c>.
	</p>
      </li>
      <li>
	<p>
	  Design a class to represent a geometric rectangle with a given length and width,
	  such that it is capable of calculating the area and the perimeter of the rectangle.
	</p>
      </li>
    </ol>
    <exercise label="jpdd_println_coding_1_rhyme">
      <statement>
	<p>
	  Modify the <c>OldMacDonald</c> class to
	  <q>sing</q>
	  either
	  <q>Mary Had a Little Lamb</q>
	  or your favorite nursery rhyme.
	</p>
      </statement>
      <program label="jpdd_nursery_rhyme" interactive="activecode" language="java">
	<input>
	  public class NurseryRhyme
	  {
	  public static void main(String args[])   // Main method
	  {
          System.out.println("Old MacDonald had a farm");
          System.out.println("E I E I O.");
          System.out.println("And on his farm he had a duck.");
          System.out.println("E I E I O.");
          System.out.println("With a quack quack here.");
          System.out.println("And a quack quack there.");
          System.out.println("Here a quack, there a quack,");
          System.out.println("Everywhere a quack quack.");
          System.out.println("Old MacDonald had a farm");
          System.out.println("E I E I O.");
	  }  // End of main
	  }  // End of NurseryRhyme
	</input>
	<tests>
	  <![CDATA[
		   import static org.junit.Assert.*;
                   import org.junit.*;
                   import java.io.*;
                   import java.util.List;
                   import java.util.ArrayList;
                   import java.util.Arrays;

public class RunestoneTests extends CodeTestHelper
{
public RunestoneTests()
{
super("NurseryRhyme");
}
@Test
public void test1()
{
String target = "Old MacDonald had a farm";
boolean passed = checkCodeNotContains("doesn't contain line 1 or 9 of Old MD",target);
assertTrue(passed);
}
@Test
public void test2()
{
String target = "E I E I O.";
boolean passed = checkCodeNotContains("doesn't contain line 2,4,or 10 of Old MD",target);
assertTrue(passed);
}
@Test
public void test3()
{
String target = "And on his farm he had a duck.";
boolean passed = checkCodeNotContains("doesn't contain line 3 of Old MD",target);
assertTrue(passed);
}
public void test4()
{
String target = "With a quack quack here.";
boolean passed = checkCodeNotContains("doesn't contain line 5 of Old MD",target);
assertTrue(passed);
}
public void test5()
{
String target = "And a quack quack there.";
boolean passed = checkCodeNotContains("doesn't contain line 6 of Old MD",target);
assertTrue(passed);
}
public void test6()
{
String target = "Here a quack, there a quack,";
boolean passed = checkCodeNotContains("doesn't contain line 7 of Old MD",target);
assertTrue(passed);
}
public void test7()
{
String target = "Everywhere a quack quack.";
boolean passed = checkCodeNotContains("doesn't contain line 8 of Old MD",target);
assertTrue(passed);
}


	  ]]>
	</tests>
      </program>
      
    </exercise>
    <exercise label="jpdd_println_coding_2_paterns">
      <statement>
	<p>
	  Define a Java class,
	  called <c>Patterns</c>, modeled after <c>OldMacDonald</c>, that will print the following patterns of asterisks,
	  one after the other heading down the page:
	  <c>
	    *****     *****   *****
	     ****     *   *   * * *
	      ***     *   *    * *
               **     *   *   * * *
                *     *****   *****
	  </c>
	</p>
      </statement>
      <program label="jpdd_patterns" interactive="activecode" language="java">
	<input>
	  
	</input>
	<tests>
	  <![CDATA[
		   import static org.junit.Assert.*;
                   import org.junit.*;
                   import java.io.*;
                   import java.util.Scanner;
                   import java.util.ArrayList;
                   import java.util.Arrays;

public class RunestoneTests extends CodeTestHelper
{
public RunestoneTests()
{
super("Patterns");
}

protected String getStaticMethodOutputFull(String className,String methodName, Object[] arguments)// throws IOException
{
try {
Class<?> locC = Class.forName(className);
methods = locC.getDeclaredMethods();
Method m = null;
for (Method n : methods) {
if (n.getName().equals(methodName)) {
if (checkStaticMethod(n) && checkReturnType(n,
"void")) {
m = n;
break;
}
}
}
if (m == null) {
return "No method called " + methodName + " in class " + className);
}


setupStreams();

if (arguments != null)
if (checkParameters(m, arguments) || m.getName().equals("main"))
m.invoke(null, arguments);
else
errorMessage = "Arguments incorrect (3)";
else
m.invoke(null);

String output = outContent.toString();
cleanUpStreams();
return output;
} catch (Exception e) {
if (errorMessage.equals("")) {
errorMessage = stackToString(e);
// errorMessage += "\nMethod " + m.getName() + " could not be invoked (3)";

}
}

if (errorMessage.equals("")) {
// errorMessage = stackToString(e);
errorMessage = "Method " + m.getName() + " with parameters " + Arrays.toString(arguments)
+ " does not exist";
}

cleanUpStreams();
return errorMessage;
}



}

private String expectedShapes =
"*****\n" +
" ****\n" +
"  ***\n" +
"   **\n" + 
"    *\n" +
"\n" +
"*****\n" +
"*   *\n" +
"*   *\n" +
"*   *\n" +	       
"*****\n" +
"\n" +
"*****\n" +
"* * *\n" +
" * * \n" +
"* * *\n" +
"*****\n";

@Test
public void testShapes()
{
Scanner expected = new Scanner(expectedShapes);
Scanner actual = new
Scanner(getStaticMethodOutputFull("Patterns","main",
null));
boolean passes = true;
int line = 1;
while (expected.hasNextLine() &&
actual.hasNextLine()) {
String expect = expected.nextLine();
String act = actual.nextLine();
passes = passes && getResults(expect,act,"line " + line + "
matches");
++line;
}
while (expected.hasNextLine()) {
String expect = expected.nextLine();
String act = "";
passes = passes && getResults(expect,act,"line " + line + "
missing");
++line;
}
while (actual.hasNextLine()) {
String expect = "";
String act = actual.nextLine();
passes = passes && getResults(expect,act,"line " + line + "
extra");
++line;
}


assertTrue(passes);
}




}
	  ]]>
	</tests>
      </program>
    </exercise>
    <exercise label="jpdd_println_coding_3_initials">
      <statement>
	<p>
	  Write a Java class that prints your initials as block letters,
	  as shown here:
	</p>
	<c>
	  ****** *     *
	  *    * **   **
	  *    * * * * *
	  ****** * * * *
	  **     *  *  *
	  * *    *     *
	  *  *   *     *
	  *   *  *     *
	</c>
      </statement>
      <program label="jpdd_initials" interactive="activecode" language="java">
	<input>
	  
	</input>
      </program>
    </exercise>
    <exercise label="jpdd_challenge_1_temperature">
      <statement>
	<p><term>Challenge:</term> Define a class that represents a <c>Temperature</c> object.
	It should store the current temperature in an instance variable of type <c>double</c>, 
	and it should have a <c>public</c> constructor <c>Temperature(double
	t)</c> that initializes the
	instance variable, and one <c>public</c> method, <c>getTemp()</c>, which <c>return</c>s the value of the instance variable.
	Use the <c>Riddle</c> class as a model.
	</p>
      </statement>
      <program label="jpdd_temperature" interactive="activecode" language="java">
	<input>
	  public class Temperature {

	  }
	</input>
	<tests>
          <![CDATA[
                   import static org.junit.Assert.*;
                   import org.junit.*;
                   import java.io.*;
                   import java.util.List;
                   import java.util.ArrayList;
                   import java.util.Arrays;

public class RunestoneTests extends CodeTestHelper
{

public RunestoneTests() {
super("Temperature");
} 
@Test
public void test1()
{
String target = "1 Private";
String actual = testPrivateInstanceVariables();
boolean passed =
recordResult(target,actual,"only 1 private field");
assertTrue(passed);
}
@Test
public void test1b()
{
boolean found = true;
String[] types = {"double"};
String fieldTypes =
testInstanceVariableTypes(types);
if (fieldTypes.trim().equals("") || fieldTypes.equals("fail")) {
found = false;
} else {
String[] typeNames = fieldTypes.trim().split(" ");
if(typeNames.length != 1 || !typeNames[0].equals("double")) {
found = false;
}
if(types[0] != null) {
found = false;
}

}

expect(true,found,"has exactly 1 double field");
}

@Test
public void test2()
{
try {
double testValue = 5.0;
Object[] testValues = {testValue};
setDefaultTestValues(testValues);
Object t = getTestInstance();
Method m = t.getClass().getMethod("getTemp",null);
double target = testValue;
expect(target,(Double)m.invoke(t),
"constructor and getter work for " + testValue);
} catch(Exception e) {
expect(String.valueOf(target),"exception",
"constructor and/or getter don't work");
}
}
@Test
public void test2b()
{
try {
double testValue = 100.0;
Object[] testValues = {testValue};
setDefaultTestValues(testValues);
Object t = getTestInstance();
Method m = t.getClass().getMethod("getTemp",null);
double target = testValue;
expect(target,(Double)m.invoke(t),
"constructor and getter work for " + testValue);
} catch(Exception e) {
expect(String.valueOf(target),"exception",
"constructor and/or getter don't work");
}
}


@Test
public void test3()
{
try {
double testValue = -60.0;
Object[] testValues = {testValue};
setDefaultTestValues(testValues);
Object t = getTestInstance();
Method m = t.getClass().getMethod("getTemp",null);
double target = testValue;
expect(target,(Double)m.invoke(t),
"constructor and getter work for " + testValue);
} catch(Exception e) {
expect(String.valueOf(target),"exception",
"constructor and/or getter don't work");
}
}
}
          ]]>
	</tests>
      </program>
    </exercise>
  </exercises>
  <ol>
    <li>
      <p><term>Challenge:</term> Define a class named <c>TaxWhiz</c> that computes the sales tax for a purchase.
      It should store the current tax rate as an instance variable.
      Following the model of the <c>Riddle</c> class,
      you can initialize the rate using a <c>TaxWhiz()</c> constructor.
      This class should have one <c>public</c> method, <c>calcTax(double purchase)</c>, 
      which will <c>return</c> a <c>double</c>, whose value is <c>purchases</c> times the tax rate.
      For example, if the tax rate is 4 percent, 0.04, and the purchase is $100,
      then <c>calcTax()</c> should return 4.0.
      </p>
    </li>
    <li>
      <p>
	What is stored in the variables <c>num1</c> and <c>num2</c> after the following statements are executed?
	<c>
	  int num1 = 5;
	  int num2 = 8;
	  num1 = num1 + num2;
	  num2 = nmm1 + num2;
	</c>
      </p>
    </li>
    <li>
      <p>
	Write a series of statements that will declare a 
	variable of type <c>int</c> called <c>num</c> and store in it the difference between 61 and 51. 
      </p>
    </li>
    <li>
      <p>
	Modify the UML diagram of the <c>Riddle</c> class to 
	contain a method named <c>getRiddle()</c> that would return both the riddle's question and answer.
      </p>
    </li>
    <li>
      <p>
	Draw a UML class diagram representing the following class: The name of the class is <c>Circle</c>. It has one attribute,
	a <c>radius</c> that is represented by a <c>double</c> value.
	It has one operation, <c>calculateArea()</c>, which 
	returns a <c>double</c>. Its attributes should be designated as private and its method as public.
      </p>
    </li>
    <li>
      <p>
	To represent a triangle we need attributes for each of its three sides and operations to create a triangle,
	calculate its area, and calculate its perimeter.
	Draw a UML diagram to represent this triangle.
      </p>
    </li>
    <li>
      <p>
	Try to give the Java class definition for the class described 
	in UML diagram shown here.
	<image width="50%" source="chptr01/umlexerc.png"/>
      </p>
    </li>
    <li>
      <p><term>Puzzle Problem:</term> A polar bear that lives right at the North Pole can walk due south for one hour,
      due east for one hour,
      and due north for one hour, and end up right back where it started.
      Is it possible to do this anywhere else on earth?
      Explain.
      </p>
    </li>
    <li>
      <p><term>Puzzle Problem:</term>  Lewis Carroll,
      the author of <em>Alice in Wonderland</em>,
      used the following puzzle to entertain his guests: A captive queen weighing 195 pounds,
      her son weighing 90 pounds,
      and her daughter weighing 165 pounds,
      were trapped in a very high tower.
      Outside their window was a pulley and rope with a basket fastened on each end.
      They managed to escape by using the baskets and a 75-pound weight they found in the tower.
      How did they do it?
      The problem is that anytime the difference in weight between the two baskets is more than 15 pounds,
      someone might get hurt.
      Describe an algorithm that gets them down safely.
      </p>
    </li>
    <li>
      <p><term>Puzzle Problem:</term> Here's another Carroll favorite: A farmer needs to cross a river with his fox, goose,
      and a bag of corn.
      There's a rowboat that will hold the farmer and one other passenger.
      The problem is that the fox will eat the goose if they are left alone on the river bank,
      and the goose will eat the corn if they are left alone on the river bank.
      Write an algorithm that describes how he got across without losing any of his possessions.
      </p>
    </li>
    <li>
      <p><term>Puzzle Problem:</term> Have you heard this one?
      A farmer lent the mechanic next door a 40-pound weight.
      Unfortunately,
      the mechanic dropped the weight and it broke into four pieces. The good news is that,
      according to the mechanic,
      it is still possible to use the four pieces to weigh any quantity between one 
      40 pounds on a balance scale. How much did each of the four pieces weigh? 
      (<em>Hint</em>: You can weigh a 4-pound object on a balance by putting a 5-pound 
      weight on one side and a 1-pound weight on the other.)
      </p>
    </li>
    <li>
      <p>
	Suppose your little sister asks you to show her how to use a 
	pocket calculator so that she can calculate her homework average in her science course.
	Describe an algorithm that she can use to find the average of 10 homework grades.
      </p>
    </li>
    <li>
      <p>
	A Caesar cipher is a secret code in which each letter of the alphabet is shifted by
	<em>N</em> letters to the right,
	with the letters at the end of the alphabet wrapping around to the beginning.
	For example,
	if <em>N</em> is 1, when we shift each letter to the right,
	the word <em>daze</em> would be written as <em>ebaf</em>.
	Note that the <em>z</em> has wrapped around to the beginning of the alphabet.
	Describe an algorithm that can be used to create a Caesar encoded message with a shift of 5.
      </p>
    </li>
    <li>
      <p>
	Suppose you received the message,
	<q>sxccohv duh ixq,</q>
	which you know to be a Caesar cipher.
	Figure out what it says and then describe an algorithm that will always find what the 
	message said regardless of the size of the shift that was used.
      </p>
    </li>
    <li>
      <p>
	Suppose you're talking to your little brother on the phone and he wants you to calculate his homework average.
	All you have to work with is a piece of chalk and a very small chalkboard<mdash/>big enough to write one four-digit number.
	What's more,
	although your little brother knows how to read numbers,
	he doesn't know how to count very well so he can't tell you how many grades there are.
	All he can do is read the numbers to you.
	Describe an algorithm that will calculate the correct average under these conditions.
      </p>
    </li>
  </ol>
</section>
