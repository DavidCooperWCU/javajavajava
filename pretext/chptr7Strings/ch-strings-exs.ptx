<section xml:id="ch-strings-exs">
  <title>Exercises</title>

  <exercises>
  <title>String Exercises</title>
    <p>
      <term>Note:</term> For programming exercises, first draw a UML class diagram describing 
      all classes and their inheritance relationships and/or associations.
    </p>
        <exercise label="jstx_matching_java_definitions">
      <title>Java Concept Matching</title>
      <statement>
	<p>
          Explain the difference between each of the following pairs of terms.
	</p>
      </statement>
      <matches>
	<match>
	  <order>1</order>
          <premise><em>data structure</em></premise>
          <response>Collection of data (often of the same type) that
	  is organized in some way, such as a list </response>
	</match>
	<match>
	  <order>2</order>
          <premise><em>data type</em></premise>
          <response>the way that binary data is interpreted, such as
	  an integer, character, or boolean.</response>
	</match>
	<match>
	  <order>3</order>
          <premise><c>StringBuffer</c></premise>
          <response>a mutable object made up of a sequence of
	  characters with methods to mutate and access the sequence of
	  characters within.</response>
	</match>
	<match>
	  <order>4</order>
          <premise><c>String</c></premise>
          <response>an immutable sequence of characters with methods
	  to access the sequence of characters within.</response>
	</match>
	<match>
	  <order>5</order>
	  <premise><c>StringTokenizer</c> </premise>
          <response>an object that splits a <c>String</c> into tokens
	  based on a set of delimiter characters. The delimiter
	  characters are typically not returned as tokens. </response>
	</match>
	<match>
	  <order>6</order>
          <premise><em>zero indexing</em> </premise>
          <response>First character of a String starts at index zero</response>
	</match>
	<match>
	  <order>7</order>
          <premise><em>unit indexing</em></premise>
          <response>First character of a String starts at index one</response>
	</match>
	<match>
	  <order>8</order>
          <premise><em>declaring a variable</em></premise>
          <response>allocating memory for a particular data type and
	  giving it an identifier.</response>
	</match>
	<match>
	  <order>9</order>
          <premise><em>instantiating a</em> <c>String</c></premise>
          <response>allocating memory for the String object using the
	  <c>new</c> keyword or implicitly when performing concatenation.</response>
	</match>
	<match>
	  <order>10</order>
          <premise><c>Font</c> object</premise>
          <response>an object that holds the name, size, and style of
	  a font.</response>
	</match>
	<match>
	  <order>11</order>
          <premise><c>FontMetrics</c> object</premise>
          <response>an object that holds a reference to a <c>Font</c>
	  object as well as methods for accessing properties such as
	  the pixel width of a particular letter.</response>
	</match>
      </matches>
    </exercise>

    <exercisegroup>
     
      <introduction>
        <p>
          Fill in the blanks.
        </p>
      </introduction>

            <exercise label="jstx_blank_index">
      <title></title>
      <statement>

              <p>
                When the first character in a string has index 0, this
		is known as <var width="18" /> .
              </p>
            </statement>       
 <setup>
          <var case="insensitive">
            <condition string="zero indexing">
              <feedback>
		<p>Correct</p>
              </feedback>
            </condition>
	    
	    
            <condition string=".*">
              <feedback>
		<p>Try again.</p>
              </feedback>
            </condition>
          </var>
	</setup>        
 </exercise>
            <exercise label="jstx_blank_quotes">
      <title></title>
      <statement>

              <p>
                A sequence of characters enclosed within quotes is known as a <var width="18" /> .
              </p>
            </statement>       
 <setup>
          <var case="insensitive">
            <condition string="String literal">
              <feedback>
		<p>Correct</p>
              </feedback>
            </condition>
	    
	    
	    
            <condition string=".*">
              <feedback>
		<p>Try again. Look at the GUI section of this chapter.</p>
              </feedback>
            </condition>
          </var>
	</setup>          
 </exercise>
          </exercisegroup>
      <exercise label="jstx_string_search">
      <title></title>
      <introduction>

        <p>
          Given the <c>String</c><em>str</em> with the value
          <q>to be or not to be that is the question,</q>
          write Java expressions to extract each of the substrings shown below.
          For each substring, provide two sets of answers.
          One that uses the actual index numbers of the substrings<mdash/>for example,
          the first
          <q>to</q>
          goes from 0 to 2<mdash/>and a second more general solution 
          that will also retrieve the substring from the following string
          <q>it is easy to become what you want to become.</q>
          (<em>Hint</em>: In the second case,
          use <c>length()</c> and <c>indexOf()</c> along with <c>substring()</c> in your expressions.
          If necessary,
          you may use local variables to store intermediate results.
          The answer to (a) is provided as an example.)
        </p>
      </introduction>
            <task label="jstx_locate_first_to">
      <title></title>
      <statement>

              <p>
                the first
                <q>to</q>
                in the string
 <program language="java"><input>
str.substring(0, 2)                            // Answer 1
str.substring(
     str.indexOf("to"), str.indexOf("to") + 2) // Answer 2
 </input></program>
              </p>
            </statement>       
 <response />       
 </task>
            <task label="jstx_locate_last_to">
      <title></title>
      <statement>

              <p>
                the last
                <q>to</q>
                in the string
              </p>
            </statement>       
 <response />       
 </task>
            <task label="jstx_locate_first_be">
      <title></title>
      <statement>

              <p>
                the first
                <q>be</q>
                in the string
              </p>
            </statement>       
 <response />       
 </task>
            <task label="jstx_locate_last_be">
      <title></title>
      <statement>

              <p>
                the last
                <q>be</q>
                in the string
              </p>
            </statement>       
 <response />       
 </task>
            <task label="jstx_locate_first_four_chars">
      <title></title>
      <statement>

              <p>
                the first four characters in the string
              </p>
            </statement>       
 <response />       
 </task>
            <task label="jstx_locate_last_four_chars">
      <title></title>
      <statement>

              <p>
                the last four characters in the string
              </p>
            </statement>       
 <response />       
 </task>  
 </exercise>
      <exercise label="jstx_syntax_errors">
      <title>Locate Syntax Errors</title>
      <introduction>

        <p>
          Identify the syntax errors in each of the following,
          assuming that <c>s</c> is the literal string
          <q>exercise</q>:
        </p>
      </introduction>
            <task label="jstx_char_at_hello">
      <title>char at hello</title>
      <statement>

              <p>
                <c>s.charAt("hello")</c>
              </p>
            </statement>       
 <response />       
 </task>
            <task label="jstx_index_of_ten">
      <title>index of 10</title>
      <statement>

              <p>
                <c>s.indexOf(10)</c>
              </p>
            </statement>       
 <response />       
 </task>
            <task label="jstx_substring_er">
      <title>substring er</title>
      <statement>

              <p>
                <c>s.substring("er")</c>
              </p>
            </statement>       
 <response />       
 </task>
            <task label="jstx_last_index_er">
      <title>last index er</title>
      <statement>

              <p>
                <c>s.lastIndexOf(er)</c>
              </p>
            </statement>       
 <response />       
 </task>
            <task label="jstx_string_length">
      <title>String length</title>
      <statement>

              <p>
                <c>s.length</c>
              </p>
            </statement>       
 <response />       
 </task>
              
 </exercise>
      <exercisegroup>
      <title>Evaluate String Expressions</title>
      <introduction>

        <p>
          Evaluate each of the following expressions,
          assuming that<c>s</c> is the literal string <q>exercise</q>:
        </p>
      </introduction>
            <exercise label="jstx_eval_char_at_five">
      <title></title>
      <statement>

              <p>
                <c>s.charAt(5)</c>
              </p>
            </statement>       
 <response />       
 </exercise>
            <exercise label="jstx_eval_index_of_er">
      <title></title>
      <statement>

              <p>
                <c>s.indexOf("er")</c>
              </p>
            </statement>       
 <response />       
 </exercise>
            <exercise label="jstx_eval_substring_five">
      <title></title>
      <statement>

              <p>
                <c>s.substring(5)</c>
              </p>
            </statement>       
 <response />       
 </exercise>
            <exercise label="jstx_eval_last_index_e">
      <title></title>
      <statement>

              <p>
                <c>s.lastIndexOf('e')</c>
              </p>
            </statement>       
 <response />       
 </exercise>
            <exercise label="jstx_eval_length">
      <title></title>
      <statement>

              <p>
                <c>s.length()</c>
              </p>
            </statement>       
 <response />       
 </exercise>
              
      </exercisegroup>
      
      <exercise label="jstx_code_case_insensitive_equals">
      <title>Code Case Insensitive Equals</title>
      <statement>

        <p>
          Write your own <c>equalsIgnoreCase()</c> method using only other <c>String</c> methods.
        </p>
      </statement>       
 <response />       
 </exercise>
      <exercise label="jstx_code_str_equal">
      <title>Write Strings Equal</title>
      <statement>

        <p>
          Write your own <c>String</c> equality method without using <c>String</c>.equals() . 
          <hint>Modify the <c>precedes()</c> method.</hint>
        </p>
      </statement>       
 <response />       
 </exercise>
      <exercise label="jstx_code_to_lower">
      <title>Write toLower</title>
      <statement>

        <p>
          Even though Java's <c>String</c> class has a built-in <c>toLowerCase()</c> method,
          write your own implementation of this method.
          It should take a <c>String</c> parameter and return a <c>String</c> 
          with all its letters written in lowercase.
        </p>
      </statement>       
 <response />       
 </exercise>
      <exercise label="jstx_code_blocked_text">
      <title>Blocked Text Method</title>
      <statement>

        <p>
          Write a method that converts its <c>String</c> parameter so that 
          letters are written in blocks five characters long.
          For example,
          consider the following two versions of the same sentence:
 <pre>
Plain :   This is how we would ordinarily write a sentence.
Blocked : Thisi showw ewoul dordi naril ywrit easen tence.
 </pre>
        </p>
      </statement>       
 <response />       
 </exercise>
      <exercise label="jstx_doc_analysis">
      <title>Document Analysis</title>
      <statement>

        <p>
          Design and implement a Java Swing program that lets the user type a 
          document into a <c>TextArea</c> and then provides the following analysis of the document:
          the number of words in the document,
          the number of characters in the document,<nbsp/>and the percentage of words 
          that have more than six letters.
        </p>
      </statement>       
 <response />       
 </exercise>
      <exercise label="jstx_code_wordify_numbers">
      <title>Wordify Single Digit Numbers</title>
      <statement>

        <p>
          Design and write a Java Swing program that searches for 
          single-digit numbers in a text and changes them to their corresponding words.
          For example, the string
          <q>4 score and 7 years ago</q>
          would be converted into
          <q>four score and seven years ago</q>.
        </p>
      </statement>       
 <response />       
 </exercise>
      <exercise label="jstx_code_find_palindrome">
      <title>Palindrome Tester</title>
      <statement>

        <p>
          A palindrome is a string that is spelled the same way backward and forward.
          For example, <em>mom, dad,
          radar, 727</em> and <em>able was i ere i saw elba</em>
          are all examples of palindromes.
          Write a Java Swing program that lets the user type in a word or phrase 
          and then determines whether the string is a palindrome.
        </p>
      </statement>       
 <response />       
 </exercise>
      <exercise label="jstx_code_string_to_maze">
      <title>String To Maze</title>
      <statement>

        <p>
          Write a maze program that uses a string to store a representation of the maze.
          Write a method that accepts a <c>String</c> parameter and 
          prints a two-dimensional representation of a maze.
          For example, the maze shown here,
          where <c>O</c> marks the entrance and exit can be generated from the following string:
 <pre>
String: XX_XXXXXXXX__XXX_XXXX_XX____XXX_XX_XX_XXX____X____XXXXXXXX_X
  O
XX XXXXXXX
X  XXX XXX
X XX    XX
X XX XX XX
X    X    O
XXXXXXXX X
 </pre>
        </p>
      </statement>       
 <response />       
 </exercise>
      <exercise label="jstx_code_mailing_label">
      <title>Mailing Label</title>
      <statement>

        <p>
          Write a method that takes a delimited string to store a name and address,
          from which you can print a mailing label.
          For example, if the string contains
          <q>Sam Penn:14 Bridge St.:Hoboken, NJ 01881,</q>
          the method should print the label shown in the margin. {1pt} Sam Penn 14 Bridge St.
          Hoboken, NJ 01881 <c>__________</c> }
        </p>
      </statement>       
 <response />       
 </exercise>
      <exercise label="jstx_code_time_bomb">
      <title>Time Bomb Game</title>
      <statement>

        <p>
          Design and implement a Java Swing program that plays Time Bomb with the user.
          Here's how the game works.
          The computer picks a secret word and then prints one asterisk for each 
          letter in the word: * * * * *.  The user guesses at the letters in the word.
          For every correct guess,
          an asterisk is replaced by a letter:  * e * * *.  For every incorrect guess,
          the time bomb's fuse grows shorter.
          When the fuse disappears,
          after say, six incorrect guesses, the bomb explodes.
          Store the secret words in a delimited string and invent your own representation for the time bomb.
        </p>
    </statement>       
 <response />       
 </exercise>
    <exercise label="jstx_code_global_replace">
      <title>Global Replace Program</title>
      <statement>

        <p>
          <term>Challenge:</term>  The global replace function is a string-processing 
          algorithm found in every word processor.
          Write a method that takes three <c>String</c> arguments:
          a document, a target string, and a replacement string.
          The method should replace every occurrence of the target string in the 
          document with the replacement string.
          For example, if the document is
          <q>To be or not to be, that is the question,</q>
          and the target string is
          <q>be,</q>, and the replacement string is
          <q>see,</q>
          the result should be,
          <q>To see or not to see, that is the question.</q>
        </p>
    </statement>       
 <response />       
 </exercise>
    <exercise label="jstx_code_secret_letter">
      <title>Secret Letter Game</title>
      <statement>

        <p>
          <term>Challenge:</term>  Design and implement a Java Swing Program that plays 
          the following game with the user.
          Let the user pick a letter between
          <em>A</em> and <em>Z</em>.
          Then let the computer guess, the secret letter.
          For every guess the player has to tell the computer whether it's too high or too low.
          The computer should be able to guess the letter within five guesses.
          Do you see why?
        </p>
    </statement>       
 <response />       
 </exercise>
    <exercise label="jstx_code_string_backed_list">
      <title>String Backed List</title>
      <statement>

        <p>
          <term>Challenge:</term> A <em>list</em> is a sequential data structure.
          Design a <c>List</c> class that uses a comma-delimited <c>String</c> <mdash/> such as,
          <q>a,b,c,d,12,dog</q> <mdash/> to implement a list.
          Implement the following methods for this class:
 <program language="java"><input>
void addItem( Object o );      // Use Object.toString()
String getItem(int position);
String toString();
void deleteItem(int position);
void deleteItem(String item);
int getPosition(String item);
String getHead();              // First element
List getTail();                // All but the first element
int length();                  // Number of items
 </input></program>
        </p>
    </statement>       
 <response />       
 </exercise>
    <exercise label="jstx_code_string_backed_directory">
      <title>String Backed Directory</title>
      <statement>

        <p>
          <term>Challenge:</term> Use a delimited string to create a <c>PhoneList</c> 
          class with an instance method to insert names and phone numbers,
          and a method to look up a phone number when a user provides a person's name.
          Since your class will take care of looking things up,
          you don't have to worry about keeping the list in alphabetical order.
          For example,
          the following string could be used as such a directory:
 <pre>
mom:860-192-9876::bill g:654-0987-1234::mary lancelot:123-842-1100
 </pre>
        </p>
      </statement>       
 <response />       
 </exercise>
      <exercise label="jstx_code_message_display">
      <title>Message Display</title>
      <statement>

        <p>
          Design and implement an application that displays a multi-line message 
          in various fonts and sizes input by the user.
          Let the user choose from among a fixed selection of fonts, sizes,
          and styles.
        </p>
      </statement>       
 <response />       
 </exercise>
    </exercises>
</section>
