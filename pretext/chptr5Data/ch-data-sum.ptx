<section xml:id="ch-models-sum">
    <title>Chapter Summary</title>
    <subsection>
        <title>Technical Terms</title>
<p>
    action
</p>
<p>
    binary operator
</p>
<p>
    binary digit (bit)
</p>
<p>
    boundary value
</p>
<p>
    cast operation
</p>
<p>
    class constant
</p>
<p>
    input-process-output
</p>
<p>
    named constant
</p>
<p>
    operand
</p>
<p>
    operator overloading
</p>
<p>
    precedence order
</p>
<p>
    promotion
</p>
<p>
    round off error
</p>
<p>
    short-circuit evaluation
</p>
<p>
    type conversion
</p>
<p>
    unary operator
</p>
<p>
    Unicode
</p>
<p>
    representation
</p>
</subsection>
<subsection>
    <title>{Summary of Important Points</title>
<ul>
<li>
  <p>
          The way we approach a problem can often help or hinder us in our ability to solve it.
          Choosing an appropriate <em>representation</em>
          for a problem is often the key to solving it.
  </p>
</li>
<li>
  <p>
          In order to evaluate complex expressions,
          it is necessary to understand the
    <em>precedence order</em> and <em>associativity</em>
          of the operators involved.
          Parentheses can always be used to override an operator's built-in precedence.
  </p>
</li>
<li>
  <p>
          Java provides several types of integer data,
          including the 8-bit <c>byte</c>, 16-bit <c>short</c>, 32-bit <c>int</c>, and 64-bit
    <c>long</c> types.
          Unless otherwise specified,
          integer literals are represented as <c>int</c> data in a Java program.
  </p>
</li>
<li>
  <p>
          Java provides two types of floating-point data,
          the 32-bit
    <c>float</c> type and the 64-bit <c>double</c> type.
          Unless otherwise specified,
          floating-point literals are represented as <c>double</c> data.
  </p>
</li>
<li>
  <p>
          In general, if a data type uses <em>n</em>
          bits in its representation,
          then it can represent <m>2^n</m> different values.
  </p>
</li>
<li>
  <p>
          The fact that Java's primitive types are defined in terms of a specific number of bits is one way that Java promotes
    <em>platform independence</em>.
  </p>
</li>
<li>
  <p>
          It is necessary to distinguish integer operations from floating-point operations even though the same symbols are used.
          For example, (7/2) is 3, while (7.0/2) is 3.0.
  </p>
</li>
<li>
  <p>
          In revising a class that is used by other classes it is important to preserve as much of the class's
    <em>interface</em> as possible.
  </p>
</li>
<li>
  <p>
          In Java, character data are based on the Unicode character set,
          which provides <m>2^{16}</m> = 65,536 different character codes.
          To provide backward compatibility with the ASCII code,
          the first 128 characters are the ASCII coded characters.
  </p>
</li>
<li>
  <p>
          Java operators are evaluated according to the precedence hierarchy shown in Table<nbsp/>
5.15.
          The lower the precedence number,
          the earlier an operator is evaluated.
          So the operators at the top of the table are evaluated before operators that occur below them in the table.
          Operators at the same precedence level are evaluated according to their <em>association</em>,
          either left to right (L to R) or right to left (R to L).
  <table>
            \TBT{0pc}{Java operator precedence and associativity table
    <idx>
      <h>precedence table</h>
    </idx>
          } 
    <tabular>
      <row>
        <cell><c>__________</c></cell>
      </row>
      <row>
        <cell>{Order}</cell>
        <cell>{Operator}</cell>
        <cell>{Operation}</cell>
        <cell>{Association}</cell>
      </row>
      <row>
        <cell><c>__________</c></cell>
      </row>
      <row>
        <cell>0</cell>
        <cell>
          <c>(  )</c>
        </cell>
        <cell>
          <em>Parentheses</em>
        </cell>
        <cell>\cr 1</cell>
        <cell>
          <c>++            <mdash/>
  . </c>
        </cell>
        <cell>
          <em>Postincrement, postdecrement,</em>
        </cell>
      </row>
      <row>
        <cell></cell>
        <cell></cell>
        <cell>
          <nbsp/>
          <nbsp/>
          <em>dotOperator</em>
        </cell>
        <cell>
          <em>L to R</em>\cr 2</cell>
        <cell>
          <c>++            <mdash/>
  +  -  !</c>
        </cell>
        <cell>
          <em>Preincrement, predecrement</em>
        </cell>
        <cell>
          <em>R to L</em>\cr</cell>
        <cell>
          <c></c>
        </cell>
        <cell>
          <nbsp/>
          <nbsp/>
          <em>Unary plus, unary minus,</em>
        </cell>
      </row>
      <row>
        <cell></cell>
        <cell></cell>
        <cell>
          <nbsp/>
          <nbsp/>
          <em>boolean NOT</em>
        </cell>
        <cell>
          <em></em>\cr 3</cell>
        <cell>
          <c> (type)\; new </c>
        </cell>
        <cell>
          <em>Type cast, object instantiation</em>
        </cell>
        <cell>
          <em>R to L</em>\cr 4</cell>
        <cell>
          <c>*  /  %</c>
        </cell>
        <cell>
          <em>Multiplication, division, modulus</em>
        </cell>
        <cell>
          <em>L to R</em>\cr 5</cell>
        <cell>
          <c>+ -  +</c>
        </cell>
        <cell>
          <em>Addition, subtraction, string</em>
        </cell>
      </row>
      <row>
        <cell></cell>
        <cell></cell>
        <cell>
          <nbsp/>
          <nbsp/>
          <em>concatenation</em>
        </cell>
        <cell>
          <em>L to R</em>\cr 6</cell>
        <cell>
          <c>&lt;  >  &lt;=  >=</c>
        </cell>
        <cell>
          <em>Relational operators</em>
        </cell>
        <cell>
          <em>L to R</em>\cr 7</cell>
        <cell>
          <c>==   !=</c>
        </cell>
        <cell>
          <em>Equality operators</em>
        </cell>
        <cell>
          <em>L to R</em>\cr 8</cell>
        <cell>
          <c> \wedge </c>
        </cell>
        <cell>
          <em>Boolean XOR</em>
        </cell>
        <cell>
          <em>L to R</em>\cr 9</cell>
        <cell>
          <c>&amp;&amp;</c>
        </cell>
        <cell>
          <em>Boolean AND</em>
        </cell>
        <cell>
          <em>L to R</em>\cr 10</cell>
        <cell>
          <c> \mid\mid </c>
        </cell>
        <cell>
          <em>Boolean OR</em>
        </cell>
        <cell>
          <em>L to R</em>\cr 11</cell>
        <cell>
          <c>= += -= *= /= %=</c>
        </cell>
        <cell>
          <em>Assignment operators</em>
        </cell>
        <cell>
          <em>R to L</em>
        </cell>
      </row>
      <row>
        <cell><c>__________</c></cell>
      </row>
    </tabular>
  </table>
</p>
</li>
</ul>
</subsection>
</section>