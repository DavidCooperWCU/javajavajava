<section xml:id="ch5-exercises">
<title>Exercises</title>

<exercises>
<title>Data Exercises</title>

<p><term>Note: </term>For programming exercises, first draw 
a UML class diagram describing all classes and
their inheritance relationships and/or associations.
</p>

<exercise label="jdex_paired_terms">
<title>Paired Terms</title>
 <introduction><p>Explain the difference between the following pairs of terms:</p>
    </introduction>
        <task label="jdex_rep_vs_action">       
 <statement> <p>Representation and action</p></statement>       
 <response />       
 </task>
        <task label="jdex_binary_vs_unary">       
 <statement> <p>Binary operator and unary operation</p></statement>       
 <response />       
 </task>
        <task label="jdex_constant_vs_variable">       
 <statement> <p>Class constant and class variable</p></statement>       
 <response />       
 </task>
        <task label="jdex_helper_vs_class_method">       
 <statement> <p>Helper method and class method</p></statement>       
 <response />       
 </task>
        <task label="jdex_op_vs_method_overloading">       
 <statement> <p>Operator overloading and method overloading</p></statement>       
 <response />       
 </task>
        <task label="jdex_method_call_vs_composition">       
 <statement> <p>Method call and method composition</p></statement>       
 <response />       
 </task>
        <task label="jdex_type_conversion_vs_promotion">       
 <statement> <p>Type conversion and type promotion</p></statement>       
 <response />       
 </task>
    </exercise>
<exercisegroup>
<title>Type Sizes</title>
 <introduction>
    <p> For each of the following data types, list
        how many bits are used in its representation and how many values can
        be represented:
    </p>
    </introduction>
        <exercise label="jdex_fill_in_int">       
 <statement>  <c>int</c> <var width="3"/> bits and <var width="11"/> values </statement>       
<setup>
          <var>
            <condition string="32">
              <feedback>
		<p>Correct</p>
              </feedback>
            </condition>
	    
            <condition string=".*">
              <feedback>
		<p>Try again..</p>
              </feedback>
            </condition>
          </var>
	  <var>
            <condition string="4294967296">
              <feedback>
		<p>Correct</p>
              </feedback>
            </condition>
	    <condition string="2\^32">
              <feedback>
		<p>Correct</p>
              </feedback>
            </condition>
            <condition string=".*">
              <feedback>
		<p>Try again..</p>
              </feedback>
            </condition>
          </var>
	</setup>	
      
 </exercise>
        <exercise label="jdex_fill_in_char">       
 <statement>  <c>char</c> <var width="3"/> bits and <var width="6"/> values </statement>       
 <setup>
          <var>
            <condition string="16">
              <feedback>
		<p>Correct</p>
              </feedback>
            </condition>
	    
            <condition string=".*">
              <feedback>
		<p>Try again..</p>
              </feedback>
            </condition>
          </var>
	  <var>
            <condition string="65536">
              <feedback>
		<p>Correct</p>
              </feedback>
            </condition>
	    <condition string="2\^16">
              <feedback>
		<p>Correct</p>
              </feedback>
            </condition>
            <condition string=".*">
              <feedback>
		<p>Try again..</p>
              </feedback>
            </condition>
          </var>
	</setup>	      
 </exercise>
        <exercise label="jdex_fill_in_byte">       
 <statement>  <c>byte</c> <var width="3"/> bits and <var width="4"/> values</statement>       
<setup>
          <var>
            <condition string="8">
              <feedback>
		<p>Correct</p>
              </feedback>
            </condition>
	    
            <condition string=".*">
              <feedback>
		<p>Try again..</p>
              </feedback>
            </condition>
          </var>
	  <var>
            <condition string="256">
              <feedback>
		<p>Correct</p>
              </feedback>
            </condition>
	    <condition string="2\^8">
              <feedback>
		<p>Correct</p>
              </feedback>
            </condition>
            <condition string=".*">
              <feedback>
		<p>Try again..</p>
              </feedback>
            </condition>
          </var>
	</setup>	       
 </exercise>
        <exercise label="jdex_fill_in_long">       
 <statement>  <c>long</c> <var width="3"/> bits and <var width="6"/> values (use ^ to represent to the power of).</statement>       
 <setup>
          <var>
            <condition string="64">
              <feedback>
		<p>Correct</p>
              </feedback>
            </condition>
	    
            <condition string=".*">
              <feedback>
		<p>Try again..</p>
              </feedback>
            </condition>
          </var>
	  <var>
            
	    <condition string="2\^64">
              <feedback>
		<p>Correct</p>
              </feedback>
            </condition>
            <condition string=".*">
              <feedback>
		<p>Try again..</p>
              </feedback>
            </condition>
          </var>
	</setup>	      
 </exercise>
        <exercise label="jdex_fill_in_double">       
 <statement>  <c>double</c> <var width="3"/> bits and <var width="6"/> values. (use ^ to represent to the power of)</statement>       
 <setup>
          <var>
            <condition string="64">
              <feedback>
		<p>Correct</p>
              </feedback>
            </condition>
	    
            <condition string=".*">
              <feedback>
		<p>Try again..</p>
              </feedback>
            </condition>
          </var>
	  <var>
            
	    <condition string="2\^64">
              <feedback>
		<p>Correct</p>
              </feedback>
            </condition>
            <condition string=".*">
              <feedback>
		<p>Try again..</p>
              </feedback>
            </condition>
          </var>
	</setup>    
 </exercise>
    </exercisegroup>
<exercisegroup>
<title>Fill in the Blanks</title>
 <introduction>
    <p>Fill in the blanks.</p>
    </introduction>
        <exercise label="jdex_fill_in_class_modifier">       
 <statement><p>  Methods and variables that are associated with
        a class rather than with its instances must be declared <var width="10"/>.</p></statement>       
      <setup>
          <var>
            <condition string="static">
              <feedback>
		<p>Correct</p>
              </feedback>
            </condition>
	    
            <condition string=".*">
              <feedback>
		<p>Try again..</p>
              </feedback>
            </condition>
          </var>
	</setup> 
 </exercise>
        <exercise label="jdex_fill_in_two_types">       
 <statement><p>  When an operation involves values of two different types,
        one value must be  <var width="10"/> before the expression can be evaluated.</p></statement>       
 <setup>
          <var case="insensitive">
            <condition  string="promoted">
              <feedback>
		<p>Correct, <c>converted</c> or <c>cast</c> are also acceptable</p>
              </feedback>
            </condition>
	    <condition   string="converted">
              <feedback>
		<p>Correct, <c>promoted</c> or <c>cast</c> are also acceptable</p>
              </feedback>
            </condition>
	    <condition   string="cast">
              <feedback>
		<p>Correct, <c>converted</c> or <c>promoted</c> are also acceptable</p>
              </feedback>
            </condition>
	    
            <condition string=".*">
              <feedback>
		<p>Try again..</p>
              </feedback>
            </condition>
          </var>
	</setup>      
 </exercise>
        <exercise label="jdex_fill_in_constants">       
 <statement><p>  Constants should be declared  <var width="10"/>.</p></statement>       
 <setup>
          <var>
            <condition string="final">
              <feedback>
		<p>Correct, but remember a <c>final</c> Object reference of a mutable Object can still change its value.</p>
              </feedback>
            </condition>
	    
            <condition string=".*">
              <feedback>
		<p>Try again..</p>
              </feedback>
            </condition>
          </var>
	</setup>    
 </exercise>
        <exercise label="jdex_fill_in_true_false">       
 <statement><p>  Variables that take <c>true</c> and <c>false</c> as their
        possible values are known as  <var width="10"/>.</p></statement>       
 <setup>
          <var case="insensitive">
            <condition  string="booleans">
              <feedback>
		<p>Correct, the basic data type is <c>boolean</c> and case matters for that.</p>
              </feedback>
            </condition>
	    
            <condition string=".*">
              <feedback>
		<p>Try again..</p>
              </feedback>
            </condition>
          </var>
	</setup>       
 </exercise>
    </exercisegroup>
<exercise label="jdex_promotion_parsons">       
 <statement>
    <p>
        Arrange the following data types into a <em>promotion</em>
        hierarchy: <c> double</c>, <c> float</c>, <c> int</c>, <c> short</c>, <c> long</c>,  <c> char</c>,  <c> byte</c>.
    </p>
</statement>       
 <blocks indentation="hide">
      	<block>
	  <c>double</c>
	</block>
	<block>
	  <c>float</c> and <c>long</c>
	</block>
	<block>
          <c>int</c>
	</block>
	<block>
	  <c>char</c> and <c>short</c>
	</block>
	<block>
	 <c>byte</c>
	</block>
	<block correct="no">
	  <c>float</c> 
	</block>
	<block correct="no">
	  <c>long</c>
	</block>
	<block correct="no">
	  <c>char</c> 
	</block>
	<block correct="no">
	  <c>short</c>
	</block>
      </blocks>      
 </exercise>
<exercise label="jdex_true_false">
<title>True/False Questions</title>
 <introduction>
    <p>
        Assuming that <c>o1</c> is true, <c>o2</c> is false,
        and <c>o3</c> is false, evaluate each of the following expressions:
    </p>
    </introduction>
        <task label="jdex_true_false_1">       
 <statement correct="yes">  <c>o1 || o2 &amp;&amp; o3</c></statement>             
 </task>
        <task label="jdex_true_false_2">       
 <statement correct="yes">  <c>o1 ^ o2</c></statement>       
       
 </task>
        <task label="jdex_true_false_3">       
 <statement correct="no">  <c>!o1 &amp;&amp; !o2</c></statement>             
 </task>
    </exercise>

<exercise label="jdex_operator_precedence_1">
<title>Operator Precedence 1</title>
 <statement> 
    <p> 
        Arrange the following operators in precedence order:
        <c>+ - () * / % &lt; ==</c>
    </p>
</statement>       
 <response />       
 </exercise>
<exercise label="jdex_operator_precedence_2">       
 <statement> 
    <p> 
        Arrange the following operators into a precedence hierarchy:
        <c>*,++, %, ==</c>
    </p>
</statement>       
 <response />       
 </exercise>
<exercise label="jdex_evaluate_expressions">
<title>Evaluate Expressions</title>
 <introduction>  
    <p>
        Parenthesize and evaluate each of the following expressions. (If an expression 
        is invalid, mark it as such):
    </p>
    </introduction>
        <task label="jdex_eval_eq_1">       
 <statement>  <c>11 / 3 % 2 == 1</c></statement>       
 <response />       
 </task>
        <task label="jdex_eval_gt_1">       
 <statement>  <c>11 / 2 % 2 > 0</c></statement>       
 <response />       
 </task>
        <task label="jdex_eval_ge_1">       
 <statement>  <c>15 % 3 >= 21 %</c></statement>       
 <response />       
 </task>
        <task label="jdex_eval_ge_2">       
 <statement>  <c>12.0 / 4.0 >= 12 / 3</c></statement>       
 <response />       
 </task>
        <task label="jdex_eval_eq_2">       
 <statement>  <c>15 / 3 == true</c></statement>       
 <response />       
 </task>
    </exercise>

<exercise label="jdex_evaluate_code">
<title>Evaluate Code 1</title>
 <introduction>  
    <p>
        What value would <c>m</c> have after each of the 
        statements that follow is executed?  Assume that <c>m, k, j</c> are
        reinitialized before each statement.
        <program language="java"><input>
            int m = 5, k = 0, j = 1;
        </input></program>
    </p>
    </introduction>
        <task label="jdex_eval_assignment_1">       
 <statement>  <c>m = ++k + j;</c></statement>       
 <response />       
 </task>
        <task label="jdex_eval_assignment_2">       
 <statement>  <c>m += ++k * j;</c></statement>       
 <response />       
 </task>
        <task label="jdex_eval_assignment_3">       
 <statement>  <c>m %= ++k + ++j;</c></statement>       
 <response />       
 </task>
        <task label="jdex_eval_assignment_4">       
 <statement>  <c>m = m - k - j;</c></statement>       
 <response />       
 </task>
        <task label="jdex_eval_assignment_5">       
 <statement>  <c>m = ++m;</c></statement>       
 <response />       
 </task>
    </exercise>

<exercise label="jdex_evaluate_code_2">
<title>Evaluate Code 2</title>
 <introduction>  
    <p>
        What value would <c>b</c> have after each of the 
        statements that follow is executed? Assume that <c>m, k, j</c> are reinitialized
        before each statement. It may help to parenthesize the right-hand side
        of the statements before evaluating them.
    </p>
    <program language="java"><input>
        boolean b;
        int m = 5, k = 0, j = 1;
   </input></program>
   </introduction>
    <task label="jdex_eval_assignment_6">       
 <statement>  <c>b = m > k + j;</c></statement>       
 <response />       
 </task>
    <task label="jdex_eval_assignment_7">       
 <statement>  b = m * m != m * j;</statement>       
 <response />       
 </task>
    <task label="jdex_eval_assignment_8">       
 <statement>  <c>b = m &lt;= 5 &amp;&amp; m % 2 == 1;</c></statement>       
 <response />       
 </task>
    <task label="jdex_eval_assignment_9">       
 <statement>  <c>b = m &lt; k  || k &lt; j;</c></statement>       
 <response />       
 </task>
    <task label="jdex_eval_assignment_10">       
 <statement>  <c>b = --m == 2 * ++j;</c></statement>       
 <response />       
 </task>
   </exercise>

<exercise label="jdex_evaluate_expressions_4">
<title>More Expression Evaluation</title>
 <introduction>  
    <p>
        For each of the following expressions, if it is valid,
        determine the value of the variable on the left-hand side
        (if not, change it to a valid expression):
    </p>
    <program language="java"><input>
        char c = 'a' ;
         int  m = 95;
    </input></program>
    </introduction>
        <task label="jdex_eval_assignment_11">       
 <statement>  <c>c = c + 5;</c></statement>       
 <response />       
 </task>
        <task label="jdex_eval_assignment_12">       
 <statement>  <c>c = 'A' + 'B';</c></statement>       
 <response />       
 </task>
        <task label="jdex_eval_assignment_13">       
 <statement>  <c>m = c + 5;</c></statement>       
 <response />       
 </task>
        <task label="jdex_eval_assignment_14">       
 <statement>  <c>c = (char) m + 1;</c></statement>       
 <response />       
 </task>
        <task label="jdex_eval_assignment_15">       
 <statement>  <c>m = 'a' - 32;</c></statement>       
 <response />       
 </task>
    </exercise>

<exercise label="jdex_write_java_expressions_">
<title>Write Java Expressions</title>
 <introduction>  
    <p>
        Translate each of the following expressions into Java:
    </p>
    </introduction>
        <task label="jdex_translate_to_code_1">       
 <statement>  Area equals <c>pi</c> times the radius squared.</statement>       
 <response />       
 </task>
        <task label="jdex_translate_to_code_2">       
 <statement>  Area is assigned <c>pi</c> times the radius squared.</statement>       
 <response />       
 </task>
        <task label="jdex_translate_to_code_3">       
 <statement>  Volume is assigned <c>pi</c> times radius cubed divide by <c>h.</c></statement>       
 <response />       
 </task>
        <task label="jdex_translate_to_code_4">       
 <statement>  If <c>m</c> and <c>n</c> are equal, then <c>m</c> is incremented by one; 
            otherwise <c>n</c> is incremented.</statement>       
 <response />       
 </task>
        <task label="jdex_translate_to_code_5">       
 <statement>  If <c>m</c> is greater than <c>n</c>
            times 5, then square <c>m</c> and double <c>n</c>;
            otherwise square <c>n</c> and double <c>m.</c></statement>       
 <response />       
 </task>
    </exercise>

<exercise label="jdex_trace_code">
<title>Trace the Java Code</title>
 <statement>  
    <p>
        What would be output by the following code segment?
    </p>
    <program language="java"><input>
        int m = 0, n = 0, j = 0, k = 0;
        m = 2 * n++;
        System.out.println("m= " + m + " n= " + n);
        j += ( --k * 2 );
        System.out.println("j= " + j + " k= " + k);
    </input></program>
</statement>       
 <response />       
 </exercise>
 <exercisegroup>
 <title>Writing Methods</title>
 <introduction>
<p>
    Each of the  problems that follow asks you to write a method.
    Of course, as you are developing the method in a stepwise
    fashion, you should test it. Here's a simple application
    program that you can use for this purpose:
</p>
<program language="java"><input>
public class MethodTester {
    public static int square(int n) {
        return n * n;
    }
    public static void main(String args[]) {
        System.out.println("5 squared = " + square(5));
    }
}
</input></program>
    <p>
        Just replace
        the <c> square()</c> method with your method. Note that
        you must declare your method <c> static</c> if you want
        to call it directly from <c> main()</c> as we do here.
    </p>
    </introduction>
<exercise label="jdex_sales_tax_method">
<title>Sales Tax Method</title>
       
 <statement>  
    <p>
        Write a method to calculate the sales tax for
        a sale item. The method should take two <c> double</c> parameters, one
        for the sales price and the other for the tax rate. It should return a
        <c> double</c>.  For example, <c> calcTax(20.0, 0.05)</c> should return
        1.0.
    </p>
</statement>       
<program label="jdex_code_sales_tax_task" interactive="activecode" language="java">
<input>
public class MethodTester {
    public static int square(int n) {
        return n * n;
    }
    public static void main(String args[]) {
        System.out.println("5 squared = " + square(5));
    }
}
</input>
</program>
 </exercise>
<exercise label="jdex_day_of_week_method">
<title>Day of Week Method</title>
       
 <statement>
    <p>
        <term>Challenge:</term> Suppose you're writing a program that tells what
        day of the week someone's birthday falls on this year. Write a method
        that takes an <c> int</c> parameter, representing what day of the year
        it is, and returns a <c> String</c> like ``Monday.'' For example, for
        2004, a leap year, the first day of the year was on Thursday. The
        thirty-second day of the year (February 1, 2004) was a Sunday, so 
        <c>getDayOfWeek(1)</c> should return <q>Thursday</q> and <c> getDayOfWeek(32)</c>
        should return <q>Sunday.</q> <hint> If you divide the day of the
        year by 7, the remainder will always be a number between 0 and 6,
        which can be made to correspond to days of the week.</hint>
    </p>
</statement>       
 <program label="jdex_code_day_of_week_task" interactive="activecode" language="java">
<input>
public class MethodTester {
    public static int square(int n) {
        return n * n;
    }
    public static void main(String args[]) {
        System.out.println("5 squared = " + square(5));
    }
}
</input>
</program>       
 </exercise>
<exercise label="jdex_day_of_year_method">
<title>Day of Year Method</title>
       
 <statement> 
    <p>
        <term>Challenge:</term> As part of the birthday program, you'll want a method that
        takes the month and the day as parameters and returns what day of the
        year it is. For example, <c> getDay(1,1)</c> should return 1;
        <c> getDay(2,1)</c> should return 32; and <c> getDay(12,31)</c> should return
        365. <hint> If the month is 3, and the day is 5, you have to add the
        number of days in January plus the number of days in February to 5 to
        get the result: 31 + 28 + 5 = 64.</hint>
    </p>
</statement>       
 <program label="jdex_code_day_of_year_task" interactive="activecode" language="java">
<input>
public class MethodTester {
    public static int square(int n) {
        return n * n;
    }
    public static void main(String args[]) {
        System.out.println("5 squared = " + square(5));
    }
}
</input>
</program>       
 </exercise>
<exercise label="jdex_convert_to_lowercase_method">
<title>Convert to Lowercase Method</title>
       
 <statement>  
    <p>
        Write a Java method that converts a <c> char</c>
        to lowercase. For example, <c> toLowerCase('A')</c>
        should return `a'. Make sure you guard against
        method calls like <c> toLowerCase('a')</c>.
    </p>
</statement>
 <program label="jdex_code_convert_to_lowercase_task" interactive="activecode" language="java">
<input>
public class MethodTester {
    public static int square(int n) {
        return n * n;
    }
    public static void main(String args[]) {
        System.out.println("5 squared = " + square(5));
    }
}
</input>
</program>       
 </exercise>

 <exercise label="jdex_shift_encode_method">
<title>Shift Encode Method</title>

       
 <statement> 
    <p>
        <term>Challenge:</term> Write a Java method that shifts a
        <c> char</c> by <c>n</c> places in the alphabet, wrapping around to the
        start of the alphabet, if necessary. For example, <c> shift('a',2)</c>
        should return `c'; <c> shift('y',2)</c> should return `a'. This method
        can be used to create a Caesar cipher, in which every letter in a
        message is shifted by <c>n</c> places---hfu ju? (Refer to Chapter~1
        exercises for a refresher on Caesar cipher.)
    </p>
</statement>
 <program label="jdex_code_shift_encode_task" interactive="activecode" language="java">
<input>
public class MethodTester {
    public static int square(int n) {
        return n * n;
    }
    public static void main(String args[]) {
        System.out.println("5 squared = " + square(5));
    }
}
</input>
</program>       
 </exercise>

 <exercise label="jdex_bool_to_string_method">
<title>Boolean to String Method</title>
      
 <statement>  
    <p>
        Write a method that converts its <c> boolean</c> parameter
        to a <c> String</c>. For example, <c> boolToString(true)</c>
        should return ``true.''
    </p>
</statement>
<program label="jdex_code_bool_to_string_task" interactive="activecode" language="java">
<input>
public class MethodTester {
    public static int square(int n) {
        return n * n;
    }
    public static void main(String args[]) {
        System.out.println("5 squared = " + square(5));
    }
}
</input>
</program>       
 </exercise>
</exercisegroup>

<exercise label="jdex_rectangular_cube_program">
<title>Rectangular Cube Program</title>
       
 <statement>  
    <p>
        Write a Java application that first prompts the user for    
        three numbers, which represent the sides of a rectangular cube, and
        then computes and outputs the volume and the surface area of the cube.
    </p>
</statement>       
 <program label="jdex_code_rect_cube_task" interactive="activecode" language="java" stdin="10 11 20">
<input>
public class RectangularCubeProgram {
    
    public static void main(String args[]) {
        
    }
}
</input>
</program>       
 </exercise>

<exercise label="jdex_sort_three_program" stdin="40 2 23">
<title>Sort Three Numbers Program</title>
      
 <statement>  
    <p>
        Write a Java application that prompts the user for three
        numbers and then outputs the three numbers in increasing order.
    </p>
</statement>
<program label="jdex_code_sort_three_task" interactive="activecode" language="java" >
<input>
public class IncreasingOrder {
    
    public static void main(String args[]) {
        
    }
}
</input>
</program>       
 </exercise>
<exercise label="jdex_is_divisible_program">
<title>Is Divisible Program</title>
      
 <statement>  
    <p> 
        Write a Java application that inputs two integers and
        then determines whether the first is divisible by the second.
        <hint>Use the modulus operator.</hint>
    </p>
</statement>       
 <program label="jdex_code_is_divisible_task" interactive="activecode" language="java" stdin="13 3">
<input>
public class IsDivisible {
    
    public static void main(String args[]) {
        
    }
}
</input>
</program>       
 </exercise>
<exercise label="jdex_print_table_program">
<title>Print Table Program</title>
       
 <statement>  
    <p>
        Write a Java application that prints the following table:
    </p>
        <pre>
        N   SQUARE   CUBE
        1   1        1
        2   4        8
        3   9        27
        4   16       64
        5   25       125
        </pre>
	</statement>
 <program label="jdex_code_print_table_task" interactive="activecode" language="java">
<input>
public class PrintTable {
  
    public static void main(String args[]) {
        
    }
}
</input>
</program>       
 </exercise>
<exercise label="jdex_conversion_gui_program">
<title>Conversion GUI Program</title>      
 <statement>  
    <p>
        Design and write a Java GUI that converts kilometers to miles
        and vice versa. Use a <c> JTextField</c> for I/O and <c> JButton</c>s for
        the various conversion actions.
    </p>
</statement>       
 <response />       
 </exercise>
<exercise label="jdex_calculate_cd_gui_program">
<title>Calculate CD GUI Program</title>        
 <statement>  
    <p>
        Design and write a GUI that allows a user to calculate
        the maturity value of a CD. The user should enter the principal,
        interest rate, and years, and the applet should then display the
        maturity value. Make use of the <c> BankCD</c> class covered in this
        chapter.  Use separate <c> JTextField</c>s for the user's inputs and a
        separate <c> JTextField</c> for the result.
    </p>
</statement>       
 <response />       
 </exercise>
<exercise label="jdex_day_of_week_birthday_gui_program">
<title>Day of Week Birthday GUI Program</title>       
 <statement>  
    <p>
        Design and write a GUI that lets the user
        input a birth date (month and day) and reports what day of the week
        it falls on. Use the <c> getDayOfWeek()</c> and <c> getDay()</c> methods
        that you developed in previous exercises.
    </p>
</statement>       
 <response />       
</exercise>
<exercise label="jdex_compute_grades_gui_program">
<title>Compute Grades GUI Program</title>       
 <statement>  
    <p>
        Design and write a GUI that allows the users
        to input their exam grades for a course and computes
        their average and probable letter grade. The applet should
        contain a single <c> JTextField</c> for inputting a grade
        and a single <c> JTextField</c> for displaying the average
        and letter grade. The program should keep track internally
        of how many grades the student has entered. Each time a
        new grade is entered, it should display the current average
        and probable letter grade.
    </p>
</statement>       
 <response />       
 </exercise>
<exercise label="jdex_temperature_units_class_uml" attachment="yes">
<title>Temperature Units Class UML</title>        
 <statement> 
    <p>
        One of the reviewers of this text has
        suggested an alternative design for the <c> Temperature</c> class
        (<xref ref="fig-temperature">Figure</xref>). According to this design, the class
        would contain an instance variable, say, <c> temperature</c>, and access
        methods that operate on it. The access methods would be: 
    </p>
    <program language="java"><input>
        setFahrenheit(double)
        getFahrenheit():double
        setCelsius(double)
        getCelsius():double
    </input></program>
    <p>
        One way to
        implement this design is to store the temperature in the Kelvin scale
        and then convert from and to Kelvin in the access methods.  The
        formula for converting Kelvin to Celsius is
    </p>
        <program language="java"><input>
            K = C + 273.15
        </input></program>
    <p>
        Draw a UML class diagram representing this design
        of the <c> Temperature</c> class. Which design is more object oriented,
        this one or the one used in <xref ref="fig-temperature">Figure</xref>?
    </p>
</statement>       
 <response />       
</exercise>
<exercise label="jdex_temperature_units_class_code">
<title>Temperature Units Class Code</title>     
 <statement> 
    <p>
        Write an implementation of the <c> Temperature</c>
        class using the design described in the previous exercise. 
    </p>
</statement>       
 <program label="jdex_code_temperature_units_task" interactive="activecode" language="java">
<input>
public class Temperature {
    
}
</input>
	<tests>
          <![CDATA[
import static org.junit.Assert.*;
import org.junit.*;
import java.io.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.lang.reflect.*;

public class RunestoneTests extends CodeTestHelper
{

    public RunestoneTests() {
	super("Temperature");
    }


    private Object getTestInstance(Object[] defaultTestValues) {
        String errorMessage = "";
        try {
	    Class<?> c = Class.forName("Temperature");
            Constructor[] ctors = c.getDeclaredConstructors();
            Constructor ctor = ctors[0];

	    return ctor.newInstance(defaultTestValues);

        } catch (Exception e) {
            errorMessage = "Couldn't call constructor";
        }

        return null;
    }
    
    @Test
    public void test1()
    {
	String target = "1 Private";
	String actual = testPrivateInstanceVariables();
	expect(target,actual,"only 1 private field");
	
    }
    @Test
    public void test1b()
    {
	boolean found = true;
	String[] types = {"double"};
	String fieldTypes =
	    testInstanceVariableTypes(types);
	if (fieldTypes.trim().equals("") || fieldTypes.equals("fail")) {
	    found = false;
	} else {
	    String[] typeNames = fieldTypes.trim().split(" ");
	    if(typeNames.length != 1 || !typeNames[0].equals("double")) {
		found = false;
	    }
	    if(types[0] != null) {
		found = false;
	    }

	}

	expect(true,found,"has exactly 1 double field");
    }

    //    setFahrenheit(double)
    //    getFahrenheit():double
    //    setCelsius(double)
    //    getCelsius():double

    @Test
    public void test2()
    {
	    double testValue = 5.0;
	    double target = testValue;
	try {
	    Object[] testValues = {testValue};
	    Object t = getTestInstance(testValues);
	    Method m1 = t.getClass().getMethod("setFahrenheit");
	    m1.invoke(t,testValue);
	    Method m = t.getClass().getMethod("getFahrenheit");
	    expect(target,(Double)m.invoke(t),
		   "setFahrenheit and getFahrenheit work for " + testValue);
	} catch(Exception e) {
	    expect(String.valueOf(target),e.toString(),
		   "setter and/or getter for fahrenheit don't work");
	}
    }
    @Test
    public void test2b()
    {
	    double testValue = 20.0;
	    double target = testValue;
	try {
	    Object[] testValues = {testValue};
	    Object t = getTestInstance(testValues);
	    Method m1 = t.getClass().getMethod("setCelcius");
	    m1.invoke(t,testValue);
	    Method m = t.getClass().getMethod("getCelcius");
	    expect(target,(Double)m.invoke(t),
		   "setCelcius and getCelcius work for " + testValue);
	} catch(Exception e) {
	    expect(String.valueOf(target),e.toString(),
		   "setter and/or getter for celcius don't work");
	}
    }


    @Test
    public void test3()
    {
	    double testValue = 32.0;
	    double target = (testValue-32.0)*5.0/9.0;
	try {
	    Object[] testValues = {testValue};
	    Object t = getTestInstance(testValues);
	    Method m1 = t.getClass().getMethod("setFahrenheit");
	    m1.invoke(t,testValue);
	    Method m = t.getClass().getMethod("getCelcius");
	    expect(target,(Double)m.invoke(t),
		   "setFahrenheit and getCelcius work for " + testValue);
	} catch(Exception e) {
	    expect(String.valueOf(target),e.toString(),
		   "setFahrenheit and/or getCelcius don't work");
	}
    }

@Test
    public void test4()
    {
	    double testValue = 100.0;
	    double target = testValue*9.0/5.0+32.0;
	try {
	    Object[] testValues = {testValue};
	    Object t = getTestInstance(testValues);
	    Method m1 = t.getClass().getMethod("setCelcius");
	    m1.invoke(t,testValue);
	    Method m = t.getClass().getMethod("getFahrenheit");
	    expect(target,(Double)m.invoke(t),
		   "setFahrenheit and getFahrenheit work for " + testValue);
	} catch(Exception e) {
	    expect(String.valueOf(target),e.toString(),
		   "setCelcius and/or getFahrenheit don't work");
	}
    }
}

          ]]>
	</tests>

</program>       
 </exercise>
</exercises>
</section>