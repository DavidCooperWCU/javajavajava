<section xml:id="ch-guis-exs">
    <title>Exercises</title>
<exercises>
<title>GUI Exercises</title>
<p>
<term>Note:</term> For programming exercises,
      <term>first</term> draw a UML class diagram describing all classes and their inheritance relationships and/or associations.
 </p>

<exercise label="jguix_matching_java_definitions">
      <title>Java Concept Matching</title>
      <statement>
	<p>
          Match each of the following 
	  GUI concepts.
	</p>
      </statement>
      <matches>
	<match>
	  <order>1</order>
          <premise><em>model</em></premise>
          <response>a component’s internal state and consists of such properties as whether it is enabled and visiblen </response>
	</match>
	<match>
	  <order>2</order>
          <premise><em>view</em></premise>
          <response>a component’s appearance.</response>
	</match>
	<match>
	  <order>3</order>
          <premise><em>controller</em></premise>
          <response>monitors the component’s state and the actions that involve the component</response>
	</match>
	<match>
	  <order>4</order>
          <premise><em>inheritance hierarchy</em></premise>
          <response> the superclass/subclass relationship among classes</response>
	</match>
	<match>
	  <order>5</order>
	  <premise><em>lightweight</em> component</premise>
          <response>programmed entirely within Java code, such as most Swing components </response>
	</match>
	<match>
	  <order>6</order>
          <premise><em>heavyweight</em> component </premise>
          <response>depend on peer classes that are written in the native system rather than in Java itself, such as all AWT components</response>
	</match>
	<match>
	  <order>7</order>
          <premise><c>JButton</c></premise>
          <response>Swing version of a button.</response>
	</match>
	<match>
	  <order>8</order>
          <premise><c>Button</c></premise>
          <response>AWT version of a button</response>
	</match>
	<match>
	  <order>9</order>
          <premise> layout manager </premise>
          <response>an object that manages the relative size and positioning of components in a container</response>
	</match>
	<match>
	  <order>10</order>
          <premise> container </premise>
          <response>holds GUI components.</response>
	</match>
	<match>
	  <order>11</order>
          <premise>containment hierarchy </premise>
          <response>describes which components are contained in which containers</response>
	</match>

<match>
	  <order>12</order>
          <premise>content pane </premise>
          <response>a built-in  <c>JPanel</c> that serves as the working
area within a <c>JFrame</c>.</response>
	</match>

<match>
	  <order>13</order>
          <premise><c>JFrame</c> </premise>
          <response>a window that holds a content pane.</response>
	</match>
	
      </matches>
      </exercise>

    <exercisegroup>
    <title>Fill in the Blanks</title>
    <introduction>
      <p>
        Fill in the blanks.
        </p>
	</introduction>
                     <exercise label="jguix_fill_in_1">       
<title></title>       
 <statement>

            <p>
              A GUI component that is written entirely in Java is known as a <var width="15"/> component.
            </p>
          </statement>
      <setup>
          <var case="insensitive">
            <condition string="lightweight">
              <feedback>
		<p>Correct</p>
              </feedback>
            </condition>
	    <condition string="heavyweight">
              <feedback>
		<p>Try again. heavyweight components are linked to
		peer system code</p>
              </feedback>
            </condition>
            <condition string=".*">
              <feedback>
		<p>Try again. You may want to review the technical terms from this chapter.</p>
              </feedback>
            </condition>
          </var>
	</setup>	

    </exercise>
                     <exercise label="jguix_fill_in_2">       
<title></title>       
 <statement>

            <p>
              The AWT is not platform independent because it uses the <var width="15"/> model to implement its GUI components.
            </p>
          </statement>
      <setup>
          <var case="insensitive">
            <condition string="peer">
              <feedback>
		<p>Correct</p>
              </feedback>
            </condition>
            <condition string=".*">
              <feedback>
		<p>Try again. You may want to review the technical terms from this chapter.</p>
              </feedback>
            </condition>
          </var>
	</setup>	

    </exercise>
                     <exercise label="jguix_fill_in_3">       
<title></title>       
 <statement>

            <p>
              The visual elements of a GUI are arranged in a <var width="20"/> .
            </p>
          </statement>
      <setup>
          <var case="insensitive">
            <condition string="containment hierarchy">
              <feedback>
		<p>Correct</p>
              </feedback>
            </condition>
	    <condition string="hierarchy">
              <feedback>
		<p>Try again. what type of hierarchy?</p>
              </feedback>
            </condition>
            <condition string=".*">
              <feedback>
		<p>Try again. You may want to review the technical terms from this chapter.</p>
              </feedback>
            </condition>
          </var>
	</setup>	

    </exercise>
                     <exercise label="jguix_fill_in_4">       
<title></title>       
 <statement>

            <p>
              A <var width="17"/> is an object that takes responsibility for arranging the components in a container.
            </p>
          </statement>
      <setup>
          <var case="insensitive">
            <condition string="layout manager">
              <feedback>
		<p>Correct</p>
              </feedback>
            </condition>
            <condition string=".*">
              <feedback>
		<p>Try again. You may want to review the technical terms from this chapter.</p>
              </feedback>
            </condition>
          </var>
	</setup>	

    </exercise>
                     <exercise label="jguix_fill_in_5">       
<title></title>       
 <statement>

            <p>
              The default layout manager for a <c>JPanel</c> is <var width="15"/> .
            </p>
          </statement>
      <setup>
          <var case="insensitive">
            <condition string="flow layout|FlowLayout">
              <feedback>
		<p>Correct</p>
              </feedback>
            </condition>
	   
            <condition string=".*">
              <feedback>
		<p>Try again. You may want to review the technical terms from this chapter.</p>
              </feedback>
            </condition>
          </var>
	</setup>	

    </exercise>
                     
        
    </exercisegroup>
               <exercise label="jguix_change_jbutton">       
<title>Change JButton</title>       
 <statement>

      <p>
        Describe in general terms what you would have to do to change the standard look and feel of a Swing <c>JButton</c>.
      </p>
    </statement>
      <response />
    </exercise>
               <exercise label="jguix_model_view_controller">       
<title>MVC vs AWT</title>       
 <statement>

      <p>
        Explain the differences between the model-view-controller design of a <c>JButton</c> and the design of an AWT <c>Button</c>. Why is MVC superior?
      </p>
    </statement>
      <response />
    </exercise>
               <exercise label="jguix_sequence_label_update">       
<title>Sequence Label Update</title>       
 <statement>

      <p>
        Suppose you have a GUI that contains a <c>JButton</c> and a <c>JLabel</c>. Each time the button is clicked,
        the GUI rearranges the letters in the label.
        Using Java's event model as a basis,
        explain the sequence of events that happens in order for this action to take place.
      </p>
    </statement>
      <response />
    </exercise>
               <exercise label="jguix_one_row_nim_containment">       
<title>OneRowNim Containment Hierarchy</title>       
 <statement>

      <p>
        Draw a containment hierarchy for the most recent GUI version of the
<c>OneRowNim</c> program.
      </p>
    </statement>
      <response />
    </exercise>
               <exercise label="jguix_rock_tickets_gui">       
<title>Rock Tickets GUI</title>       
 <statement>

      <p>
        Create a GUI design,
        similar to the one shown in <xref ref="fig-acmegui">Figure</xref>,
        for a program that would be used to buy tickets online for a rock concert.
      </p>
    </statement>
      <response />
    </exercise>
               <exercise label="jguix_music_player_gui">       
<title>Music Player GUI</title>       
 <statement>

      <p>
        Create a GUI design,
        similar to the one shown in <xref ref="fig-acmegui">Figure</xref>,
        for an online program that would be used to play musical recordings.
      </p>
    </statement>
      <response />
    </exercise>
                 <exercise label="jguix_cd_interest_gui">       
<title>Certificate of Deposit Interest GUI</title>       
 <statement>

      <p>
        Design and implement a GUI for the <c>CDInterest</c> program (Fig.<nbsp/>5.18).
        This program should let the user input the interest rate,
        principal,
        and period and should accumulate the value of the investment.
      </p>
    </statement>
      <response />
    </exercise>
               <exercise label="jguix_temperature_gui">       
<title>Temperature GUI</title>       
 <statement>

      <p>
        Design and implement a GUI for the <c>Temperature</c> class (Fig.<nbsp/>5.5).
        One challenge of this design is to find a good way for the user to indicate whether a Fahrenheit or Celsius value is being input.
        This should also determine the order of the conversion: F to C or C to F.
      </p>
    </statement>
      <response />
    </exercise>
               <exercise label="jguix_calculator_gui">       
<title>Integer Calculator Label GUI</title>       
 <statement>

      <p>
        Design an interface for a 16-button integer calculator that supports addition,
        subtraction, multiplication, and division.
        Implement the interface so that the label of the button is displayed in the calculator's display<mdash/>that is,
        it doesn't actually do the math.
      </p>
    </statement>
      <response />
    </exercise>
               <exercise label="jguix_code_calculator_class">       
<title>Calculator Class</title>       
 <statement>

      <p>       
        <term>Challenge:</term>  Design and implement a <c>Calculator</c> class to go along with the interface you developed in the previous exercise.
        It should function the same way as a hand calculator except it only handles integers.
      </p>
    </statement>
      <response />
    </exercise>
               <exercise label="jguix_refactor_converter">       
<title>Refactor Converter</title>       
 <statement>

      <p>
        Modify the <c>Converter</c> application so that it can convert in either direction:
        from miles to kilometers or from kilometers to miles.
        Use radio buttons in your design to let the user select one or the other alternative.
      </p>
    </statement>
      <response />
    </exercise>
               <exercise label="jguix_code_field_data_program">       
<title>Field Data Program</title>       
 <statement>

      <p>
        Here's a design problem for you.
        A biologist needs an interactive program that calculates the average of some field data represented as real numbers.
        Any real number could be a data value,
        so you can't use a sentinel value, such as 9999,
        to indicate the end of the input.
        Design and implement a suitable interface for this problem.
      </p>
    </statement>
      <response />
    </exercise>
               <exercise label="jguix_refactor_validate">       
<title>Refactor Validate</title>       
 <statement>

      <p>
        <term>Challenge:</term> A dialog box is a window associated with an application that appears only when needed.
        Dialog boxes have many uses.
        An error dialog is used to report an error message.
        A file dialog is used to help the user search for and open a file.
        Creating a basic error dialog is very simple in Swing.
        The <c>JOptionPane</c> class has class methods that can be used to create the 
        kind of dialog shown in <xref ref="fig-errdialog">Figure</xref>.
        <figure xml:id="fig-errdialog"><caption>A basic <c>JOptionPane</c> error dialog.</caption>
          <image width="73%" source="chptr13/9f28.png"/> 
          </figure>
        Such a dialog box can be created with a single statement: 
      
 <program language="java"><input>
JOptionPane.showMessageDialog(this,
         "Sorry, your number is out of range.");
 </input></program>Convert the <c>Validate</c> program (Fig.<nbsp/>6.12 from Chapter<nbsp/>6) to a GUI interface and use the <c>JOptionPane</c> dialog to report errors.
        </p>
    </statement>
      <response />
    </exercise>
               <exercise label="jguix_code_memory_game">       
<title>Code Memory Game</title>       
 <statement>

      <p>
              <term>Challenge:</term> Design and implement a version of the game <em>Memory</em>.
        In this game you are given a two-dimensional grid of boxes that contains pairs of matching images or strings.
        The object is to find the matching pairs.
        When you click a box, its contents are revealed.
        You then click another box.
        If its contents match the first one,
        their contents are left visible.
        If not, the boxes are closed up again.
        The user should be able to play multiple games without getting the same arrangement every time.
      </p>
    </statement>
      <response />
    </exercise>
               <exercise label="jguix_refactor_text_editor">       
<title>Refactor Text Editor</title>       
 <statement>

      <p>
        <term>Challenge:</term> Extend the <c>SimpleTextEditor</c> program by adding methods to handle the opening,
        closing and saving of text files.
      </p>
    </statement>
      <response />
    </exercise>
</exercises>
</section> 
