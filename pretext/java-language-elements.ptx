<section xml:id="java-language-elements">
  <title>Java Language Elements</title>
  <introduction>
    <p>
      In this section we will introduce some of the key elements of the Java language by describing the details of a small program.
      We will look at how a program is organized and what the various parts do.
      Our intent is to introduce important language elements,
      many of which will be explained in greater detail in later sections.
    </p>
    <p>
      The program we will study is a Java version of the traditional HelloWorld program<mdash/>''traditional'' because practically every introductory programming text begins with it.
      When it is run, the HelloWorld program (Fig.
      <xref ref="fig_helloworld"></xref>) just displays the greeting
      <q>Hello, World!</q>
      on the console.
    </p>
    <figure xml:id="fig_helloworld">
      <caption>The <c>HelloWorld</c> application program.</caption>
<pre>
/*
   * File: HelloWorld.java
   * Author: Java Java Java
   * Description: Prints Hello, World! greeting.
   */
 public class HelloWorld extends Object // Class header
 {                                   // Start class body
   private String greeting = "Hello, World!";
   public void greet()               // Method definition
   {                                 // Start method body
       System.out.println(greeting); //  Output statement
   } // greet()                      // End method body
  public static void main(String args[])// Method header
  {
    HelloWorld helloworld;         // declare
    helloworld = new HelloWorld(); // create
    helloworld.greet();            // Method call
   }  //  main()
 }  // HelloWorld                  // End class body
</pre>
    </figure>
  </introduction>
  <subsection>
    <title>Comments</title>
    <p>
      The first thing to notice about the <c>HelloWorld</c> program is the use of comments.
      A <term>comment</term> is a non-executable portion of a program that is used to document the program.
      Because comments are not executable instructions they are just ignored by the compiler.
      Their sole purpose is to make the program easier for the programmer to read and understand.
    </p>
    <p>
      The <c>HelloWorld</c> program contains examples of two types of Java comments.
      Any text contained within /* and */ is considered a comment.
      As you can see in <c>HelloWorld</c>, this kind of comment can extend over several lines and is sometimes called a
      <em>multiline</em> comment.
      A second type of comment is any text that follows double slashes (//) on a line.
      This is known as a <em>single-line comment</em>
      because it cannot extend beyond a single line.
    </p>
    <p>
      When the compiler encounters the beginning marker (/*) of a multiline comment,
      it skips over everything until it finds a matching end marker (*/).
      One implication of this is that it is not possible to put one multiline comment inside of another.
      That is, one comment cannot be <em>nested</em>,
      or contained, within another comment.
      The following code segment illustrates the rules that govern the use of /* and */:
    </p>
<pre>
/* This first comment begins and ends on the same line. */
/* A second comment starts on this line ...
   and goes on ...
   and this is the last line of the second comment.
*/
/* A third comment starts on this line ...
    /* This is NOT a fourth comment. It is just
       part of the third comment.
   And this is the last line of the third comment.
*/
*/  This is an error because it is an unmatched end marker.
</pre>
    <p>
      As you can see from this example,
      it is impossible to begin a new comment inside an already-started comment because all text inside the first comment,
      including /*, is ignored by the compiler.
    </p>
    <principle>
      <title>Comments</title>
      <p>
        Any text contained within /* and */, which may span several lines,
        is considered a comment and is ignored by the compiler.
        Inserting double slashes (//) into a line turns the rest of the line into a comment.
      </p>
    </principle>
    <p>
      Multiline comments are often used to create a <em>comment block</em>
      that provides useful documentation for the program.
      In <c>HelloWorld</c>, the program begins with a comment block that identifies the name of file that contains the program and its author and provides a brief description of what the program does.
    </p>
    <p>
      For single-line comments,
      double slashes (//) can be inserted anywhere \marginpar{Single-line comment} on a line of code.
      The result is that the rest of the line is ignored by the compiler.
      We use single-line comments throughout the <c>HelloWorld</c> program to provide a running commentary of its language elements.
    </p>
    <p>
      \begin{principle}[PROGRAMMING TIP:Use of Comments.]
    </p>
    <p>
      {A well-written program should begin with a comment block that provides the name of the program,
      its author, and a description of what the program does.}
    </p>
  </subsection>
  <subsection>
    <title>Program Layout</title>
    <p>
      Another thing to notice about the program is how neatly it is arranged on the page.
      This is done deliberately so that the program is easy to read and understand.
      In Java, program expressions and statements may be arranged any way the programmer likes.
      They may occur one per line, several per line, or one per several lines.
      But the fact that the rules governing the layout of the program are so lax makes it all the more important that we adopt a good programming style,
      one that will help make programs easy to read.
    </p>
    <p>
      So look at how things are presented in <c>HelloWorld</c>. Notice how beginning and ending braces, { and }, are aligned,
      and note how we use single-line comments to annotate ending braces.
      Braces are used to mark the beginning and end of different blocks of code in a Java program and it can sometimes be difficult to know which beginning and end braces are matched up.
      Proper indentation and the use of single-line comments make it easier to determine how the braces are matched up.
    </p>
    <p>
      Similarly, notice how indentation is used to show when one element of the program is contained within another element.
      Thus, the elements of the <c>HelloWorld</c> class are indented inside of the braces that mark the beginning and end of the class.
      And the statements in the <c>main()</c> method are indented to indicate that they belong to that method.
      Use of indentation in this way,
      to identify the program's structure,
      makes the program easier to read and understand.
    </p>
    <principle>
      <title>PROGRAMMING TIP:Use of Indentation</title>
      <p>
        Indent the code within a block and align the block's opening and closing braces.
        Use a comment to mark the end of a block of code.
      </p>
    </principle>
  </subsection>
  <subsection xml:id="subsec_keywords">
    <title>Keywords and Identifiers</title>
    <p>
      The Java language contains 48 predefined <em>keywords</em>
      (<xref ref="tab_keywords">Table</xref>).
      These are words that have special meaning in the language and whose use is reserved for special purposes.
      For example, the keywords used in the HelloWorld program (Fig.
      <xref ref="fig_helloworld"></xref>) are: <c>class</c>, <c>extends</c>, <c>private</c>, <c>public</c>, <c>static</c>, and
<c>void</c>.
    </p>
    <figure xml:id="tab_keywords">
      <title>Java keywords</title>
      { }{\rule{27pc}{1pt}}
      \vspace{-10pt}
<pre>
abstract   default   goto             package       this
boolean    do        if               private       throw
break      double    implements       protected     throws
byte       enum      import           public        transient
case       elses     instanceof       return        try
catch      extend    int              short         void
char       final     interface        static        volatile
class      finally   long             super         while
const      float     native           switch
continue   for       new              synchronized
</pre>
      \vspace{-14pt}{\rule{27pc}{1pt}}
      \endTB
    </figure>
    <p>
      Because their use is restricted,
      keywords cannot be used as the names of methods, variables,
      or classes.
      However, the programmer can make up his or her own names for the classes, methods,
      and variables that occur in the program,
      provided that certain rules and conventions are followed.
    </p>
    <p>
      The names for classes, methods,
      and variables are called identifiers, \marginpar{Identifier syntax} which follow certain syntax rules:
    </p>
    <principle>
      <title>Identifier</title>
      <p>
        An <term>identifier</term> must begin with a capital or lowercase letter and may be followed by any number of letters, digits,
        underscores (_), or dollar signs ($).
        An identifier may not be identical to a Java keyword.
      </p>
    </principle>
    <p>
      Names in Java are <em>case sensitive</em>,
      which means that two different identifiers may contain the same letters in the same order.
      For example, <c>thisVar</c> and <c>ThisVar</c> are two different identifiers.
    </p>
    <p>
      In addition to the syntax rule that governs identifiers, Java \marginpar{Identifier style} programmers follow certain style conventions in making up names for classes,
      variables,
      and methods.
      By convention,
      class names in Java begin with a capital letter and use capital letters to distinguish the individual words in the name<mdash/>for example, <c>HelloWorld</c> and <c>\marginpar{Java naming conventions}
TextField</c>. Variable and method names begin with a lowercase letter but also use capital letters to distinguish the words in the name<mdash/>for example, <c>main()</c>, <c>greeting</c>, <c>greet()</c>, <c>getQuestion()</c>, and <c>getAnswer()</c>. The advantage of this convention is that it is easy to distinguish the different elements in a program<mdash/>classes, methods,
      variables<mdash/>just by how they are written. (For more on Java style conventions,
      see Appendix A.).
    </p>
    <p>
      Another important style convention followed by Java programmers is to choose descriptive identifiers when naming classes,
      variables,
      and methods.
      This helps to make the program more readable.
    </p>
    <p>
      \begin{principle}[PROGRAMMING TIP:Choice of Identifiers.]
    </p>
    <p>
      {To make your program more readable,
      choose names that describe the purpose of the class, variable,
      or method.}
    </p>
  </subsection>
  <subsection xml:id="subsec_primitives">
    <title>Data Types and Variables</title>
    <p>
      A computer program wouldn't be very useful if it couldn't manipulate different kinds of data,
      such as numbers and strings.
      The operations that one can do on a piece of data depend on the data's type.
      For example, you can divide and multiply numbers,
      but you cannot do this with strings.
      Thus, every piece of data in a Java program is classified according to its <term>data type</term>.
    </p>
    <p>
      Broadly speaking, there are two categories of data in Java:
      various types of objects and eight different types of built-in
      <term>primitive data types</term>.
      In addition to new types of objects that are created by programmers, Java has many different types of built-in objects.
      Two types that we will encounter in this chapter are the <c>String</c> and
<c>PrintStream</c> objects.
      Java's primitive types include three \marginpar{Primitive types} integer types,
      three real number types,
      a character type, and a boolean type with values true and false.
      The names of the primitive types are keywords like <c>int</c> for one integer type, <c>double</c> for one real number type,
      and <c>boolean</c>.
    </p>
    <p>
      As we noted in <xref ref="chapter-intro">Chapter</xref>,
      a variable is a named storage location that can store a value of a particular type.
      Practically speaking,
      you can think of a variable as a special container into which you can place values,
      but only values of a certain type (Fig.
      <xref ref="fig_vars"></xref>).
      For example,
      an <c>int</c> variable can store values like 5 or -100.
      A <c>String</c> variable can store values like
      <q>Hello</q>. (Actually, this is not the full story,
      which is a little more complicated,
      but we will get to that in <xref ref="chapter-objects">Chapter</xref>.)
    </p>
    <p>
      In the <c>HelloWorld</c> class,
      the instance variable <c>greeting</c><image width="73%" source="chptr01/vars.png"/> (line 8) stores a value of type <c>String</c>. In the <c>main()</c> method,
      the variable <c>helloworld</c> is assigned a <c>HelloWorld</c> object
      (line 16).
    </p>
    <p>
      A <term>literal value</term> is an actual value of some type that occurs in a program.
      For example, a string enclosed in double quotes,
      such as "Hello, World!", is known as a <c>String</c> literal.
      A number such as 45.2 would be an example of a literal of type <c>double</c>, and -72 would be an example of a literal of type <c>int</c>. Our HelloWorld program contains just a single literal value,
      the "HelloWorld!" <c>String</c>.
    </p>
  </subsection>
  <subsection xml:id="subsec_statements">
    <title>Statements</title>
    <p>
      A Java program is a collection of statements.
      A <term>statement</term> is a \marginpar{Executing a program} segment of code that takes some action in the program.
      As a program runs, we say it <em>executes</em> statements,
      meaning it carries out the actions specified by those statements.
      In our <c>HelloWorld</c> program,
      statements of various types occur on lines 8, 11, 15, 16, and 17.
      Notice that all of these lines end with a semicolon.
      The rule in Java is that statements must end with a semicolon.
      Forgetting to do so would cause a syntax error.
    </p>
    <p>
      A <term>declaration statement</term>
      is a statement that declares a variable of a particular type.
      In Java, a variable must be declared before it can be used in a program.
      Failure to do so would cause a syntax error.
      In its simplest form,
      a declaration statement begins with the \marginpar{Declaration statement} variable's type,
      which is followed by the variable's name,
      and ends with a semicolon:
    </p>
    <p>
      \begin{extract}<em>Type VariableName</em> ; \end{extract}
    </p>
    <p>
      A variable's type is either one of the primitive types we mentioned,
      such as <c>int</c>, <c>double</c>, or <c>boolean</c>, or for objects,
      it is the name of the object's class,
      such as <c>String</c> or <c>HelloWorld</c>. A variable's name may be any legal identifier,
      as defined earlier,
      although the convention in Java is to begin variable names with a lowercase letter.
      In our <c>HelloWorld</c> program,
      an example a simple declaration statement occurs on line 15:
    </p>
<pre>
HelloWorld helloworld;
</pre>
    <p>
      This example declares a variable for an object.
      The variable's name is <c>helloworld</c> and its type is <c>HelloWorld</c>, the name of the class that is being defined in our example.
      To take another example the following statements declare two
<c>int</c> variables,
      named <c>int1</c> and <c>int2</c>:
    </p>
<pre>
int int1;
int int2;
</pre>
    <p>
      As we noted,
      an <c>int</c> is one of Java's primitive types and the word
      <em>int</em> is a Java keyword.
    </p>
    <p>
      Without going into too much detail at this point,
      declaring a variable causes the program to set aside enough memory for the type of data that will be stored in that variable.
      So in this example, Java would reserve enough space to store an <c>int</c>.
    </p>
    <p>
      An <term>assignment statement</term>
      is a statement that stores (assigns) a value in a variable.
      An assignment statement uses the equal sign (<m>=</m>) as an assignment operator.
      In its simplest form,
      an assignment statement has a variable on the left hand side of the equals sign and some type of value on the right hand side.
      Like other statements, an assignment statement ends with a semicolon:
    </p>
    <p>
      \begin{extract}<em>VariableName</em>
      = <em>Value</em> ; \end{extract}
    </p>
    <p>
      When it executes an assignment statement, Java will first determine what value is given on the right hand side and then assign (store) that value to (in) the variable on the left hand side.
      Here are some simple examples:
      <image width="73%" source="chptr01/assign.png"/>
    </p>
<pre>
greeting = "Hello, World";
num1 = 50;        // (a) Assign 50 to num1
num2 = 10 + 15;   // (b) Assign 25 to num2
num1 = num2;      // (c) Copy num2's value (25) into num1
</pre>
    <p>
      In the first case,
      the value on the right hand side is the string literal "Hello, World!", which gets stored in <c>greeting</c>. Of course, <c>greeting</c> has to be the right type of container<ndash/>in this case,
      a <c>String</c> variable.
      In the next case, the value on the right hand side is 50.
      So that is the value that gets stored in <c>num1</c>, assuming that <c>num1</c> is an <c>int</c> variable.
      The situation after this assignment is shown in the top drawing in <xref ref="fig_assign">Figure</xref>.
      In the third case, the value on the right hand side is 25,
      which is determined by adding 10 and 15.
      So the value that gets assigned to <c>num2</c> is 25.
      After this assignment we have the situation shown in the middle drawing in the figure.
      Of course, this assumes that <c>num2</c> is an <c>int</c> variable.
      In the last case, the value on the right hand side is 25,
      the value that we just stored in the variable <c>num2</c>. So, 25 gets stored in <c>num1</c>. This is the bottom drawing in the accompanying figure.
    </p>
    <p>
      The last of these examples
    </p>
<pre>
num1 = num2;   // Copy num2's value into num1
</pre>
    <p>
      can be confusing to beginning programmers,
      so it is worth some additional comment.
      In this case,
      there are variables on both the left and right of the assignment operator.
      But they have very different meaning.
      The variable on the right is treated as a value.
      If that variable is storing 25, then that is its value.
      In fact, whatever occurs on the right hand side of an assignment operator is treated as a value.
      The variable on the left hand side is treated as a memory location.
      It is where the value 25 will be stored as a result of executing this statement.
      The effect of this statement is to copy the value stored in
      <em>num2</em> into <em>num1</em>,
      as illustrated <image width="73%" source="chptr01/assign2.png"/> \caption{In the assignment <em>num1 = num2;</em>,
      <em>num2</em>'s value is copied into
      <em>num1</em>. } in <xref ref="fig_assign2">Figure</xref>.
    </p>
    <p>
      Java has many other kinds of statements and we will be learning about these in subsequent examples.
      The following examples from the <c>HelloWorld</c> program are examples of statements in which a method is called:
    </p>
<pre>
System.out.println(greeting);// Call println() method
helloworld.greet();          // Call greet() method
</pre>
    <p>
      We will discuss these kinds of statements in greater detail as we go along.
      One final type of statement that should be mentioned at this point is the
      <term>compound statement</term>
      (or <em>block</em>),
      which is a sequence of statements contained within braces ().
      We see three examples of this in the <c>HelloWorld</c> program.
      The body of a class definition extends from lines 7 through 19.
      The body of the <c>greet()</c> method is a block that extends from lines 10 through 12.
      The body of the <c>main()</c> method is a block that extends from lines 14 to 19.
    </p>
  </subsection>
  <subsection xml:id="subsec_expressions">
    <title>Expressions and Operators</title>
    <p>
      The manipulation of data in a program is done by using some kind of <em>expression</em>
      that specifies the action.
      An <em>expression</em> is Java code that specifies or produces a value in the program.
      For example, if you want to add two numbers,
      you would use an arithmetic expression,
      such as <m>num1 + num2</m>.
      If you want to compare two numbers,
      you would use a relation expression such as <m>num1 \lt num2</m>.
      As you can see,
      these and many other expressions in Java involve the use of special symbols called <term>operators</term>.
      Here we see the addition operator (<m>+</m>) and the less-than operator
      (<m>\lt</m>).
      We have already talked about the assignment operator
      (<m>=</m>).
    </p>
    <p>
      Java expressions and operators have a type that depends on the type of data that is being manipulated.
      For example,
      when adding two <c>int</c> values,
      such as <m>5 + 10</m>,
      the expression itself produces an <c>int</c> result.
      When comparing two numbers with the less than operator,
      <m>num1 \lt num2</m>,
      the expression itself produces a <c>boolean</c> type,
      either true or false.
    </p>
    <p>
      It is important to note that expressions cannot occur on their own.
      Rather they occur as part of the program's statements.
      Here are some additional examples of expressions:
    </p>
<pre>
num = 7      // An assignment expression of type int
num = square(7) // An method call expression of type int
num == 7     // An equality expression of type boolean
</pre>
    <p>
      The first of these is an assignment expression.
      It has a value of <c>7</c>, because it is assigning <c>7</c> to <c>num</c>. The second example is also an assignment expression,
      but this one has a method call, <c>square(7)</c>, on its right hand side.
      (We can assume that a method named <c>square()</c> has been appropriately defined in the program.)
      A method call is just another kind of expression.
      In this case, it has the value 49.
      Note that an assignment expression can be turned into a stand-alone assignment statement by placing a semicolon after it.
    </p>
    <p>
      The third expression is an equality expression,
      which has the value
<c>true</c>, assuming that the variable on its left is storing the value 7.
      It is important to note the difference between the assignment operator (<m>=</m>) and the equality operator
      (<m>==</m>).
    </p>
    <principle>
      <title>Equality and Assignment</title>
      <p>
        Be careful not to confuse <c>=</c> and <c>==</c>. The symbol <c>=</c> is the assignment operator.
        It assigns the value on its right-hand side to the variable on its left-hand side.
        The symbol <c>==</c> is the equality operator.
        It evaluates whether the expressions on its left- and right-hand sides have the same value and returns either <c>true</c> or
<c>false</c>.
      </p>
    </principle>
    <p>
      \secEXRHone{Self-Study Exercises}
      <ol>
        <li>
          <p>
            What is stored in the variable <c>num</c> after the following two statements are executed?
<pre>
int num = 11;
  num = 23 - num;
</pre>
          </p>
        </li>
        <li>
          <p>
            Write a statement that will declare a variable of type <c>int</c> called <c>num2</c>, and store in it the sum of 711 and 712.
          </p>
        </li>
      </ol>
    </p>
  </subsection>
  <subsection>
    <title>Class Definition</title>
    <p>
      A Java program consists of one or more class definitions.
      In the <c>HelloWorld</c> example,
      we are defining the <c>HelloWorld</c> class,
      but there are also three predefined classes involved in the program.
      These are the <c>Object</c>, <c>String</c>, and <c>System</c> classes all of which are defined in the Java class library.
      Predefined classes, such as these,
      can be used in any program.
    </p>
    <p>
      As the <c>HelloWorld</c> program's comments indicate,
      a class definition \marginpar{Class header} has two parts:
      a <em>class header</em> and a <em>class body</em>.
      In general, a class header takes the following form,
      some parts of which are optional (<em>opt</em>):
      <me>
        \hbox{ClassModifiers}_{\hbox{\scriptsize opt}} \hbox{class} \hbox{ClassName} \hbox{Pedigree}_{\hbox{\scriptsize opt}}
      </me>
    </p>
    <p>
      The class header for the <c>HelloWorld</c> class is:
    </p>
<pre>
public class HelloWorld extends Object
</pre>
    <p>
      The purpose of the header is to give the class its name (<c>HelloWorld</c>), identify its accessibility (<c>public</c> as opposed to <c>private</c>), and describe where it fits into the Java class hierarchy
      (as an extension of the <c>Object</c> class).
      In this case,
      the header begins with the optional access modifier, <c>public</c>, which declares that this class can be accessed by any other classes.
      The next part of the declaration identifies the name of the class, <c>HelloWorld</c>. And the last part declares that <c>HelloWorld</c> is a subclass of the <c>Object</c> class.
      We call this part of the definition the class's pedigree.
    </p>
    <p>
      As you recall from <xref ref="chapter-intro">Chapter</xref>,
      the <c>Object</c> class is the top class of the entire Java hierarchy.
      By declaring that <c>HelloWorld
extends Object</c>, we are saying that <c>HelloWorld</c> is a direct <em>subclass</em>
      of <c>Object</c>. In fact,
      it is not necessary to declare explicitly that <c>HelloWorld</c> extends <c>Object</c> because that is Java's default assumption.
      That is, if you omit the extends clause in the class header, Java will automatically assume that the class is a subclass of <c>Object</c>.
    </p>
    <p>
      The class's body,
      which is enclosed within curly brackets (), \marginpar{Class body} contains the declaration and definition of the elements that make up the objects of the class.
      This is where the object's attributes and actions are defined.
    </p>
  </subsection>
  <subsection xml:id="subsec_vardecl">
    <title>Declaring an Instance Variable</title>
    <p>
      There are generally two kinds of elements declared and defined in the class body:
      variables and methods.
      As we described in <xref ref="chapter-intro">Chapter</xref>,
      an instance variable is a variable that belongs to each object,
      or instance, of the class.
      That is, each instance of a class has its own copies of the class's instance variables.
      The <c>HelloWorld</c> class has a single instance variable, (<c>greeting</c>), which is declared as follows:
    </p>
<pre>
private String greeting = "Hello, World!";
</pre>
    <p>
      In general, an instance variable declaration has the following syntax,
      some parts of which are optional:
      <me>
        \hbox{Modifiers}_{\hbox{\scriptsize opt}} \hbox{Type} \hbox{VariableName} \hbox{InitializerExpression}_{\hbox{\scriptsize opt}}
      </me>
    </p>
    <p>
      Thus, a variable declaration begins with optional modifiers.
      In declaring the <c>greeting</c> variable,
      we use the access modifier,
<c>private</c>, to declare that <c>greeting</c>, which belongs to the
<c>HelloWorld</c> class,
      cannot be directly accessed by other objects.
      The next part of the declaration is the variable's type.
      In \marginpar{Information hiding} this case,
      the <c>greeting</c> variable is a <c>String</c>, which means that it can store a string object.
      The type is followed by the name of the variable,
      in this case (<c>greeting</c>).
      This is the name that is used to refer to this memory location throughout the class.
      For example,
      notice that the variable is referred to on line 11 where it is used in a <c>println()</c> statement.
    </p>
    <p>
      The last part of the declaration is an optional initializer expression.
      In this example, we use it to assign an initial value,
      <q>Hello, World!,</q>
      to the <c>greeting</c> variable.
    </p>
  </subsection>
  <subsection>
    <title>Defining an Instance Method</title>
    <p>
      Recall that a method is a named section of code that can be called or invoked to carry out an action or operation.
      In a Java class,
      the methods correspond to the object's behaviors or actions.
      The <c>HelloWorld</c> program has two method definitions:
      the <c>greet()</c> method and the <c>main()</c> method.
    </p>
    <p>
      A method definition consists of two parts:
      the method header and the method body.
      In general, a method header takes the following form,
      including some parts which are optional:
      <me>
        \hbox{Modifiers}_{\hbox{\scriptsize opt}} \hbox{ReturnType} \hbox{MethodName} \hbox{(} \hbox{ParameterList}_{\hbox{\scriptsize opt}} \hbox{)}
      </me>
    </p>
    <p>
      As with a variable declaration,
      a method definition begins with optional modifiers.
      For example,
      the definition of the
<c>greet()</c> method on line 9 uses the access modifier, <c>public</c>, to declare that this method can be accessed or referred to by other classes.
      The <c>main()</c> method,
      whose definition begins on line 13,
      is a special method, and is explained in the next section.
    </p>
    <p>
      The next part of the method header is the method's return type.
      This is the type of value, if any, that the method returns.
      Both of the methods in <c>HelloWorld</c> have a return type of <c>void</c>. This means that they don't return any kind of value.
      Void methods just execute the sequence of statements given in their bodies.
      For an example of a method that does return a value,
      take a look again at the declaration of the <c>getQuestion()</c> method in the <c>Riddle</c> class,
      which returns a <c>String</c>(Fig.
      <xref ref="fig_riddleclass"></xref>).
    </p>
    <p>
      The method's name follows the method's return type.
      This is the name that is used when the method is called.
      For example,
      the <c>greet()</c> method is called on line 17.
    </p>
    <p>
      Following the method's name is the method's parameter list.
      A <em>parameter</em> is a variable that temporarily stores data values that are being passed to the method when the method is called.
      Some methods,
      such as the <c>greet()</c> method,
      do not have parameters, because they are not passed any information.
      For an example of a method that does have parameters,
      see the <c>Riddle()</c> constructor,
      which contains parameters for the riddle's question and answer (Fig.
      <xref ref="fig_riddleclass"></xref>).
    </p>
    <p>
      The last part of method definition is its body,
      which contains a sequence of executable statements.
      An <term>executable statement</term>
      is a Java statement that takes some kind of action when the program is run.
      For example,
      the statement in the <c>greet()</c> method,
    </p>
<pre>
System.out.println(greeting);   //  Output statement
</pre>
    <p>
      prints a greeting on the console.
    </p>
  </subsection>
  <subsection>
    <title>Java Application Programs</title>
    <p>
      The HelloWorld program is an example of a Java
      <term>application program</term>,
      or a Java application, for short.
      An application program is a stand-alone program,
      <q>stand-alone</q>
      in the sense that it does not depend on any other program,
      like a Web browser, for its execution.
      Every Java application program must contain a <c>main()</c> method,
      which is where the program begins execution when it is run.
      For a program that contains several classes,
      it is up to the programmer to decide which class should contain the <c>main()</c> method.
      We don't have to worry about that decision for the HelloWorld,
      because it contains just a single class.
    </p>
    <p>
      Because of its unique role as the starting point for every Java application program,
      it is very important that the header for the main method be declared exactly as shown in the <c>HelloWorld</c> class:
    </p>
<pre>
public static void main(String args[])
</pre>
    <p>
      It must be declared <c>public</c> so it can be accessed from outside the class that contains it.
      The <c>static</c> modifier \marginpar{Class method} is used to designate <c>main()</c> as a class method.
      As you might recall from Chapter 0, a class method is a method that is associated directly with the class that contains it rather than with the objects of the class.
      A class method is not part of the class's objects.
      Unlike instance methods,
      which are invoked through a class's objects,
      a class method is called through the class itself.
      Thus, a class method can be called even before the program has created objects of that class.
      Because of <c>main()</c>'s special role as the program's starting point,
      it is necessary for <c>main()</c> to be a class method because it is called,
      by the Java runtime system, before the program has created any objects.
    </p>
    <p>
      The <c>main()</c> method has a <c>void</c> return type,
      which means it does not return any kind of value.
      Finally, notice that <c>main()</c>'s parameter list contains a declaration of some kind of <c>String</c> parameter named <em>args</em>.
      This is actually an array that can be used to pass string arguments to the program when it is started up.
      We won't worry about this feature until our chapter on arrays.
    </p>
  </subsection>
  <subsection>
    <title>Creating and Using Objects</title>
    <p>
      The body of the <c>main()</c> method is where the
<c>HelloWorld</c> program creates its one and only object.
      Recall that when it is run the <c>HelloWorld</c> program just prints the
      <q>Hello World!</q>
      greeting.
      As we noted earlier,
      this action happens in the
<c>greet()</c> method.
      So in order to make this action happen,
      we need to call the <c>greet()</c> method.
      However, because the <c>greet()</c> method is an instance method that belongs to a <c>HelloWorld</c> object,
      we first need to create a <c>HelloWorld</c> instance.
      This is what happens in the body of the <c>main()</c> method (Fig.
      <xref ref="fig_helloworld"></xref>).
    </p>
    <p>
      The <c>main()</c> method contains three statements:
    </p>
<pre>
HelloWorld helloworld;          // Variable declaration
helloworld = new HelloWorld();  // Object instantiation
helloworld.greet();             // Method invocation
</pre>
    <p>
      The first statement declares a variable of type
<c>HelloWorld</c>, which is then assigned a <c>HelloWorld</c> object.
      The second statement creates a <c>HelloWorld</c> object.
      This is done by invoking the <c>HelloWorld()</c> constructor method.
      Creating an object is called <term>object instantiation</term>
      because you are creating an instance of the object.
      Once a <c>HelloWorld</c> instance is created,
      we can use one of its instance methods to perform some task or operation.
      Thus, in the third statement,
      we call the <c>greet()</c> method,
      which will print
      <q>Hello World!</q>
      on the console.
    </p>
    <p>
      If you look back at the <c>HelloWorld</c> program in <xref ref="fig_helloworld">Figure</xref>
      you won't find a definition of a \marginpar{Default constructor} constructor method.
      This is not an error because Java will provide a default constructor if a class does not contain a constructor definition.
      The <term>default constructor</term>
      is a trivial constructor method,
      <q>trivial</q>
      because its body contains no statements.
      Here is what the default <c>HelloWorld()</c> constructor would look like:
    </p>
<pre>
public HelloWorld() {  }  // Default constructor
</pre>
    <p>
      For most of the classes we design,
      we will design our own constructors,
      just as we did in the <c>Riddle</c> class (Fig.
      <xref ref="fig_riddleclass"></xref>).
      We will use constructors to assign initial values to an object's instance variables or to perform other kinds of tasks that are needed when an object is created.
      Because the
<c>HelloWorld</c> object doesn't require any startup tasks,
      we can make do with the default constructor.
    </p>
    <p>
      The <c>HelloWorld</c> program illustrates the idea that an \marginpar{Interacting objects} object-oriented program is a collection of interacting objects.
      Although we create just a single <c>HelloWorld</c> object in the <c>main()</c> method,
      there are two other objects used in the program.
      One is the <c>greeting</c>, which is a <c>String</c> object consisting of the string
      <q>Hello, World!</q>. The other is the <c>System.out</c> object,
      which is a special Java system object used for printing.
    </p>
  </subsection>
  <subsection>
    <title>Java JFrames</title>
    <p>
      Java cann run a program in a <term>JFrame</term>
      so that the output and interaction occurs in a Window
      (or Frame).
      <xref ref="fig_hellojframe">Figure</xref>
      shows a Java program named <c>HelloWorldSwing</c>. This program does more or less the same thing as
    </p>
    <figure xml:id="fig_hellojframe">
      <caption><c>HelloWorldCanvas</c> program.</caption>
<pre>
/** File: HelloWorldSwing program */
import javax.swing.JFrame; // Import class names
import java.awt.Graphics;
import java.awt.Canvas;
public class HelloWorldCanvas extends Canvas // Class header
{
    // Start of body
    public void paint(Graphics g)
        // The paint method
    {
        g.drawString("Hello, World!", 10, 10);
    }  // End of paint
    public static void main(String[] args){
        HelloWorldCanvas c = new HelloWorldCanvas();
        JFrame f = new JFrame();
        f.add(c);
        f.setSize(150,50);
        f.setVisible(true);
    }}  // End of HelloWorldCanvas
</pre>
    </figure>
    <p>
      the <c>HelloWorld</c> application<mdash/>it displays the
      <q>Hello, World!</q>
      greeting.
      The difference is that it displays the greeting within a Window rather than directly on the console.
    </p>
    <p>
      As in the case of the <c>HelloWorld</c> console application program, <c>HelloWorldCanvas</c> consists of a class definition.
      It contains a single method definition,
      the <c>paint()</c> method,
      which contains a single executable statement:
    </p>
<pre>
g.drawString("Hello, World!",10,10);
</pre>
    <p>
      This statement displays the
      <q>Hello, World!</q>
      message directly in a Window.
      The <c>drawString()</c> method is one of the many drawing and painting methods defined in the <c>Graphics</c> class.
      Every Java Canvas comes with its own <c>Graphics</c> object,
      which is referred to here simply as <c>g</c>. Thus,
      we are using that object's
<c>drawString()</c> method to draw on the window.
      Don't worry if this seems a bit mysterious now.
      We'll explain it more fully when we take up graphics examples again.
    </p>
    <p>
      The <c>HelloWorldSwing</c> also contains some elements,
      such as the
<c>import</c> statements,
      that we did not find in the <c>HelloWorld</c> application.
      We will now discuss those features.
    </p>
  </subsection>
  <subsection>
    <title>Java Library Packages</title>
    <p>
      Recall that the <c>HelloWorld</c> application program used two pre-defined classes,
      the <c>String</c> and the <c>System</c> classes.
      Both of these classes are basic language classes in Java.
      The <c>HelloWorldSwing</c> program also uses pre-defined classes,
      such as <c>JFrame</c> and <c>Graphics</c>. However,
      these two classes are not part of Java's basic language classes.
      To understand the difference between these classes,
      it will be necessary to talk briefly about how the Java class library is organized.
    </p>
    <p>
      A <term>package</term> is a collection a inter-related classes in the Java class library.
      For example,
      the <c>java.lang</c> package contains classes,
      such as <c>Object</c>, <c>String</c>, and <c>System</c>, that are central to the Java language.
      Just about all Java programs use classes in this package.
      The <c>java.awt</c> package provides classes,
      such as <c>Button</c>, <c>TextField</c>, and <c>Graphics</c>, that are used in graphical user interfaces (GUIs).
      The <c>java.net</c> package provides classes used for networking tasks,
      and the <c>java.io</c> package provides classes used for input and output operations.
    </p>
    <p>
      All Java classes belong to some package,
      including those that are programmer defined.
      To assign a class to a package,
      you would provide a <c>package</c> statement as the first statement in the file that contains the class definition.
      For example,
      the files containing the definitions of the classes in the <c>java.lang</c> package all begin with the following statement.
    </p>
<pre>
package java.lang;
</pre>
    <p>
      If you omit <c>package</c> statement,
      as we do for the programs in this book, Java places such classes into an unnamed default package.
    </p>
    <p>
      Thus, for any Java class,
      its full name includes the name of the package that contains it.
      For example,
      the full name for the <c>System</c> class is <c>java.lang.System</c> and the full name for the <c>String</c> class is <c>java.lang.String</c>. Similarly,
      the full name for the <c>Graphics</c> class is <c>java.awt.Graphics</c>. In short,
      the full name for a Java class takes the following form:
      <me>
        \hbox{package.class}
      </me>
    </p>
    <p>
      In other words,
      the full name of any class provides its package name as a prefix.
    </p>
    <p>
      Of all the packages in the Java library,
      the <c>java.lang</c> package is the only one whose classes are available by their shorthand names to all Java programs.
      This means that when a program uses a class from the <c>java.lang</c> package,
      it can refer to it simply by its class name.
      For example,
      in the <c>HelloWorld</c> program we referred directly to the <c>String</c> class rather than to <c>java.lang.String</c>.
    </p>
  </subsection>
  <subsection>
    <title>The <c>import</c>Statement</title>
    <p>
      The <c>import</c> statement makes Java classes available to programs under their abbreviated names.
      Any public class in the Java class library is available to a program by its fully qualified name.
      Thus, if a program was using the <c>Graphics</c> class,
      it could always refer to it as <c>java.awt.Graphics</c>. However,
      being able to refer to
<c>Graphics</c> by its shorthand name,
      makes the program a bit shorter and more readable.
    </p>
    <p>
      The <c>import</c> statement doesn't actually load classes into the program.
      It just makes their abbreviated names available.
      For example,
      the import statements in <c>HelloWorldSwing</c> allow us to refer to the <c>JFrame</c>, <c>Canvas</c>, and <c>Graphics</c> classes by their abbreviated names (Fig.
      <xref ref="fig_hellojframe"></xref>).
    </p>
    <p>
      The <c>import</c> statement takes two possible forms:
      <me>
        \hbox{import } \hbox{package.class}
      </me>
      <me>
        \hbox{import } \hbox{package.*}\\
      </me>
    </p>
    <p>
      The first form allows a specific class to be known by its abbreviated name.
      The second form,
      which uses the asterisk as a wildcard characters ('*'), allows all the classes in the specified package to be known by their short names.
      The <c>import</c> statements in <c>HelloWorldSwing</c> are examples of the first form.
      The following example,
    </p>
<pre>
import java.lang.*;
</pre>
    <p>
      allows all classes in the <c>java.lang</c> package to be referred to by their class names alone.
      In fact, this particular
<c>import</c> statement is implicit in every Java program.
    </p>
  </subsection>
  <subsection xml:id="subsec_qualifiednames">
    <title>Qualified Names in Java</title>
    <p>
      In the previous subsections we have seen several examples of names in Java programs that used <em>dot notation</em>.
      A <term>qualified name</term> is a name that is separated into parts using Java's dot notation.
      Examples include package names,
      such as <c>java.awt</c>, class names,
      such as <c>javax.swing.JFrame</c>, and even method names,
      such as <c>helloworld.greet()</c>.
    </p>
    <p>
      Just as in our natural language,
      the meaning of a name within a Java program depends on the context.
      For example,
      the expression <c>helloworld.greet()</c> refers to the <c>greet()</c> method,
      which belongs to the <c>HelloWorld</c> class.
      If we were using this expression from within that class,
      you wouldn't need to qualify the name in this way.
      You could just refer to <c>greet()</c> and it would be clear from the context which method you meant.
    </p>
    <p>
      This is no different than using someone's first name (
      <q>Kim</q>
      ) when there's only one Kim around, but using a full name (
      <q>Kim Smith</q>
      ) when the first name alone would be too vague or ambiguous.
    </p>
    <p>
      One thing that complicates the use of qualified names is that they are used to refer to different kinds of things within a Java program.
      But this is no different,
      really, than in our natural language, where names (
      <q>George Washington</q>
      ) can refer to people, bridges, universities, and so on.
      Here again, just as in our natural language, Java uses the context to understand the meaning of the name.
      For example,
      the expression <c>java.lang.System</c> refers to the <c>System</c> class in the <c>java.lang</c> package,
      whereas the expression
<c>System.out.print()</c> refers to a method in the <c>System.out</c> object.
    </p>
    <p>
      How can you tell these apart?
      Java can tell them apart because the first one occurs as part of an <c>import</c> statement,
      so it must be referring to something that belongs to a package.
      The second expression would only be valid in a context where a method invocation is allowed.
      You will have to learn a bit more about the Java language before you'll be able to completely understand these names,
      but the following provide some naming rules to get you started.
    </p>
    <principle>
      <title>Library Class Names</title>
      <p>
        By convention,
        class names in Java begin with an uppercase letter.
        When referenced as part of a package,
        the class name is the last part of the name.
        For example, <c>java.lang.System</c> refers to the <c>System</c> class in the <c>java.lang</c> package.
      </p>
    </principle>
    <principle>
      <title>Dot Notation</title>
      <p>
        Names expressed in Java's <term>dot notation</term>
        depend for their meaning on the context in which they are used.
        In qualified names<mdash/>that is,
        names of the form X.Y.Z<mdash/>the last item in the name (Z) is the
        <term>referent</term><mdash/>that is,
        the element being referred to.
        The items that precede it (X.Y.) are used to qualify or clarify the referent.
      </p>
    </principle>
    <p>
      The fact that names are context dependent in this way certainly complicates the task of learning what's what in a Java program.
      Part of learning to use Java's built-in classes is learning where a particular object or method is defined.
      It is a syntax error if the Java compiler can't find the object or method that you are referencing.
    </p>
    <principle>
      <title>DEBUGGING TIP:Not Found Error</title>
      <p>
        If Java cannot find the item you are referring to, it will report an
        <q>X not found</q>
        error, where X is the class, method,
        variable, or package being referred to.
      </p>
    </principle>
  </subsection>
</section>