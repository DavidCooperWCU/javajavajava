<section xml:id="ch-sockets-exs">
    <title>Exercises</title>
<exercises>
<title>Socket Exercises</title>
    <p>
    <term>Note:</term> For programming exercises,
        first draw a UML class diagram describing all classes and their inheritance 
        relationships and/or associations.
    </p>
 <exercise label="jsox_matching_java_definitions">
      <title>Java Concept Matching</title>
      <statement>
	<p>
          Match each of the following 
	  Socket concepts.
	</p>
      </statement>
      <matches>
	<match>
	  <order>1</order>
          <premise><em>stream</em></premise>
          <response>a mechanism for carrying data in one direction </response>
	</match>
	<match>
	  <order>2</order>
          <premise><em>socket</em></premise>
          <response>a mechanism for connecting two programs using a client/server model to send data in two directions</response>
	</match>
	<match>
	  <order>3</order>
          <premise><em>The Internet</em> </premise>
          <response>possibly the largest interconnected set of networks on the planet. However, the dark web plus the Internet would be a larger interconnected set of networks, since it includes both the internet and additional private networks</response>
	</match>
	<match>
	  <order>4</order>
          <premise><em>an internet</em> </premise>
          <response> any set of two or more networks connected by the same medium, such as a router.  </response>
	</match>
	<match>
	  <order>5</order>
	  <premise><em>domain name</em> </premise>
          <response>a name that specifies a specific computer or group of computers  </response>
	</match>
	<match>
	  <order>6</order>
          <premise><em>port</em>  </premise>
          <response> a number that specifies the logical location or service on a particular machine </response>
	</match>
	<match>
	  <order>7</order>
          <premise>client</premise>
          <response> a program, such as a browser, that typically makes a request for a service to be performed..</response>
	</match>
	<match>
	  <order>8</order>
          <premise>server</premise>
          <response>a program, such as a web page that waits for request and performs the requested service </response>
	</match>
	<match>
	  <order>9</order>
          <premise> ethernet </premise>
          <response>a low level network protocol</response>
	</match>
	<match>
	  <order>10</order>
          <premise> local area network (LAN) </premise>
          <response>a set of computers connected using a single network protocol within a single property or a single organization</response>
	</match>
	<match>
	  <order>11</order>
          <premise> wide area network (WAN) </premise>
          <response>a network that connects local area networks together using routers and is often geographically dispersed</response>
	</match>

	  

<match>
	  <order>13</order>
          <premise> internetworking protocol </premise>
          <response>the protocol used in routers that allows computers to have numeric addresses that can be associeted with names.</response>
	</match>

<match>
	  <order>14</order>
          <premise> URL </premise>
          <response>a uniform resource locator includes a transfer protocol, a domain, and a path to the resource</response>
	</match>
	

      

      </matches>
      </exercise>
  
      
              
 <exercise label="jsox_protocol">       
<title>Protocol</title>       
 <statement>

        <p>
          What is a <em>protocol</em>?
          Give one or two examples of protocols that are used on the Internet.
        </p>
      </statement>
      <response />
    </exercise>
                    
 <exercise label="jsox_http_protocol_service">       
<title>HTTP Protocol Service</title>       
 <statement>

        <p>
          What service is managed by the HTTP protocol?
        </p>
      </statement>
      <response />
    </exercise>
                    
 <exercise label="jsox_client_applications">       
<title>HTTP client applications</title>       
 <statement>

        <p>
          Give examples of client applications that use the HTTP protocol.
        </p>
      </statement>
      <response />
    </exercise>
                    
 <exercise label="jsox_applet_limitations">       
<title>Applet Limitations</title>       
 <statement>

        <p>
          Why is it important that applets be limited in terms of their network and file system access?
          Describe the various networking restrictions that apply to Java applets.
        </p>
      </statement>
      <response />
    </exercise>
                    
 <exercise label="jsox_internet_protocol">       
<title>Internet Protocol</title>       
 <statement>

        <p>
          What does the <c>Internet Protocol</c> do?
          Describe how it would be used to join an ethernet and a token ring network.
        </p>
      </statement>
      <response />
    </exercise>
                    
 <exercise label="jsox_connect_exception">       
<title>ConnectException</title>       
 <statement>

        <p>
          Describe one or two circumstances under which a <c>ConnectException</c> would be thrown.
        </p>
      </statement>
      <response />
    </exercise>
                    
 <exercise label="jsox_code_audio_slide_show">       
<title>Audio Slide Show</title>       
 <statement>

        <p>
          Modify the <c>SlideShowFrame</c> so that it plays an audio file along with each slide.
        </p>
      </statement>
      <response />
    </exercise>
                    
 <exercise label="jsox_cryptogram_helper">       
<title>Cryptogram Helper</title>       
 <statement>

        <p>
          Design and implement a Java applet that downloads a random substitution cryptogram and provides an interface that helps the user try to solve the cryptogram.
          The interface should enable the user to substitute an arbitrary letter for the letters in the cryptogram.
          The cryptogram files should be stored in the same directory as the applet itself.
        </p>
      </statement>
      <response />
    </exercise>
                    
 <exercise label="jsox_code_random_joke">       
<title>Random Joke</title>       
 <statement>

        <p>
          Design and implement a Java application that displays a random message
          (or a random joke)
          each time the user clicks a
<c>GetMessage</c> button.
          The messages should be stored in a set of files in the same directory as the applet itself.
          Each time the button is clicked,
          the applet should download one of the message files.
        </p>
      </statement>
      <response />
    </exercise>
                    
 <exercise label="jsox_client_server_joke">       
<title>Client/Server Joke</title>       
 <statement>

        <p>
          Write a client/server application of the message or joke service described in the previous exercise.
          Your implementation should extend the <c>Server</c> and <c>Client</c> classes.
        </p>
      </statement>
      <response />
    </exercise>
                    
 <exercise label="jsox_code_scramble_service">       
<title>Scramble Service</title>       
 <statement>

        <p>
          Write an implementation of the scramble service.
          Given a word,
          the scramble service will return a string containing all possible permutations of the letter combinations in the word.
          For example, given
          <q>man,</q>
          the scramble service will return
          <q>amn, anm, man, mna, nam, nma.</q>
          Use the <c>Server</c> and <c>Client</c> classes in your design.
          (See the Self-Study Exercises for a description of the design.)
          Challenge: Modify the Nim server game in this chapter so that the client and server can negotiate the rules of the game,
          including how many sticks, how many pick ups per turn,
          and who goes first.
        </p>
      </statement>
      <response />
    </exercise>
    </exercises>
</section>    
