<section xml:id="chapter-summary18">
  <title>{Special Topic:} What Can Be Computed?</title>
  <p>
    {Did you} ever wonder whether there are problems that cannot be solved by a computer,
    no matter what kind of control structures are used?
    Well, back in 1939, in his seminal paper titled
    <q>On Computable Numbers,</q>
    Alan Turing proved that indeed there are an infinite number of unsolvable problems.
    Prior to this,
    mathematicians and logicians thought all problems could be solved.
    So Turing's proof was quite a blow!
  </p>
  <p>
    To help him prove this point, Turing defined an abstract computer,
    which has come to be known as a Turing machine.
    A Turing machine has an alphabet of symbols; a read/write head;
    an infinitely long tape on which the read/write head can write symbols,
    and from which it can also read symbols;
    and a control unit,
    which controls the movement and action of the read/write head.
    Note that the Turing machine elements correspond to key components of a real computer<mdash/>although Turing invented this concept a decade before the first computers were developed.
    The read/write head corresponds to a computer's central processing unit (CPU).
    The tape corresponds to the computer's memory.
    And the control unit corresponds to the computer program.
  </p>
  <p>
    A Turing machine represents a purely abstract concept of computation.
    It represents the pure idea of an algorithmic solution to a problem.
    Equipped with this concept, Turing was able to prove that there are unsolvable problems<mdash/>that is,
    problems for which no algorithm can arrive at a solution.
  </p>
  <p>
    One such problem is the <em>halting problem</em>.
    This problem asks whether an algorithm can be devised to determine whether an arbitrary program will eventually halt.
    If there were such an algorithm,
    it could be used to detect programs that contain infinite loops,
    a service that might be really helpful in an introductory computing lab,
    among other places!
    But, alas, there can be no such algorithm.
  </p>
  <p>
    Here's an outline of a proof that shows that the halting problem is unsolvable.
    (This particular version of the proof was suggested by J.<nbsp/>Glenn Brookshear in
    <em>Computer Science: An Overview</em>, Benjamin-Cummings, 1985.)
  </p>
  <p>
    Suppose you had a program, <em>P</em>,
    that solves the halting problem.
    That is, whenever <em>P</em> is given a self-halting program,
    it sets a variable <em>isTerminating</em> to true,
    and otherwise it sets <em>isTerminating</em> to false.
    Now let's create a new version of
    <em>P</em>, named <m>P\prime</m>,
    which is identical to <em>P</em>
    except that right after where <em>P</em>
    sets <em>isTerminating</em> to true or false,
    <m>P\prime</m> contains the following loop:
  </p>
  <p>
    \[29pc]
  </p>
<pre>
while (isTerminating == true);  // Infinite if isTerminating true
</pre>
  <p>
    In other words,
    if the input to <m>P\prime</m> is a self-terminating program,
    then <m>P\prime</m> will enter an infinite loop and it won't terminate.
    Otherwise, if a non-self-terminating program is input to <m>P\prime</m>,
    <m>P\prime</m> will skip the loop and will terminate.
  </p>
  <p>
    Now what if we give a representation of <m>P\prime</m> to itself.
    Will it halt?
    The answer generates a contradiction: If <m>P\prime</m> is a self-terminating program,
    then when it is input to itself, it will not terminate.
    And if <m>P\prime</m> is not self-terminating,
    when it is input to itself, it will terminate.
    Because our assumption that <em>P</em>
    solves the halting problem has led to a contradiction,
    we have to conclude that it wasn't a very good assumption in the first place.
    Therefore, there is no program that can solve the halting problem.
  </p>
  <p>
    The topic of computability is a fundamental part of the computer science curriculum,
    usually taught in a sophomore- or junior-level theory of computation course.
  </p>
  <p>
    \secSMHleft{Chapter Summary} \secKTH{Technical Terms} \begin{KT} conditional loop
  </p>
  <p>
    counting loop
  </p>
  <p>
    do-while statement
  </p>
  <p>
    infinite loop
  </p>
  <p>
    initializer
  </p>
  <p>
    limit bound
  </p>
  <p>
    loop body
  </p>
  <p>
    loop bound
  </p>
  <p>
    loop entry condition
  </p>
  <p>
    nested loop
  </p>
  <p>
    postcondition
  </p>
  <p>
    precondition
  </p>
  <p>
    priming read
  </p>
  <p>
    repetition structure
  </p>
  <p>
    sentinel bound
  </p>
  <p>
    unit indexing
  </p>
  <p>
    updater
  </p>
  <p>
    while statement
  </p>
  <p>
    zero indexing
  </p>
  <p>
    \end{KT}
  </p>
  <p>
    \secSMHtwo{Summary of Important Points}
    <ul>
      <li>
        <p>
          A <em>repetition structure</em> is a control structure
            <idx><h>repetition structure</h></idx>
          that allows a statement or sequence of statements to be repeated.
        </p>
      </li>
      <li>
        <p>
          All loop structures involve three elements<mdash/>an <em>initializer</em>,
          a <em>loop entry condition</em>
          or a <em>loop boundary condition</em>, and an <em>updater</em>.
        </p>
      </li>
      <li>
        <p>
          When designing a loop,
          it is important to analyze the loop structure to make sure that the loop bound will eventually be satisfied.
        </p>
      </li>
      <li>
        <p>
          The <c>for</c> statement
            <idx><h>for statement</h></idx>
          has the following syntax:
<pre>
for ( {\it initializer} ; {\it loop entry condition} ; {\it updater} )
    {\it for loop body} ;
</pre>\marginpar{ \TBT{0.5pc}{A summary of various loop bounds}
          <tabular>
            <row>
              <cell>\multicolumn{2}{l}{\rule{10pc}{1pt}}</cell>
            </row>
            <row>
              <cell>{Bound}</cell>
              <cell>{Example}</cell>
            </row>
            <row>
              <cell>[-4pt]\multicolumn{2}{l}{\rule{10pc}{0.5pt}}</cell>
            </row>
            <row>
              <cell><em>Counting</em></cell>
              <cell><em>k <m>\lt</m> <m>100</m></em>\cr <em>Sentinel</em></cell>
              <cell><em>input</em> != 9999\cr <em>Flag</em></cell>
              <cell><em>done</em> != <em>true</em>\cr <em>Limit</em></cell>
              <cell><em>amount <m>\lt</m> <m>0.5</m></em></cell>
            </row>
            <row>
              <cell>[-4pt]\multicolumn{2}{l}{\rule{10pc}{1pt}}</cell>
            </row>
          </tabular>
          \endTB}
        </p>
      </li>
      <li>
        <p>
          The <c>while</c> statement takes the following form:
<pre>
{\tt while (}{\it loop entry condition}{\tt)}
    {\it loop body} ;
</pre>
        </p>
      </li>
      <li>
        <p>
          The <c>do-while</c> statement has the following general form:
<pre>
{\tt do}
    {\it loop body} ;
{\tt while (}{\it loop entry condition}{\tt )} ;
</pre>
        </p>
      </li>
      <li>
        <p>
          When designing a loop,
          it is important to analyze the loop structure to make sure that the loop bound will eventually be satisified.
          Table<nbsp/>6.2 summarizes the types of loop bounds that we have identified.
        </p>
      </li>
      <li>
        <p>
          <em>Structured programming
            <idx><h>structured programming</h></idx>
          </em> is the practice of writing programs that are built up from a small set of predefined control structures<mdash/>the
          <em>sequence</em>, <em>selection</em>,
          <em>repetition</em>, and <em>method-call</em> structures.
          An important feature of these structures is that each has a single entry and exit.
        </p>
      </li>
      <li>
        <p>
          A <em>precondition</em> is a condition that must be true before a certain code segment executes.
          A <em>postcondition</em> is a condition that must be true when a certain code segment is finished.
          Preconditions and postconditions should be used in the design, coding,
          documentation, and debugging of algorithms and methods.
        </p>
      </li>
    </ul>
  </p>
  <p>
    { \rule[0pt]{40.5pc}{0.5pt}} \epsfig{file=../commonart/eoc2text.eps,
    height=4pt,width=40.5pc,clip=} \marginpar{ { \uppercase{Solutions to Self-Study Exercises} } } \newcommand{\secANSHleft}{ {\rule[0pt]{40.5pc}{0.5pt}} \epsfig{file=../commonart/eoc2text.eps,
    height=4pt,width=40.5pc,clip=} \marginpar{ { \uppercase{Solutions to Self-Study Exercises} } } \newcommand{\secKTH}[1]{{ #1} } \newcommand{\secLREXRH}[1]{{ { \uppercase{#1}}} } \def\endpracticedesign{ {\rule[0pt]{27pc}{0.5pt}} } \newcommand{\secHsix}[1]{{#1} } \newcommand{\secHfive}[2]{{ \rule[16pt]{27pc}{0.5pt} }\newcommand{\secBXsixHone}[1]{{#1} } \newcommand{\secBXsixBTHleft}[1]{ {\rule[0pt]{44.45pc}{2pt}} \marginpar{ }\newcommand{\secBXsevenHone}[1]{{#1} }\newcommand{\secCOBH}[1] {{\uppercase{#1}} }\newcommand{\secCOLH}[1] {{\uppercase{#1}} }\newcommand{\secSMH}[1]{ {\rule[0pt]{40.5pc}{1pt}} \epsfig{file=../commonart/eoc2text.eps,
    height=4pt,width=40.5pc,clip=} \marginpar{ { \uppercase{#1} } } } \newcommand{\secSMHleft}[1]{ {\rule[0pt]{40.5pc}{0.5pt}} \epsfig{file=../commonart/eoc2text.eps,
    height=4pt,width=40.5pc,clip=} \marginpar{ \uppercase{#1} } } \newcommand{\secSMHtwo}[1]{{ #1} }\newcommand{\secEXRHone}[1]{{\uppercase{#1}} } \newcounter{EXRLLcount} { \marginpar{{From the Java Library} #1} } {\begin{minipage}{26pc}}{\end{minipage}} \rule[0pt]{27pc}{#1} } \begin{minipage}[t]{26pc} { \end{minipage} } \rule[0pt]{#2}{#1} } \begin{minipage}[t]{#2} { \end{minipage} } \rule[0pt]{40pc}{#1} } \begin{minipage}[t]{26pc} { \end{minipage} } \rule[0pt]{#2}{#1}
    <ul>
      <li>
        <p>
          Identify the syntax error in the following <c>for</c> loop statements:
          <ol>
            <li>
              <title>a</title>
              <p>
                Commas are used instead of semicolons in the header.
<pre>
for (int k = 5; k &lt; 100; k++)
     System.out.println(k);
</pre>
              </p>
            </li>
            <li>
              <title>b</title>
              <p>
                There shouldn't be 3 semicolons in the header
<pre>
for (int k = 0; k &lt; 12 ; k--)
     System.out.println(k);
</pre>
              </p>
            </li>
          </ol>
        </p>
      </li>
      <li>
        <p>
          Identify those statements that result in infinite loops:
          <ol>
            <li>
              <title>a</title>
              <p>
                Infinite loop because k is never incremented.
              </p>
            </li>
            <li>
              <title>b</title>
              <p>
                Infinite loop because k is always odd and thus never equal to 100.
              </p>
            </li>
          </ol>
        </p>
      </li>
      <li>
        <p>
          Your sister is learning to count by fours.
          Write a <c>for</c> loop that prints the following sequence of numbers: 1, 5, 9, 13, 17, 21, 25.
<pre>
for (int k = 1; k &lt;= 25; k = k+4)
    System.out.print(k + " ");
</pre>
        </p>
      </li>
      <li>
        <p>
          What value will <em>j</em> have when the following loop terminates?
          <em>Answer</em>:
          <em>j</em> will be undefined when the loop terminates.
          It is a local variable whose scope is limited to the loop body.
<pre>
for (int i = 0; i &lt; 10; i++)
{
   int j;
   j = j + 1;}
</pre>
        </p>
      </li>
      <li>
        <p>
          Write a nested <c>for</c> loop to print the following geometric pattern:
<pre>
#
# #
# # #
# # # #
# # # # #
for (int row = 1; row &lt;= 5; row++)  {    // For each row
  for (int col = 1; col &lt;= row; col++) // Columns per row
    System.out.print('#');
  System.out.println();                // New line} // row
</pre>
        </p>
      </li>
      <li>
        <p>
          Identify the syntax error in the following <c>while</c> structures:
          <ol>
            <li>
              <title>a</title>
              <p>
<pre>
int k = 5;
while (k &lt; 100) {
    System.out.println(k);
    k++                     &lt;&lt; Missing semicolon}
</pre>
              </p>
            </li>
            <li>
              <title>b</title>
              <p>
<pre>
int k = 0;
while (k &lt; 12;) {           &lt;&lt; Extra semicolon
    System.out.println(k);
    k++;}
</pre>
              </p>
            </li>
          </ol>
        </p>
      </li>
      <li>
        <p>
          Determine the output and/or identify the error in each of the following
<c>while</c> structures.
          <ol>
            <li>
              <title>a</title>
              <p>
<pre>
int k = 0;
while (k &lt; 100)
  System.out.println(k);  &lt;&lt; Missing updater in loop body
</pre>Output:
                infinite loop prints 0 0 0 0 0...
              </p>
            </li>
            <li>
              <title>b</title>
              <p>
<pre>
while (k &lt; 100) {           &lt;&lt; Missing initializer
  System.out.println(k);
  k++;}
</pre>Output:
                unpredictable since k's initial value is not known
              </p>
            </li>
          </ol>
        </p>
      </li>
      <li>
        <p>
          Your younger sister is now learning how to count by sixes.
          Write a <c>while</c> loop that prints the following sequence of numbers: 0, 6, 12, 18, 24, 30, 36.
<pre>
int k = 0;                 // Initializer
   while (k &lt;= 36) {          // Loop-entry condition
       System.out.println(k);
       k += 6;                  // Updater
   }
</pre>
        </p>
      </li>
      <li>
        <p>
          If <em>N</em> is even, divide it by 2.
          If <em>N</em> is odd, subtract 1 and then divide it by 2.
          This will generate a sequence that is guaranteed to terminate at 0.
          For example, if <em>N</em> is initially 15,
          then you get the sequence 15, 7, 3, 1, 0.
          Write a method that implements this sequence using a <c>while</c> statement.
<pre>
public static void sub1Div2(int N) {
    while(N != 0) {
        System.out.print(N + " ");
        if (N % 2 == 0)
            N = N / 2;
        else
            N = (N - 1) / 2;
    }
    System.out.println( N );} // sub1Div2()
</pre>
        </p>
      </li>
      <li>
        <p>
          Identify the syntax error in the following <c>do-while</c> structures:
          <ol>
            <li>
              <title>a</title>
              <p>
<pre>
int k = 0;
do while (k &lt; 100) &lt;&lt; Misplaced condition
{
     System.out.println(k);
     k++;}                    &lt;&lt; Belongs here
</pre>
              </p>
            </li>
            <li>
              <title>b</title>
              <p>
<pre>
int k = 0;
do {
    System.out.println(k);
    k++;} while (k &lt; 12) &lt;&lt; Missing semicolon
</pre>
              </p>
            </li>
          </ol>
        </p>
      </li>
      <li>
        <p>
          Your sister has moved on to counting by sevens.
          Write a <c>do-while</c> loop that prints the following sequence of numbers: 1, 8, 15, 22, 29, 36, 43.
<pre>
n = 1;                           // Initializer
do {
    System.out.print(n + " ");
    n += 7;                      // Updater} while (n &lt;= 43);                // Loop entry condition
</pre>
        </p>
      </li>
      <li>
        <p>
          Write a method to input and validate pizza sales.
<pre>
public int getAndValidatePizzaPrice() {// Uses KeyboardReader
  int pizza = 0;
  do {
    reader.prompt("Input a pizza price (8, 10, or 15) ");
    reader.prompt("or 99 to end the list >> ");
    pizza = reader.getKeyboardInteger();
    if ((pizza != 99) AmPaMp (pizza != 8) AmPaMp (pizza != 10) AmPaMp
                       (pizza != 15))
      System.out.println("Error: you've entered an "
       + "invalid pizza price\n");    // Error input
    else                               // OK input
        System.out.println("You input " + pizza + "\n");
  } while ((pizza != 99) AmPaMp (pizza != 8) AmPaMp
                   (pizza != 10) AmPaMp (pizza != 15));
  return pizza;} // getAndValidatePizzaPrice()
</pre>
        </p>
      </li>
      <li>
        <p>
          Write a method to input and validate pizza sales using the numbers 1, 2, and 3 to represent pizzas at different price levels.
<pre>
public int getAndValidatePizzaPrice() { // Uses KeyboardReader
  int pizza = 0;
  do {
    reader.prompt("Input a 1,2 or 3 to indicate pizza"
              + "price ( 1(<m>8), 2(</m>10), or 3($15) ) ");
    reader.prompt("or 0 to end the list >> ");
    pizza = reader.getKeyboardInteger();
    if ((pizza &lt; 0) || (pizza > 3))  // Error check
        System.out.println("Error: you've entered an "
                                + "invalid value\n");
    else                                // OK input
        System.out.println("You input " + pizza + "\n");
  } while ( (pizza &lt; 0) || (pizza > 3) );
  if (pizza == 1)
    return 8;
  else if (pizza == 2)
    return 10;
  else if (pizza == 3)
    return 15;
  else
    return 0;} // getAndValidatePizzaPrice()
</pre>
        </p>
      </li>
      <li>
        <p>
          For each of the following problems,
          decide whether a counting loop structure,
          a <c>while</c> structure,
          or a
<c>do-while</c> structure should be used,
          and write a pseudocode algorithm. \begin{ANSBL}
        </p>
      </li>
      <li>
        <p>
          Printing the names of all the visitors to a Web site could use a counting loop because the exact number of visitors is known.
<pre>
for each name in the visitor's log
    print the name
</pre>
        </p>
      </li>
      <li>
        <p>
          Validating that a user has entered a positive number requires a <c>do-while</c> structure in which you repeatedly read a number and validate it.
<pre>
do
    read a number
    if number is invalid, print error message
while number is invalid
</pre>
        </p>
      </li>
      <li>
        <p>
          Changing all the backslashes (<m>\backslash</m>) in a Windows Web page address,
          to the slashes (/) used in a Unix Web page address.
<pre>
for each character in the Web page address
    if it is a backslash replace it with slash
</pre>
        </p>
      </li>
      <li>
        <p>
          Finding the largest in a list of numbers requires a <c>while</c> loop to guard against an empty list.
<pre>
initialize maxMPG to smallest possible number
while there are more cars in the database
    if current car's MPG is greater than maxMPG
        replace maxMPG with it
</pre>\end{ANSBL}
        </p>
      </li>
      <li>
        <p>
          Identify any errors in the following switch structures (if there is no error,
          specify the output):
          <ol>
            <li>
              <title>a</title>
              <p>
<pre>
int k = 0;
   switch (k)  // Syntax error: missing braces
   case 0:
       System.out.println("zero");
       break;
   case 1:
       System.out.println("one");
       break;
   default:
       System.out.println("default");
       break;
</pre>
              </p>
            </li>
            <li>
              <title>b</title>
              <p>
<pre>
int k = 0;
   switch (k + 1)
   {
       case 0:
           System.out.println("zero");
           break;
       case 1:
           System.out.println("one"); // Output "one"
           break;
       default:
           System.out.println("default");
           break;
   }
</pre>
              </p>
            </li>
            <li>
              <title>c</title>
              <p>
<pre>
int k = 6;
   switch (k / 3.0) // Syntax error: not an integral value
   {
       case 2:
           System.out.println("zero");
           break;
       case 3:
           System.out.println("one");
           break;
       default:
           System.out.println("default");
           break;
   }
</pre>
              </p>
            </li>
          </ol>
        </p>
      </li>
      <li>
        <p>
          A <c>switch</c> statement to print ice cream flavors:
<pre>
switch (flavor)
{
    case 1:
        System.out.println("Vanilla");
        break;
    case 2:
        System.out.println("Chocolate");
        break;
    case 3:
        System.out.println("Strawberry");
        break;
    default:
        System.out.println("Error");}
</pre>
        </p>
      </li>
      <li>
        <p>
          <pre>
public final int VANILLA = 0,
                 CHOCOLATE = 1,
                 STRAWBERRY = 2;
switch (flavor)
{
    case VANILLA:
        System.out.println("Vanilla");
        break;
    case CHOCOLATE:
        System.out.println("Chocolate");
        break;
    case STRAWBERRY:
        System.out.println("Strawberry");
        break;
    default:
        System.out.println("Error");}
</pre>
        </p>
      </li>
      <li>
        <p>
          Identify the pre- and postconditions on
          <em>j</em> and <em>k</em>
          where indicated in the following code segment:
<pre>
int j = 0; k = 5;
do {
    if (k % 5 == 0) {
                      // Precondition: j &lt;= k
        j += k;
        k--;
    }
    else k *= k;} while (j &lt;= k);
                      // Postcondition: j > k
</pre>
        </p>
      </li>
      <li>
        <p>
          Identify the pre- and postconditions for the following method,
          which computes <m>x^n</m> for <m>n >= 0</m>.
<pre>
// Precondition: N >= 0
 // Postcondition: power(x,n) == x to the n
 public double power(double x, int n ) {
     double pow = 1;
     for (int k = 1; k &lt;= n; k++)
         pow = pow * x;
     return pow;
 } // power()
</pre>
        </p>
      </li>
    </ul>
  </p>
  <p>
    {\rule[0pt]{40.5pc}{0.5pt}} \epsfig{file=../commonart/eoc2text.eps,
    height=4pt,width=40.5pc,clip=} \marginpar{ { \uppercase{Exercises} } }
  </p>
  <ol>
    <li>
      <p>
        Explain the difference between the following pairs of terms: \marginpar{<term>Note:</term>
        For programming exercises,
        <term>first</term> draw a UML class diagram describing all classes and their inheritance relationships and/or associations.}
      </p>
      <ol>
        Counting loop and <em>conditional loop</em>. For statement and <em>while statement</em>. While statement and <em>do-while statement</em>. Zero indexing and <em>unit indexing</em>. Sentinel bound and <em>limit bound</em>. Counting bound and <em>flag bound</em>. Loop initializer and <em>updater</em>. Named constant and <em>literal</em>. Compound statement and <em>null statement</em>.
      </ol>
    </li>
    <li>
      <p>
        Fill in the blank.
        <ol>
          <li>
            <p>
              The process of reading a data item before entering a loop is known as a \rule{30pt}{0.5pt} .
            </p>
          </li>
          <li>
            <p>
              A loop that does nothing except iterate is an example of \rule{40pt}{0.5pt} .
            </p>
          </li>
          <li>
            <p>
              A loop that contains no body is an example of a \rule{40pt}{0.5pt} statement.
            </p>
          </li>
          <li>
            <p>
              A loop whose entry condition is stated as
              <m>( k \lt 100\; ||\; k >= 0)</m> would be an example of an \rule{40pt}{0.5pt} loop.
            </p>
          </li>
          <li>
            <p>
              A loop that should iterate until the user types in a special value should use a \rule{40pt}{0.5pt} bound.
            </p>
          </li>
          <li>
            <p>
              A loop that should iterate until its variable goes from 5 to 100 should use a \rule{40pt}{0.5pt} bound.
            </p>
          </li>
          <li>
            <p>
              A loop that should iterate until the difference between two values is less than 0.005 is an example of a \rule{40pt}{0.5pt} bound.
            </p>
          </li>
        </ol>
      </p>
    </li>
    <li>
      <p>
        Identify the syntax errors in each of the following:
        <ol>
          <li>
            <p>
              for (int k = 0; k &lt; 100; k++) System.out.println(k)
            </p>
          </li>
          <li>
            <p>
              for (int k = 0; k &lt; 100; k++); System.out.println(k);
            </p>
          </li>
          <li>
            <p>
              int k = 0 while k &lt; 100 { System.out.println(k); k++;}
            </p>
          </li>
          <li>
            <p>
              int k = 0; do { System.out.println(k);
              k++;} while k &lt; 100 ;
            </p>
          </li>
        </ol>
      </p>
    </li>
    <li>
      <p>
        Determine the output and/or identify the error in each of the following code segments:
        <ol>
          <li>
            <p>
              for (int k = 1; k == 100; k += 2) System.out.println(k);
            </p>
          </li>
          <li>
            <p>
              int k = 0; while (k &lt; 100) System.out.println(k); k++;
            </p>
          </li>
          <li>
            <p>
              for (int k = 0; k &lt; 100; k++) ; System.out.println(k);
            </p>
          </li>
        </ol>
      </p>
    </li>
    <li>
      <p>
        Write pseudocode algorithms for the following activities,
        paying particular attention to the <em>initializer</em>,
        <em>updater</em>, and <em>boundary condition</em> in each case.
        <ol>
          a softball game a five-question quiz looking up a name in the phone book
        </ol>
      </p>
    </li>
    <li>
      <p>
        Identify the pre- and postconditions for each of the statements that follow.
        Assume that all variables are <c>int</c> and have been properly declared.
        <ol>
          <li>
            <p>
              int result = x / y;
            </p>
          </li>
          <li>
            <p>
              int result = x % y;
            </p>
          </li>
          <li>
            <p>
              int x = 95; do x /= 2; while(x >= 0);
            </p>
          </li>
        </ol>
      </p>
    </li>
    <li>
      <p>
        Write three different loops<mdash/>a <c>for</c> loop,
        a <c>while</c> loop,
        and a <c>do-while</c> loop<mdash/>to print all the multiples of 10,
        including 0, up to and including 1,000.
      </p>
    </li>
    <li>
      <p>
        Write three different loops<mdash/>a <c>for</c> loop,
        a <c>while</c> loop,
        and a <c>do-while</c> loop<mdash/>to print the following sequence of numbers: 45, 36, 27, 18, 9, 0, <m>-9</m>,
        <m>-18</m>,
        <m>-27</m>, <m>-36</m>, <m>-45</m>.
      </p>
    </li>
    <li>
      <p>
        Write three different loops<mdash/>a <c>for</c> loop,
        a while <c>loop</c>, and a <c>do-while</c> loop<mdash/>to print the following ski-jump design:
<pre>
#
# #
# # #
# # # #
# # # # #
# # # # # #
# # # # # # #
</pre>
      </p>
    </li>
    <li>
      <p>
        The Straight Downhill Ski Lodge in Gravel Crest, Vermont,
        gets lots of college students on breaks.
        The lodge likes to keep track of repeat visitors.
        Straight Downhill's database includes an integer variable,
        <em>visit</em>,
        which gives the number of times a guest has stayed at the lodge (1 or more).
        Write the pseudocode to catch those visitors who have stayed at the lodge at least twice and to send them a special promotional package
        (pseudocode = send promo). (<em>Note:</em>
        The largest number of stays recorded is eight.
        The number nine is used as an end-of-data flag.)
      </p>
    </li>
    <li>
      <p>
        Modify your pseudocode in the previous exercise.
        In addition to every guest who has stayed at least twice at the lodge receiving a promotional package,
        any guest with three or more stays should also get a $40 coupon good for lodging,
        lifts, or food.
      </p>
    </li>
    <li>
      <p>
        Write a method that is passed a single parameter, <em>N</em>,
        and displays all the even numbers from 1 to <em>N</em>.
      </p>
    </li>
    <li>
      <p>
        Write a method that is passed a single parameter, <em>N</em>,
        that prints all the odd numbers from 1 to <em>N</em>.
      </p>
    </li>
    <li>
      <p>
        Write a method that is passed a single parameter, <em>N</em>,
        that prints all the numbers divisible by 10 from <em>N</em> down to 1.
      </p>
    </li>
    <li>
      <p>
        Write a method that is passed two parameters<mdash/>a <c>char</c><em>Ch</em>
        and an <c>int</c><em>N</em><mdash/>and prints a string of <em>N Chs</em>.
      </p>
    </li>
    <li>
      <p>
        Write a method that uses a nested <c>for</c> loop to print the following multiplication table:
<pre>
1  2  3  4  5  6  7  8  9
1  1
2  2  4
3  3  6  9
4  4  8 12 16
5  5 10 15 20 25
6  6 12 18 24 30 36
7  7 14 21 28 35 42 48
8  8 16 24 32 40 48 56 64
9  9 18 27 36 45 54 63 72 81
</pre>
      </p>
    </li>
    <li>
      <p>
        Write a method that uses nested <c>for</c> loops to print the patterns that follow.
        Your method should use the following statement to print the patterns: <c>System.out.print('#')</c>.
<pre>
# # # # # # # #     # # # # # # # #   # # # # # # # #   # # # # # # # #
  # # # # # # #     # # # # # # #       #         #                 #
    # # # # # #     # # # # # #           #     #                 #
      # # # # #     # # # # #               # #                 #
        # # # #     # # # #                 # #               #
          # # #     # # #                 #     #           #
            # #     # #                 #         #       #
              #     #                 # # # # # # # #   # # # # # # # #
</pre>
      </p>
    </li>
    <li>
      <p>
        Write a program that asks the user for the number of rows and the number of columns in a box of asterisks.
        Then use nested loops to generate the box.
      </p>
    </li>
    <li>
      <p>
        Write a Java application that lets the user input a sequence of consecutive numbers.
        In other words,
        the program should let the user keep entering numbers as long as the current number is one greater than the previous number.
      </p>
    </li>
    <li>
      <p>
        Write a Java application that lets the user input a sequence of integers terminated by any negative value.
        The program should then report the largest and smallest values that were entered.
      </p>
    </li>
    <li>
      <p>
        How many guesses does it take to guess a secret number between 1 and <em>N</em>?
        For example, I'm thinking of a number between 1 and 100.
        I'll tell you whether your guess is too high or too low.
        Obviously, an intelligent first guess would be 50.
        If that's too low, an intelligent second guess would be 75.
        And so on.
        If we continue to divide the range in half,
        we'll eventually get down to one number.
        Because you can divide 100 seven times (50, 25, 12, 6, 3, 1, 0),
        it will take at most seven guesses to guess a number between 1 and 100.
        Write a Java Swing program that lets the user input a positive integer,
        <em>N</em>,
        and then reports how many guesses it would take to guess a number between 1 and <em>N</em>.
      </p>
    </li>
    <li>
      <p>
        Suppose you determine that the fire extinguisher in your kitchen loses <em>X</em>
        percent of its foam every day.
        How long before it drops below a certain threshold (<em>Y</em> percent),
        at which point it is no longer serviceable?
        Write a Java Swing program that lets the user input the values
        <em>X</em> and <em>Y</em>
        and then reports how many weeks the fire extinguisher will last.
      </p>
    </li>
    <li>
      <p>
        Leibnitz's method for computing <m>\pi</m> is based on the following convergent series:
        <men>
          \frac{\pi}{4} \; = 1 \; - \; \frac{1}{3} \; + \; \frac{1}{5} \; - \; \frac{1}{7} + \; \cdots
        </men>
        How many iterations does it take to compute <m>\pi</m> to a value between 3.141 and 3.142 using this series?
        Write a Java program to find out.
      </p>
    </li>
    <li>
      <p>
        Newton's method for calculating the square root of <em>N</em>
        starts by making a (nonzero) guess at the square root.
        It then uses the original guess to calculate a new guess,
        according to the following formula:
<pre>
guess = (( N / guess) + guess) / 2;
</pre>No matter how wild the original guess is,
        if we repeat this calculation,
        the algorithm will eventually find the square root.
        Write a square root method based on this algorithm.
        Then write a program to determine how many guesses are required to find the square roots of different numbers.
        Uses <c>Math.sqrt()</c> to determine when to terminate the guessing.
      </p>
    </li>
    <li>
      <p>
        Your employer is developing encryption software and wants you to develop a Java Swing Program that will display all of the primes less than <em>N</em>,
        where <em>N</em> is a number to be entered by the user.
        In addition to displaying the primes themselves,
        provide a count of how many there are.
      </p>
    </li>
    <li>
      <p>
        Your little sister asks you to help her with her multiplication and you decide to write a Java application that tests her skills.
        The program will let her input a starting number, such as 5.
        It will generate multiplication problems ranging from from
        <m>5 \times 1</m> to <m>5 \times 12</m>.
        For each problem she will be prompted to enter the correct answer.
        The program should check her answer and should not let her advance to the next question until the correct answer is given to the current question.
      </p>
    </li>
    <li>
      <p>
        Write an application that prompts the user for four values and draws corresponding bar graphs using an ASCII character.
        For example,
        if the user entered 15, 12, 9, and 4, the program would draw
<pre>
******************
************
*********
****
</pre>
      </p>
    </li>
    <li>
      <p>
        Revise the application in the previous problem so that the bar charts are displayed vertically.
        For example,
        if the user inputs 5, 2, 3, and 4, the program should display
<pre>
**
 **       **
 **    ** **
 ** ** ** **
 ** ** ** **
-------------
</pre>
      </p>
    </li>
    <li>
      <p>
        The Fibonacci
          <idx><h>Fibonacci sequence</h></idx>
        sequence (named after the Italian mathematician Leonardo of Pisa,
        ca. 1200) consists of the numbers <m>0,1,1,2,3,5,8,13,\dots</m> in which each number
        (except for the first two)
        is the sum of the two preceding numbers.
        Write a method <c>fibonacci(N)</c> that prints the first
        <em>N</em> Fibonacci numbers.
      </p>
    </li>
    <li>
      <p>
        The Nuclear Regulatory Agency wants you to write a program that will help determine how long certain radioactive substances will take to decay.
        The program should let the user input two values:
        a string giving the substance's name and its half-life in years. (A substance's half-life is the number of years required for the disintegration of half of its atoms.) The program should report how many years it will take before there is less than 2 percent of the original number of atoms remaining.
      </p>
    </li>
    <li>
      <p>
        Modify the <c>CarLoan</c> program so that it calculates a user's car payments for loans of different interest rates and different loan periods.
        Let the user input the amount of the loan.
        Have the program output a table of monthly payment schedules.
      </p>
    </li>
  </ol>
  <p>
    { The next chapter also contains a number of loop exercises.}
  </p>
</section>