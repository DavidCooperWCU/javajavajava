<section xml:id="sec_systemclass">
  <title>From the Java Library: System and
  PrintStream</title>
  <p>
    \marginpar{ \psfig{file=../commonart/www_dg.eps}
    <em>java.sun.com/j2se/1.5.0/docs/api/</em>} Java comes with a library of classes that can be used to perform common tasks.
    The Java class library is organized into a set of packages,
    where each package contains a collection of related classes.
    Throughout the book we will identify library classes and explain how to use them.
    In this section we introduce the <c>System</c> and <c>PrintStream</c> classes,
    which are used for printing a program's output.
  </p>
  <p>
    Java programs need to be able to accept input and to display output.
    Deciding how a program will handle input and output (I/O) is part of designing its
    <em>user interface</em>,
    a topic we take up in detail in Chapter 4.
    The simplest type of user interface is a
    <em>command-line interface</em>,
    in which input is taken from the command line through the keyboard,
    and output is displayed on the console.
    Some Java applications use this type of interface.
    Another type of user interface is a
    <em>Graphical User Interface (GUI)</em>,
    which uses buttons, text fields,
    and other graphical components for input and output.
    Java applets use GUIs as do many Java applications.
    Because we want to be able to write programs that generate output,
    this <image width="73%" source="1f6.png"/>
  </p>
  <p>
    section describes how Java handles simple console output.
  </p>
  <p>
    In Java, any source or destination for I/O is considered a
    <em>stream</em> of bytes or characters.
    To perform output, we insert bytes or characters into the stream.
    To perform input, we extract bytes or characters from the stream.
    Even characters entered at a keyboard,
    if considered as a sequence of keystrokes,
    can be represented as a stream.
  </p>
  <p>
    There are no I/O statements in the Java language.
    Instead, I/O is handled through methods that belong to classes contained in the <c>java.io</c> package.
        <idx><h>java.io package</h></idx>
    We have already seen how the output method <c>println()</c> is used to output a string to the console.
    For example,
    the following <c>println()</c> statement
  </p>
<pre>
System.out.println("Hello, World");
</pre>
  <p>
    prints the message
    <q>Hello, World</q>
    on the Java console.
    Let's now examine this statement more carefully to see how it makes use of the Java I/O classes.
  </p>
  <p>
    The <c>java.io.PrintStream</c> class is Java's printing expert,
    so to speak.
    It contains a variety of <c>print()</c> and <c>println()</c> methods that can be used to print all of the various types of data we find in a Java program.
    A partial definition of <c>PrintStream</c> is shown in <xref ref="fig_printstreamUML">Figure</xref>.
    Note <image width="73%" source="chptr01/printstr.png"/> \caption{A UML class diagram of the <c>PrintStream</c> class. } that in this case the <c>PrintStream</c> class has no attributes,
    just operations or methods.
  </p>
  <p>
    Because the various <c>print()</c> and <c>println()</c> methods are instance methods of a <c>PrintStream</c> object,
    we can only use them by finding a <c>PrintStream</c> object and
    <q>telling</q>
    it to print data for us.
    As shown in Figure<nbsp/>1.15, Java's <c>java.lang.System</c> class contains three predefined streams,
    including two <c>PrintStream</c> objects.
    This class has public (<m>+</m>) attributes.
    None of its public methods are shown here.
  </p>
  <p>
    Both the <c>System.out</c> and <c>System.err</c> objects can be used to write output to the console.
    As its name suggests,
    the <c>err</c> stream is used primarily for error messages,
    whereas the <c>out</c> stream is used for other printed output.
    Similarly, as its name suggests,
    the <c>System.in</c> object can be used to handle input,
    which will be covered in Chapter<nbsp/>2.
  </p>
  <p>
    The only difference between the <c>print()</c> and <c>println()</c> methods is that <c>println()</c> will also print a carriage return and line feed after printing its data,
    thereby allowing subsequent output to be printed on a new line.
    For example, the following statements
  </p>
<pre>
System.out.print("hello");
System.out.println("hello again");
System.out.println("goodbye");
</pre>
  <p>
    would produce the following output:
  </p>
<pre>
hellohello again
goodbye
</pre>
  <p>
    <image width="73%" source="chptr01/systemum.png"/> \caption{
  </p>
  <p>
    Now that we know how to use Java's printing expert, let's use it to
    <q>sing</q>
    a version of
    <q>Old MacDonald Had a Farm.</q>
    As you might guess,
    this program will simply consist of a sequence of <c>System.out.println()</c> statements each of which prints a line of the verse.
    The complete Java application program is shown in <xref ref="fig_oldmac">Figure</xref>.
  </p>
  <figure xml:id="fig_oldmac">
    <caption>The <c>OldMacDonald.java</c> class.</caption>
<pre>
public class OldMacDonald
{
   public static void main(String args[])   // Main method
   {
     System.out.println("Old MacDonald had a farm");
     System.out.println("E I E I O.");
     System.out.println("And on his farm he had a duck.");
     System.out.println("E I E I O.");
     System.out.println("With a quack quack here.");
     System.out.println("And a quack quack there.");
     System.out.println("Here a quack, there a quack,");
     System.out.println("Everywhere a quack quack.");
     System.out.println("Old MacDonald had a farm");
     System.out.println("E I E I O.");
   }  // End of main}  // End of OldMacDonald
</pre>
  </figure>
  <p>
    This example illustrates the importance of using the Java class library.
    If there's a particular task we want to perform,
    one of the first things we should ask is whether there is already an
    <q>expert</q>
    in Java's class library that performs that task.
    If so, we can use methods provided by the expert to perform that particular task.
  </p>
  <principle>
    <title>EFFECTIVE DESIGN:Using the Java Library</title>
    <p>
      Learning how to use classes and objects from the Java class library is an important part of object-oriented programming in Java.
    </p>
  </principle>
  <p>
    \secEXRHone{Self-Study Exercises}
    <ol>
      \marginnote{ ********** \mbox{*}***** \mbox{*}*** \mbox{*}*** \mbox{*}***** \mbox{*} *********}
      <li>
        <p>
          One good way to learn how to write programs is to modify existing programs.
          Modify the <c>OldMacDonald</c> class to
          <q>sing</q>
          one more verse of the song.
        </p>
      </li>
      <li>
        <p>
          Write a Java class that prints the design shown on the left.
        </p>
      </li>
    </ol>
  </p>
  <p>
    \secSMH{Chapter Summary} \secKTH{Technical Terms} \begin{KT} algorithm
  </p>
  <p>
    applet
  </p>
  <p>
    application program
  </p>
  <p>
    assignment statement
  </p>
  <p>
    comment
  </p>
  <p>
    compound statement (block)
  </p>
  <p>
    data type
  </p>
  <p>
    declaration statement
  </p>
  <p>
    default constructor
  </p>
  <p>
    executable statement
  </p>
  <p>
    expression
  </p>
  <p>
    identifier
  </p>
  <p>
    literal value
  </p>
  <p>
    object instantiation
  </p>
  <p>
    operator
  </p>
  <p>
    package
  </p>
  <p>
    parameter
  </p>
  <p>
    primitive data type
  </p>
  <p>
    pseudocode
  </p>
  <p>
    qualified name
  </p>
  <p>
    semantics
  </p>
  <p>
    statement
  </p>
  <p>
    stepwise refinement
  </p>
  <p>
    syntax
  </p>
  <p>
    \end{KT}
  </p>
  <p>
    \secSMHtwo{Summary of Important Points}
    <ul>
      <li>
        <p>
          Good program design requires that each object and method have a well-defined role and clear definition of what information is needed for the task and what results will be produced.
        </p>
      </li>
      <li>
        <p>
          Good program design is important;
          the sooner you start coding, the longer the program will take to finish.
          Good program design strives for readability, clarity, and flexibility.
        </p>
      </li>
      <li>
        <p>
          Testing a program is very important and must be done with care,
          but it can only reveal the presence of bugs, not their absence.
        </p>
      </li>
      <li>
        <p>
          An algorithm is a step-by-step process that solves some problem.
          Algorithms are often described in pseudocode,
          a hybrid language that combines English and programming language constructs.
        </p>
      </li>
      <li>
        <p>
          A syntax error occurs when a statement breaks a Java syntax rules.
          Syntax errors are detected by the compiler.
          A semantic error is an error in the program's design and cannot be detected by the compiler.
        </p>
      </li>
      <li>
        <p>
          Writing Java code should follow the stepwise refinement process.
        </p>
      </li>
      <li>
        <p>
          Double slashes (//) are used to make a single-line comment.
          Comments that extend over several lines must begin with /* and end with */.
        </p>
      </li>
      <li>
        <p>
          An <em>identifier</em> must begin with a letter of the alphabet and may consist of any number of letters, digits,
          and the special characters _ and $. An identifier cannot be identical to a Java keyword.
          Identifiers are case sensitive.
        </p>
      </li>
      <li>
        <p>
          A <em>keyword</em> is a term that has special meaning in the Java language (Table<nbsp/>1.1).
        </p>
      </li>
      <li>
        <p>
          Examples of Java's <em>primitive data types</em>
          include the <c>int</c>, <c>boolean</c>, and <c>double</c> types.
        </p>
      </li>
      <li>
        <p>
          A variable is a named storage location.
          In Java, a variable must be declared before it can be used.
        </p>
      </li>
      <li>
        <p>
          A literal value is an actual value of some type,
          such as a <c>String</c>("Hello") or an <c>int</c>(5).
        </p>
      </li>
      <li>
        <p>
          A declaration statement has the form: \hbox{Type} \hbox{VariableName}<nbsp/>;
        </p>
      </li>
      <li>
        <p>
          An assignment statement has the form:\hbox{VariableName} = \hbox{Expression}<nbsp/>; When it is executed it determines the value of the <em>Expression</em>
          on the right of the assignment operator (<m>=</m>) and stores the value in the variable named on the left.
        </p>
      </li>
      <li>
        <p>
          Java's operators are type dependent,
          where the type is dependent on the data being manipulated.
          When adding two <c>int</c> values (<m>7 + 8</m>),
          the <m>+</m> operation produces an <c>int</c> result.
        </p>
      </li>
      <li>
        <p>
          A class definition has two parts:
          a class header and a class body.
          A class header takes the form of optional modifiers followed by the word <c>class</c> followed by an identifier naming the class followed,
          optionally,
          by the keyword <c>extends</c> and the name of the class's superclass.
        </p>
      </li>
      <li>
        <p>
          There are generally two kinds of elements declared and defined in the class body:
          variables and methods.
        </p>
      </li>
      <li>
        <p>
          Object instantiation is the process of creating an instance of a class using the <c>new</c> operator in conjunction with one of the class's constructors.
        </p>
      </li>
      <li>
        <p>
          Dot notation takes the form <em>qualifiers.elementName</em>.
          The expression <c>System.out.print("hello")</c> uses Java dot notation to invoke the <c>print()</c> method of the <c>System.out</c> object.
        </p>
      </li>
      <li>
        <p>
          A Java application program runs in stand-alone mode.
          A Java applet is a program that runs within the context of a Java-enabled browser.
          Java applets are identified in HTML documents by using the <c>&lt;applet&gt;</c> tag.
        </p>
      </li>
      <li>
        <p>
          A Java source program must be stored in a file that has a
<c>.java</c> extension.
          A Java bytecode file has the same name as the source file but a <c>.class</c> extension.
          It is an error in Java if the name of the source file is not identical to the name of the public Java class defined within the file.
        </p>
      </li>
      <li>
        <p>
          Java programs are first compiled into bytecode and then interpreted by the Java Virtual Machine (JVM).
        </p>
      </li>
    </ul>
  </p>
  <p>
    { \rule[0pt]{40.5pc}{0.5pt}} \epsfig{file=../commonart/eoc2text.eps,
    height=4pt,width=40.5pc,clip=} \marginpar{ { \uppercase{Solutions to Self-Study Exercises} } } \newcommand{\secANSHleft}{ {\rule[0pt]{40.5pc}{0.5pt}} \epsfig{file=../commonart/eoc2text.eps,
    height=4pt,width=40.5pc,clip=} \marginpar{ { \uppercase{Solutions to Self-Study Exercises} } } \newcommand{\secKTH}[1]{{ #1} } \newcommand{\secLREXRH}[1]{{ { \uppercase{#1}}} } \def\endpracticedesign{ {\rule[0pt]{27pc}{0.5pt}} } \newcommand{\secHsix}[1]{{#1} } \newcommand{\secHfive}[2]{{ \rule[16pt]{27pc}{0.5pt} }\newcommand{\secBXsixHone}[1]{{#1} } \newcommand{\secBXsixBTHleft}[1]{ {\rule[0pt]{44.45pc}{2pt}} \marginpar{ }\newcommand{\secBXsevenHone}[1]{{#1} }\newcommand{\secCOBH}[1] {{\uppercase{#1}} }\newcommand{\secCOLH}[1] {{\uppercase{#1}} }\newcommand{\secSMH}[1]{ {\rule[0pt]{40.5pc}{1pt}} \epsfig{file=../commonart/eoc2text.eps,
    height=4pt,width=40.5pc,clip=} \marginpar{ { \uppercase{#1} } } } \newcommand{\secSMHleft}[1]{ {\rule[0pt]{40.5pc}{0.5pt}} \epsfig{file=../commonart/eoc2text.eps,
    height=4pt,width=40.5pc,clip=} \marginpar{ \uppercase{#1} } } \newcommand{\secSMHtwo}[1]{{ #1} }\newcommand{\secEXRHone}[1]{{\uppercase{#1}} } \newcounter{EXRLLcount} { \marginpar{{From the Java Library} #1} } {\begin{minipage}{26pc}}{\end{minipage}} \rule[0pt]{27pc}{#1} } \begin{minipage}[t]{26pc} { \end{minipage} } \rule[0pt]{#2}{#1} } \begin{minipage}[t]{#2} { \end{minipage} } \rule[0pt]{40pc}{#1} } \begin{minipage}[t]{26pc} { \end{minipage} } \rule[0pt]{#2}{#1}
    <ul>
      <li>
        <p>
          The value 12 is stored in <c>num</c>. int num2 = 711 + 712;
        </p>
      </li>
      <li>
        <p>
          The definition of the <c>OldMacDonald</c> class is:
<pre>
public class OldMacDonald
{
   public static void main(String args[])   // Main method
   {
     System.out.println("Old MacDonald had a farm");
     System.out.println("E I E I O.");
     System.out.println("And on his farm he had a duck.");
     System.out.println("E I E I O.");
     System.out.println("With a quack quack here.");
     System.out.println("And a quack quack there.");
     System.out.println("Here a quack, there a quack,");
     System.out.println("Everywhere a quack quack.");
     System.out.println("Old MacDonald had a farm");
     System.out.println("E I E I O.");
     System.out.println("Old MacDonald had a farm");
     System.out.println("E I E I O.");
     System.out.println("And on his farm he had a pig.");
     System.out.println("E I E I O.");
     System.out.println("With an oink oink here.");
     System.out.println("And an oink oink  there.");
     System.out.println("Here an oink, there an oink,");
     System.out.println("Everywhere an oink oink.");
     System.out.println("Old MacDonald had a farm");
     System.out.println("E I E I O.");
   }  // End of main}  // End of OldMacDonald
</pre>
        </p>
      </li>
      <li>
        <p>
          The definition of the <c>Pattern</c> class is:
<pre>
public class Pattern
{
     public static void main(String args[])// Main method
     {
         System.out.println("**********");
         System.out.println("* **  ** *");
         System.out.println("*   **   *");
         System.out.println("* *    * *");
         System.out.println("*  ****  *");
         System.out.println("**********");
     }  // End of main}  // End of Pattern
</pre>
        </p>
      </li>
    </ul>
  </p>
  <p>
    {\rule[0pt]{40.5pc}{0.5pt}} \epsfig{file=../commonart/eoc2text.eps,
    height=4pt,width=40.5pc,clip=} \marginpar{ { \uppercase{Exercises} } }
  </p>
  <ol>
    <li>
      <p>
        Fill in the blanks in each of the following statements.
      </p>
      <ol>
        \rule{20pt}{0.5pt} and \rule{20pt}{0.5pt}.
        <li>
          <p>
            A method definition contains two parts,
            a \rule{20pt}{0.5pt} and a \rule{20pt}{0.5pt}.
          </p>
        </li>
      </ol>
    </li>
    <li>
      <p>
        Explain the difference between each of the following pairs of concepts.
        <ol>
          Application and <em>applet</em>. Single-line and <em>multiline</em> comment. Compiling and <em>running</em> a program. Source code file and <em>bytecode</em> file. Syntax and <em>semantics</em>. Syntax error and <em>semantic error</em>. Data and <em>methods</em>. Variable and <em>method</em>. Algorithm and <em>method</em>. Pseudocode and <em>Java code</em>. Method definition and <em>method invocation</em>.
        </ol>
      </p>
    </li>
    <li>
      <p>
        For each of the following,
        identify it as either a syntax error or a semantic error.
        Justify your answers.
        <ol>
          <li>
            <p>
              Write a class header as <c>public Class MyClass</c>.
            </p>
          </li>
          <li>
            <p>
              Define the <c>init()</c> header as <c>public vid init()</c>.
            </p>
          </li>
          <li>
            <p>
              Print a string of five asterisks by <c>
System.out.println("***");</c>.
            </p>
          </li>
          <li>
            <p>
              Forget the semicolon at the end of a <c>println()</c> statement.
            </p>
          </li>
          <li>
            <p>
              Calculate the sum of two numbers as <c>N  -  M</c>.
            </p>
          </li>
        </ol>
      </p>
    </li>
    <li>
      <p>
        Suppose you have a Java program stored in a file named
<c>Test.java</c>. Describe the compilation and execution process for this program,
        naming any other files that would be created.
      </p>
    </li>
    <li>
      <p>
        Suppose <em>N</em> is 15.
        What numbers would be output by the following pseudocode algorithm?
        Suppose <em>N</em> is 6.
        What would be output by the algorithm in that case?
<pre>
0. Print N.
1. If N equals 1, stop.
2. If N is even, divide it by 2.
3. If N is odd, triple it and add 1.
4. Go to step 0.
</pre>
      </p>
    </li>
    <li>
      <p>
        Suppose <em>N</em> is 5 and <em>M</em> is 3.
        What value would be reported by the following pseudocode algorithm?
        In general, what quantity does this algorithm calculate?
<pre>
0. Write 0 on a piece of paper.
1. If M equals 0, report what's on the paper and stop.
2. Add N to the quantity written on the paper.
3. Subtract 1 from M.
4. Go to step 1.
</pre>Puzzle Problem: You are given two different length ropes that have the characteristic that they both take exactly one hour to burn.
        However, neither rope burns at a constant rate.
        Some sections of the ropes burn very fast;
        other sections burn very slowly.
        All you have to work with is a box of matches and the two ropes.
        Describe an algorithm that uses the ropes and the matches to calculate when exactly 45 minutes have elapsed.
        Puzzle Problem: A polar bear that lives right at the North Pole can walk due south for one hour,
        due east for one hour,
        and due north for one hour, and end up right back where it started.
        Is it possible to do this anywhere else on earth?
        Explain.
        Puzzle Problem: Lewis Carroll,
        the author of <em>Alice in Wonderland</em>,
        used the following puzzle to entertain his guests: A captive queen weighing 195 pounds,
        her son weighing 90 pounds,
        and her daughter weighing 165 pounds,
        were trapped in a very high tower.
        Outside their window was a pulley and rope with a basket fastened on each end.
        They managed to escape by using the baskets and a 75-pound weight they found in the tower.
        How did they do it?
        The problem is that anytime the difference in weight between the two baskets is more than 15 pounds,
        someone might get hurt.
        Describe an algorithm that gets them down safely.
        Puzzle Problem: Here's another Carroll favorite: A farmer needs to cross a river with his fox, goose,
        and a bag of corn.
        There's a rowboat that will hold the farmer and one other passenger.
        The problem is that the fox will eat the goose if they are left alone on the river bank,
        and the goose will eat the corn if they are left alone on the river bank.
        Write an algorithm that describes how he got across without losing any of his possessions.
        Puzzle Problem: Have you heard this one?
        A farmer lent the mechanic next door a 40-pound weight.
        Unfortunately,
        the mechanic dropped the weight and it broke into four pieces. The good news is that,
        according to the mechanic,
        it is still possible to use the four pieces to weigh any quantity between one and 40 pounds on a balance scale. How much did each of the four pieces weigh? (<em>Hint</em>: You can weigh a 4-pound object on a balance by putting a 5-pound weight on one side and a 1-pound weight on the other.)
      </p>
    </li>
    <li>
      <p>
        Suppose your little sister asks you to show her how to use a pocket calculator so that she can calculate her homework average in her science course.
        Describe an algorithm that she can use to find the average of 10 homework grades.
      </p>
    </li>
    <li>
      <p>
        A Caesar cipher is a secret code in which each letter of the alphabet is shifted by
        <em>N</em> letters to the right,
        with the letters at the end of the alphabet wrapping around to the beginning.
        For example,
        if <em>N</em> is 1, when we shift each letter to the right,
        the word <em>daze</em> would be written as <em>ebaf</em>.
        Note that the <em>z</em> has wrapped around to the beginning of the alphabet.
        Describe an algorithm that can be used to create a Caesar encoded message with a shift of 5.
      </p>
    </li>
    <li>
      <p>
        Suppose you received the message,
        <q>sxccohv duh ixq,</q>
        which you know to be a Caesar cipher.
        Figure out what it says and then describe an algorithm that will always find what the message said regardless of the size of the shift that was used.
      </p>
    </li>
    <li>
      <p>
        Suppose you're talking to your little brother on the phone and he wants you to calculate his homework average.
        All you have to work with is a piece of chalk and a very small chalkboard<mdash/>big enough to write one four-digit number.
        What's more,
        although your little brother knows how to read numbers,
        he doesn't know how to count very well so he can't tell you how many grades there are.
        All he can do is read the numbers to you.
        Describe an algorithm that will calculate the correct average under these conditions.
      </p>
    </li>
    <li>
      <p>
        Write a <em>header</em> for a public applet named <c>SampleApplet</c>.
      </p>
    </li>
    <li>
      <p>
        Write a <em>header</em> for a public method named <c>getName</c>.
      </p>
    </li>
    <li>
      <p>
        Design a class to represent a geometric rectangle with a given length and width,
        such that it is capable of calculating the area and the perimeter of the rectangle.
      </p>
    </li>
    <li>
      <p>
        Modify the <c>OldMacDonald</c> class to
        <q>sing</q>
        either
        <q>Mary Had a Little Lamb</q>
        or your favorite nursery rhyme.
      </p>
    </li>
    <li>
      <p>
        Define a Java class,
        called <c>Patterns</c>, modeled after <c>OldMacDonald</c>, that will print the following patterns of asterisks,
        one after the other heading down the page:
<pre>
*****     *****   *****
  ****     *   *   * * *
   ***     *   *    * *
    **     *   *   * * *
     *     *****   *****
</pre>
      </p>
    </li>
    <li>
      <p>
        Write a Java class that prints your initials as block letters,
        as shown in the example in the margin. \marginpar{ \mbox{*} ******* \mbox{*}***** \mbox{*}***** \mbox{*} ********* \mbox{**}*** \mbox{*}*** \mbox{*}*** \mbox{*}***} Challenge: Define a class that represents a <c>Temperature</c> object.
        It should store the current temperature in an instance variable of type <c>double</c>, and it should have two <c>public</c> methods, <c>setTemp(double t)</c>, which assigns <c>t</c> to the instance variable,
        and <c>getTemp()</c>, which <c>return</c> s the value of the instance variable.
        Use the <c>Riddle</c> class as a model.
        Challenge: Define a class named <c>TaxWhiz</c> that computes the sales tax for a purchase.
        It should store the current tax rate as an instance variable.
        Following the model of the <c>Riddle</c> class,
        you can initialize the rate using a <c>TaxWhiz()</c> method.
        This class should have one <c>public</c> method, <c>calcTax(double
purchase)</c>, which <c>return</c> s a <c>double</c>, whose value is
<c>purchases</c> times the tax rate.
        For example,
        if the tax rate is 4 percent, 0.04, and the purchase is $100,
        then
<c>calcTax()</c> should return 4.0.
      </p>
    </li>
    <li>
      <p>
        What is stored in the variables <c>num1</c> and <c>num2</c> after the following statements are executed?
<pre>
int num1 = 5;
  int num2 = 8;
  num1 = num1 + num2;
  num2 = nmm1 + num2;
</pre>
      </p>
    </li>
    <li xml:id="uml-exercises">
      <p>
        Write a series of statements that will declare a variable of type <c>int</c> called <c>num</c> and store in it the difference between 61 and 51. \secEXRHone{UML Exercises}
      </p>
    </li>
    <li>
      <p>
        Modify the UML diagram of the <c>Riddle</c> class to contain a method named <c>getRiddle()</c> that would return both the riddle's question and answer.
      </p>
    </li>
    <li>
      <p>
        Draw a UML class diagram representing the following class: The name of the class is <c>Circle</c>. It has one attribute,
        a <c>radius</c> that is represented by a <c>double</c> value.
        It has one operation, <c>calculateArea()</c>, which returns a <c>double</c>. Its attributes should be designated as private and its method as public.
      </p>
    </li>
    <li>
      <p>
        To represent a triangle we need attributes for each of its three sides and operations to create a triangle,
        calculate its area, and calculate its perimeter.
        Draw a UML diagram to represent this triangle.
      </p>
    </li>
    <li>
      <p>
        Try to give the Java class definition for the class described in <image width="73%" source="chptr01/umlexerc.png"/> the UML diagram shown in Figure<nbsp/>1.17.
      </p>
    </li>
  </ol>
</section>