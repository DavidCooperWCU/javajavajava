    <section xml:id="ch-arrays-exs">
        <title>Exercises</title>
    <p>
    Note: For programming exercises, first draw a UML class diagram 
    describing all classes and their inheritance relationships and/or associations.
    </p>
    <exercises>
      <exercise label="jaex_matching_java_definitions">
      <title>Java Concept Matching</title>
      <statement>
	<p>
          Match each of the following 
	  Array concepts.
	</p>
      </statement>
      <matches>
	<match>
	  <order>1</order>
          <premise><em>element</em></premise>
          <response>a piece of data stored in an array </response>
	</match>
	<match>
	  <order>2</order>
          <premise><em>element type</em></premise>
          <response>the type of data stored in an array</response>
	</match>
	<match>
	  <order>3</order>
          <premise><em>subscript/index</em></premise>
          <response>the position of an element</response>
	</match>
	<match>
	  <order>5</order>
	  <premise><em>one-dimensional</em> array</premise>
          <response>an array whose components are data of a specific type</response>
	</match>
	<match>
	  <order>6</order>
          <premise><em>two-dimensional</em> array</premise>
          <response>an array whose componenents are arrays</response>
	</match>
	<match>
	  <order>7</order>
          <premise><em>array</em></premise>
          <response>a sequence of a specific type of elements with a
	  fixed size of at least 0</response>
	</match>
	<match>
	  <order>8</order>
          <premise><c>ArrayList</c></premise>
          <response>a sequence of Objects with a variable size of at
	  least 0</response>
	</match>
	<match>
	  <order>9</order>
          <premise> <c>insertion</c> sort</premise>
          <response>A sort that goes through a list of N elements N - 1 times. First the first two elements are put in the correct order. On each subsequent time through the list, one additional element is put in the correct position in the sorted part of the list.</response>
	</match>
	<match>
	  <order>10</order>
          <premise> <c>selection</c> sort</premise>
          <response>a sort that goes through the list of N elements N - 1 times. First time through it recognizes the smallest element and places it in the first spot. On each subsequent time through the list, the smallest element in the unsorted part of the list is found and put at the end of the sorted part of the list.</response>
	</match>
	<match>
	  <order>11</order>
          <premise> <c>binary</c> search</premise>
          <response>Starting with a sorted list, this search checks the number in the middle first and if it is smaller then this number it will check in the middle of the lower half of the list. It keeps narrowing down the range like this until it determines the subscript of the element it is looking for.</response>
	</match>
	<match>
	  <order>12</order>
          <premise> <em>sequential</em> search</premise>
          <response>This search checks each element individually to
	  see if the element is equal to the value itâ€™s looking for and return the subscript of the element that is found.</response>
	</match>

	
      </matches>
      </exercise>
    <exercisegroup>
<title>Fill In the Blanks</title>       
 <introduction>

        <p>
          Fill in the blanks.
        </p>
 </introduction>
                       <exercise label="jaex_fill_in_1">       
<title></title>       
 <statement>

              <p>
                The process of arranging an array's elements into a particular order is known as <var width="15"/> .
              </p>
            </statement>
      <setup>
          <var case="insensitive">
            <condition string="sorting">
              <feedback>
		<p>Correct</p>
              </feedback>
            </condition>
	    <condition string="indexing">
              <feedback>
		<p>Try again. indexing is how you get an array's element</p>
              </feedback>
            </condition>
            <condition string=".*">
              <feedback>
		<p>Try again. You may want to review the technical terms from this chapter.</p>
              </feedback>
            </condition>
          </var>
	</setup>	

    </exercise>
                       <exercise label="jaex_fill_in_2">       
<title></title>       
 <statement>

              <p>
                One of the preconditions of the binary search method is that the array has to be <var width="15"/> .
              </p>
            </statement>
      <setup>
          <var case="insensitive">
            <condition string="sorted|in order">
              <feedback>
		<p>Correct</p>
              </feedback>
            </condition>
            <condition string=".*">
              <feedback>
		<p>Try again. You may want to review the technical terms from this chapter.</p>
              </feedback>
            </condition>
          </var>
	</setup>	

    </exercise>
                       <exercise label="jaex_fill_in_3">       
<title></title>       
 <statement>

              <p>
                An <var width="15"/> is an object that can store a
		collection of a fixed number of elements of the same type.
              </p>
            </statement>
      <setup>
          <var case="insensitive">
            <condition string="array">
              <feedback>
		<p>Correct</p>
              </feedback>
            </condition>
	    <condition string="ArrayList">
              <feedback>
		<p>Try again. ArrayLists allow you to have a variable
		number of elements</p>
              </feedback>
            </condition>
            <condition string=".*">
              <feedback>
		<p>Try again. You may want to review the technical terms from this chapter.</p>
              </feedback>
            </condition>
          </var>
	</setup>	

    </exercise>
                       <exercise label="jaex_fill_in_4">       
<title></title>       
 <statement>

              <p>
                An <var width="15"/> is like an array except that it can grow.
              </p>
            </statement>
      <setup>
          <var>
            <condition string="ArrayList">
              <feedback>
		<p>Correct</p>
              </feedback>
            </condition>
	   
            <condition string=".*">
              <feedback>
		<p>Try again. You may want to review the technical terms from this chapter.</p>
              </feedback>
            </condition>
          </var>
	</setup>	

    </exercise>
                       <exercise label="jaex_fill_in_5">       
<title></title>       
 <statement>

              <p>
                For an array,
                its <var width="15"/> is represented by an instance variable.
              </p>
            </statement>
      <setup>
          <var case="insensitive">
            <condition string="length">
              <feedback>
		<p>Correct</p>
              </feedback>
            </condition>
	    <condition string="size">
              <feedback>
		<p>Try again. size is a synonym of the expected word.</p>
              </feedback>
            </condition>
            <condition string=".*">
              <feedback>
		<p>Try again. You may want to review the technical terms from this chapter.</p>
              </feedback>
            </condition>
          </var>
	</setup>	

    </exercise>
                       <exercise label="jaex_fill_in_6">       
<title></title>       
 <statement>

              <p>
                An expression that can be used during array instantiation to assign values to the array is known as an <var width="18"/> .
              </p>
            </statement>
      <setup>
          <var case="insensitive">
            <condition string="array initializer">
              <feedback>
		<p>Correct</p>
              </feedback>
            </condition>
            <condition string=".*">
              <feedback>
		<p>Try again. You may want to review the technical terms from this chapter.</p>
              </feedback>
            </condition>
          </var>
	</setup>	

    </exercise>
                       <exercise label="jaex_fill_in_7">       
<title></title>       
 <statement>

              <p>
                A <var width="20"/> is an array of arrays.
              </p>
            </statement>
      <setup>
          <var case="insensitive">
            <condition string="multidimensional array">
              <feedback>
		<p>Correct</p>
              </feedback>
            </condition>
	    <condition string="two-dimensional array">
              <feedback>
		<p>Try again. More general</p>
              </feedback>
            </condition>
	    <condition string="three-dimensional array">
              <feedback>
		<p>Try again. More general</p>
              </feedback>
            </condition>
            <condition string=".*">
              <feedback>
		<p>Try again. You may want to review the technical terms from this chapter.</p>
              </feedback>
            </condition>
          </var>
	</setup>	

    </exercise>
                       <exercise label="jaex_fill_in_8">       
<title></title>       
 <statement>

              <p>
                A sort method that can be used to sort different types of data is known as a <var width="15"/> method.
              </p>
            </statement>
      <setup>
          <var case="insensitive">
            <condition string="polymorphic">
              <feedback>
		<p>Correct</p>
              </feedback>
            </condition>
            <condition string=".*">
              <feedback>
		<p>Try again. You may want to review the technical terms from this chapter.</p>
              </feedback>
            </condition>
          </var>
	</setup>	

    </exercise>
                       <exercise label="jaex_fill_in_9">       
<title></title>       
 <statement>

              <p>
                To instantiate an array you have to use the <var width="15"/> operator.
              </p>
            </statement>
      <setup>
          <var case="insensitive">
            <condition string="new">
              <feedback>
		<p>Correct</p>
              </feedback>
            </condition>
	    <condition string="assignment">
              <feedback>
		<p>Try again. The assignment operator is used to
		initialize a variable once the array has been instantiated.</p>
              </feedback>
            </condition>
            <condition string=".*">
              <feedback>
		<p>Try again. You may want to review the technical terms from this chapter.</p>
              </feedback>
            </condition>
          </var>
	</setup>	

    </exercise>
                       <exercise label="jaex_fill_in_10">       
<title></title>       
 <statement>

              <p>
                An array of objects stores <var width="15"/> to the objects.
              </p>
            </statement>
      <setup>
          <var case="insensitive">
            <condition string="references">
              <feedback>
		<p>Correct</p>
              </feedback>
            </condition>
	    <condition string="elements">
              <feedback>
		<p>Try again. The elements are the objects
		themselves. Since objects can take up variable amounts
		of memory, they can't be stored directly in the array</p>
              </feedback>
            </condition>
            <condition string=".*">
              <feedback>
		<p>Try again. You may want to review the technical terms from this chapter.</p>
              </feedback>
            </condition>
          </var>
	</setup>	

    </exercise>
        </exercisegroup>
       
               <exercisegroup>       
<title>Declaring Arrays</title>       
 <introduction>

        <p>Make each of the following array declarations:</p>
        </introduction>
                       <exercise label="jaex_declare_array_1">       
<title></title>       
 <statement>

              <p>
                A <m>4 \times 4</m> array of <c>double</c> s.
              </p>
            </statement>
      <response />
    </exercise>
                       <exercise label="jaex_declare_array_2">       
<title></title>       
 <statement>

              <p>
                A <m>20 \times 5</m> array of <c>String</c> s.
              </p>
            </statement>
      <response />
    </exercise>
                       <exercise label="jaex_declare_array_3">       
<title></title>       
 <statement>

              <p>
                A <m>3 \times 4</m> array of <c>char</c> initialized to <sq>*</sq>;
              </p>
            </statement>
      <response />
    </exercise>
                       <exercise label="jaex_declare_array_4">       
<title></title>       
 <statement>

              <p>
                A <m>2 \times 3 \times 2</m> array of <c>boolean</c> initialized to true.
              </p>
            </statement>
      <response />
    </exercise>
                       <exercise label="jaex_declare_array_5">       
<title></title>       
 <statement>

              <p>
                A <m>3 \times 3</m> array of <c>Student</c> s.
              </p>
            </statement>
      <response />
    </exercise>
                       <exercise label="jaex_declare_array_6">       
<title></title>       
 <statement>

              <p>
                A <m>2 \times 3</m> array of <c>String</c> s initialized to
                <q>one,</q>
                <q>two,</q>
                and so on.
              </p>
            </statement>
      <response />
    </exercise>
          </exercisegroup>
     
                 <exercisegroup>       
<title>Syntax Errors</title>       
 <introduction>

        <p>
          Identify and correct the syntax error in each of the following expressions:
        </p>
 </introduction>
                       <exercise label="jaex_syntax_error_1">       
<title></title>       
 <statement>

              <p>
                <c>int arr = new int[15];</c>
              </p>
            </statement>
      <response />
    </exercise>
                       <exercise label="jaex_syntax_error_2">       
<title></title>       
 <statement>

              <p>
                <c>int arr[] = new int(15);</c>
              </p>
            </statement>
      <response />
    </exercise>
                       <exercise label="jaex_syntax_error_3">       
<title></title>       
 <statement>

              <p>
                <c>float arr[] = new [3];</c>
              </p>
            </statement>
      <response />
    </exercise>
                       <exercise label="jaex_syntax_error_4">       
<title></title>       
 <statement>

              <p>
                <c>float arr[] = new float {1.0,2.0,3.0};</c>
              </p>
            </statement>
      <response />
    </exercise>
                       <exercise label="jaex_syntax_error_5">       
<title></title>       
 <statement>

              <p>
                <c>int arr[] = {1.1,2.2,3.3};</c>
              </p>
            </statement>
      <response />
    </exercise>
                       <exercise label="jaex_syntax_error_6">       
<title></title>       
 <statement>

              <p>
                <c>int arr[][] = new double[5][4];</c>
              </p>
            </statement>
      <response />
    </exercise>
                       <exercise label="jaex_syntax_error_7">       
<title></title>       
 <statement>

              <p>
                <c>int arr[][] = { {1.1,2.2}, {3.3, 1} };</c>
              </p>
            </statement>
      <response />
    </exercise>
          </exercisegroup>
                 <exercisegroup>       
<title>Evaluate Array Expressions</title>       
 <introduction>

        <p>
          Evaluate each of the following expressions,
          some of which may be erroneous:
 <program language="java"><input>
int arr[] = { 2,4,6,8,10 };
 </input></program>
	</p>
 </introduction>
                       <exercise label="jaex_eval_array_1">       
<title></title>       
 <statement>

              <p>
                <c>arr[4]</c>
              </p>
            </statement>
      <response />
    </exercise>
                       <exercise label="jaex_eval_array_2">       
<title></title>       
 <statement>

              <p>
                <c>arr[ arr.length ]</c>
              </p>
            </statement>
      <response />
    </exercise>
                       <exercise label="jaex_eval_array_3">       
<title></title>       
 <statement>

              <p>
                <c>arr[ arr[0] ]</c>
              </p>
            </statement>
      <response />
    </exercise>
                       <exercise label="jaex_eval_array_4">       
<title></title>       
 <statement>

              <p>
                <c>arr[ arr.length / 2 ]</c>
              </p>
            </statement>
      <response />
    </exercise>
                       <exercise label="jaex_eval_array_5">       
<title></title>       
 <statement>

              <p>
                <c>arr[ arr[1] ]</c>
              </p>
            </statement>
      <response />
    </exercise>
                       <exercise label="jaex_eval_array_6">       
<title></title>       
 <statement>

              <p>
                <c>arr[ 5 % 2 ]</c>
              </p>
            </statement>
      <response />
    </exercise>
                       <exercise label="jaex_eval_array_7">       
<title></title>       
 <statement>

              <p>
                <c>arr[ arr[ arr[0] ] ]</c>
              </p>
            </statement>
      <response />
    </exercise>
                       <exercise label="jaex_eval_array_9">       
<title></title>       
 <statement>

              <p>
                <c>arr[ 5 / 2.0 ]</c>
              </p>
            </statement>
      <response />
    </exercise>
                       <exercise label="jaex_eval_array_10">       
<title></title>       
 <statement>

              <p>
                <c>arr[ 1 + (int) Math.random() ]</c>
              </p>
            </statement>
      <response />
    </exercise>
                       <exercise label="jaex_eval_array_11">       
<title></title>       
 <statement>

              <p>
                <c>arr[ arr[3] / 2 ]</c>
              </p>
            </statement>
      <response />
    </exercise>
          </exercisegroup>
       
                 <exercise label="jaex_trace_code_1">       
<title>One-D Trace</title>       
 <statement>

        <p>
          What would be printed by the following code segment?
 <program language="java"><input>
int arr[] = { 24, 0, 19, 21, 6, -5, 10, 16};
for (int k = 0; k &lt; arr.length; k += 2)
  System.out.println( arr[k] );
 </input></program>
        </p>
      </statement>
      <response />
    </exercise>
                 <exercise label="jaex_trace_code_2">       
<title>Two-D Trace</title>       
 <statement>

        <p>
          What would be printed by the following code segment?
 <program language="java"><input>
int arr[][] = { {24, 0, 19}, {21, 6, -5}, {10, 16, 3},
                                           {1, -1, 0} };
for (int j = 0; j &lt; arr.length; j++)
  for (int k = 0; k &lt; arr[j].length; k++)
    System.out.println( arr[j][k] );
 </input></program>
        </p>
      </statement>
      <response />
    </exercise>
                 <exercise label="jaex_trace_code_3">       
<title>Two-D Trace 2</title>       
 <statement>

        <p>
          What would be printed by the following code segment?
 <program language="java"><input>
int arr[][] = { {24, 0, 19}, {21, 6, -5}, {10, 16, 3},
                                           {1, -1, 0} };
for (int j = 0; j &lt; arr[0].length; j++)
    for (int k = 0; k &lt; arr.length; k++)
        System.out.println(arr[k][j]);
 </input></program>
        </p>
      </statement>
      <response />
    </exercise>
                 <exercise label="jaex_semantic_error_1">       
<title>Swap Error</title>       
 <statement>

        <p>
          What's wrong with the following code segment,
          which is supposed to swap the values of the <c>int</c> variables,
          <em>n1</em> and <em>n2</em>?
 <program language="java"><input>
int temp = n1;
n2 = n1;
n1 = temp;
 </input></program>
        </p>
      </statement>
      <response />
    </exercise>
                 <exercise label="jaex_semantic_error_2">       
<title>Swap Method</title>       
 <statement>

        <p>
          Explain why the following method does not successfully swap the values of its two parameters?
          <hint>Think about the difference between value and reference parameters.</hint>
 <program language="java"><input>
public void swapEm(int n1, int n2) {
    int temp = n1;
    n1 = n2;
    n2 = temp;}
 </input></program>
        </p>
      </statement>
      <response />
    </exercise>
                 <exercise label="jaex_code_array_create">       
<title>Create an Array</title>       
 <statement>

        <p>
          Declare and initialize an array to store the following two-dimensional table of values:
 <program language="java"><input>
1   2   3   4
5   6   7   8
9  10  11  12
 </input></program>
        </p>
      </statement>
      <response />
    </exercise>
                 <exercise label="jaex_code_print_array">       
<title>Print Column by Column</title>       
 <statement>

        <p>
          For the two-dimensional array you created in the previous exercise,
          write a nested for loop to print the values in the following order: 1 5 9 2 6 10 3 7 11 4 8 12.
          That is, print the values going down the columns instead of going across the rows.
        </p>
      </statement>
      <response />
    </exercise>
                 <exercisegroup>       
<title>Defining Arrays</title>       
 <introduction>

        <p>
          Define an array that would be suitable for storing the following values:
        </p>
 </introduction>
                       <exercise label="jaex_code_gpa_array">       
<title>GPA Array</title>       
 <statement>

              <p>
                The GPAs of 2,000 students.
              </p>
            </statement>
      <response />
    </exercise>
                       <exercise label="jaex_code_rectangle_array">       
<title>Rectangle Sides Array</title>       
 <statement>

              <p>
                The lengths and widths of 100 rectangles.
              </p>
            </statement>
      <response />
    </exercise>
                       <exercise label="jaex_code_temperature_array">       
<title>Temperature Array</title>       
 <statement>

              <p>
                A week's worth of hourly temperature measurements,
                stored so that it is easy to calculate the average daily temperature.
              </p>
            </statement>
      <response />
    </exercise>
                       <exercise label="jaex_code_tic_tac_toe_board">       
<title>Tic Tac Tow Array</title>       
 <statement>

              <p>
                A board for a tic-tac-toe game.
              </p>
            </statement>
      <response />
    </exercise>
                       <exercise label="jaex_fifty_states_array">       
<title>50 States Array</title>       
 <statement>

              <p>
                The names and capitals of the 50 states.
              </p>
            </statement>
      <response />
    </exercise>
          
    </exercisegroup>
                 <exercise label="jaex_code_sum_array">       
<title>Sum Array</title>       
 <statement>

        <p>
          Write a code segment that will compute the sum of all the elements of an array of <c>int</c>.
        </p>
      </statement>
      <response />
    </exercise>
                 <exercise label="jaex_code_sum_2d_array">       
<title>Sum 2D Arrray</title>       
 <statement>

        <p>
          Write a code segment that will compute the sum of the elements in a two-dimensional array of <c>int</c>.
        </p>
      </statement>
      <response />
    </exercise>

      <exercisegroup>
 <title>Writing Array Methods</title>
 <introduction>
<p>
    Each of the  problems that follow asks you to write a method.
    Of course, as you are developing the method in a stepwise
    fashion, you should test it. Here's a simple application
    program that you can use for this purpose:
</p>
<program language="java"><input>
import java.util.Arrays;

public class MethodTester {
    public static String stringify(Object[] s) {
        StringBuffer sb = new StringBuffer();
        int width = 0;
	final int MAX_WIDTH = 60;
	for(Object o : s) {
	   if(width + o.toString().length() >= MAX_WIDTH) {
	      sb.append("\n");
	      width = 0;
	   }
           sb.append(o.toString());
	   sb.append(",");
	   width += o.toString().length() + 1;
	}
	if (sb.charAt(sb.length()-1) == ',') {
           sb.deleteCharAt(sb.length()-1);
	   sb.append("\n");
	}

	return sb.toString();
    }
    public static void main(String args[]) {
        Integer[] x = new Integer[100];
        Arrays.fill(x,12345);
        System.out.println("the array is:\n" + stringify(x));
    }
}

</input></program>
    <p>
        Just replace
        the <c> stringify()</c> method with your method. Note that
        you must declare your method <c> static</c> if you want
        to call it directly from <c> main()</c> as we do here.
    </p>
    </introduction>
      

    <exercise label="jaex_code_average_array_method">       
<title>Array Average Method</title>       
 <statement>

        <p>
          Write a method that will compute the average of all the elements of a two-dimensional array of <c>float</c>.
        </p>
      </statement>
      <program label="jaex_average_two_d_prg" interactive="activecode" language="java">
<input>
	    public class MethodTester {
		public static Object renameMe(Object[] arr) {
		    return null;
		}
		public static void main(String args[]) {
		    System.out.println("Array something:  " + renameMe(null));
		}
	    }
</input>
</program>    

    </exercise>
                 <exercise label="jaex_code_find_last_greater">       
<title>Find Last Greater</title>       
 <statement>

        <p>
          Write a method that takes two parameters,
          an
<c>int</c> array and an integer,
          and returns the location of the last element of the array that is greater than or equal to the second parameter.
        </p>
      </statement>
      <program label="jaex_last_greater_prg" interactive="activecode" language="java">
<input>
	    public class MethodTester {
		public static Object renameMe(Object[] arr) {
		    return null;
		}
		public static void main(String args[]) {
		    System.out.println("Array something:  " + renameMe(null));
		}
	    }
</input>
</program>    

		 </exercise>
      </exercisegroup>
                 <exercise label="jaex_code_test_magic_square">       
<title>Test Magic Square</title>       
 <statement>

        <p>
          Write a program that tests whether a <m>3\; \times \;3</m> array,
          input by the user, is a <em>magic square</em>.
          A magic square
            <idx><h>square</h></idx>
          is an <m>N\; \times\; N</m> matrix of numbers in which every number from 1 to <m>N^2</m> must appear just once,
          and every row, column,
          and diagonal must add up to the same total<mdash/>for example,
 <program language="java"><input>
6 7 2
1 5 9
8 3 4
 </input></program>
        </p>
      </statement>
      <program label="jaex_magic_square_prg" interactive="activecode" language="java">
<input>
	    public class MagicSquare {
		public static void main(String args[]) {
		    
		}
	    }
</input>
</program>    

    </exercise>
                 <exercise label="jaex_code_bigger_magic_square">       
<title>Test Bigger Magic Square</title>       
 <statement>

        <p>
          Revise the program in the previous exercise so that it allows the user to input the dimensions of the array,
          up to <m>4\; \times\; 4</m>.
        </p>
      </statement>
      <program label="jaex_bigger_magic_prg" interactive="activecode" language="java">
<input>
	    public class BiggerMagicSquare {
		
		public static void main(String args[]) {
		    
		}
	    }
</input>
</program>    

    </exercise>
                 <exercise label="jaex_code_relative_frequencies">       
<title>Relative Frequencies</title>       
 <statement>

        <p>
          Modify the <c>AnalyzeFreq</c> program so that it can display the relative frequencies of the 10 most frequent and 10 least frequent letters.
        </p>
      </statement>
      <program label="jaex_analyze_prg" interactive="activecode" language="java">
<input>
	    public class Program {		
		public static void main(String args[]) {
		    
		}
	    }
</input>
</program>    

    </exercise>
                 <exercise label="jaex_code_sort_and_merge">       
<title>Sort Then Merge</title>       
 <statement>

        <p>
          The <em>merge sort</em> algorithm takes two collections of data that have been sorted and merges them together.
          Write a program that takes two 25-element <c>int</c> arrays,
          sorts them,
          and then merges them, in order,
          into one 50-element array.
        </p>
    </statement>
      <program label="jaex_merge_sort_prg" interactive="activecode" language="java">
<input>
	    public class Program {		
		public static void main(String args[]) {
		    
		}
	    }
</input>
</program>    

    </exercise>
               <exercise label="jaex_code_big_integer">       
<title>Implement BigInteger</title>       
 <statement>

        <p>
          <term>Challenge: </term>: Design and implement a <c>BigInteger</c> class that can add and subtract integers with up to 25 digits.
          Your class should also include methods for input and output of the numbers.
          If you're really ambitious, include methods for
	  multiplication and division. (Do not use
	  <c>java.math.BigInteger</c> for your implementation)
        </p>
    </statement>
      <program label="jaex_big_int_prg" interactive="activecode" language="java">
<input>
	    public class Program {		
		public static void main(String args[]) {
		    
		}
	    }
</input>
</program>    

    </exercise>
               <exercise label="jaex_code_client_purchases">       
<title>Client Purchases Structure</title>       
 <statement>

        <p>
          <term>Challenge: </term>: Design a data structure for this problem: As manager of Computer Warehouse,
          you want to track the dollar amount of purchases made by those clients that have regular accounts.
          The accounts are numbered from <c>0, 1, </c><ellipsis /><c> ,N</c>. The problem is that you don't know in advance how many purchases each account will have.
          Some may have one or two purchases.
          Others may have 50 purchases.
        </p>
      </statement>
      <program label="jaex_comp_warehouse_prg" interactive="activecode" language="java">
<input>
	    public class Program {		
		public static void main(String args[]) {
		    
		}
	    }
</input>
</program>    

    </exercise>
                 <exercise label="jaex_code_test_anagrams">       
<title>Test Anagrams</title>       
 <statement>

        <p>
          An <em>anagram</em> is a word made by rearranging the letters of another word.
          For example, <em>act</em> is an anagram of <em>cat</em>,
          and <em>aegllry</em> is an anagram of <em>allergy</em>.
          Write a Java program that accepts two words as input and determines if they are anagrams.
        </p>
    </statement>
      <program label="jaex_anagram_test_prg" interactive="activecode" language="java">
<input>
	    public class Program {		
		public static void main(String args[]) {
		    
		}
	    }
</input>
</program>    

    </exercise>
               <exercise label="jaex_code_anagram_dictionary">       
<title>Anagram Dictionary</title>       
 <statement>

        <p>
          <term>Challenge: </term>: An <em>anagram dictionary</em>
          is a dictionary that organizes words together with their anagrams.
          Write a program that lets the user enter up to 100 words
          (in a <c>TextField</c>, say).
          After each word is entered, the program should display
          (in a <c>TextArea</c> perhaps)
          the complete anagram dictionary for the words entered.
          Use the following sample format for the dictionary.
          Here the words entered by the user were:
          <em>felt, left, cat, act, opt, pot,
          top.</em>
        </p>
 <program language="java"><input>
act:  act cat
eflt:  felt left
opt:   opt pot top
 </input></program>
      </statement>
      <program label="jaex_anagram_dict_prg" interactive="activecode" language="java">
<input>
	    public class Program {		
		public static void main(String args[]) {
		    
		}
	    }
</input>
</program>    

    </exercise>
                 <exercise label="jaex_code_distance_class">       
<title>Distance Class</title>       
 <statement>

        <p>
          Acme Trucking Company has hired you to write software to help dispatch its trucks.
          One important element of this software is knowing the distance between any two cities that it services.
          Design and implement a <c>Distance</c> class that stores the distances between cities in a two-dimensional array.
          This class will need some way to map a city name, <em>Boise</em>,
          into an integer that can be used as an array subscript.
          The class should also contain methods that would make it useful for looking up the distance between two cities.
          Another useful method would tell the user the closest city to a given city.
        </p>
      </statement>
      <program label="jaex_distance_prg" interactive="activecode" language="java">
<input>
	    public class Program {		
		public static void main(String args[]) {
		    
		}
	    }
</input>
</program>    

    </exercise>
                 <exercise label="jaex_code_word_guess_keyboard">       
<title>Word Guess Game</title>       
 <statement>

        <p>
          Rewrite the <c>main()</c> method for the <c>WordGuess</c> example so that it allows the user to input the number of players and whether each players is a computer or a human.
          Use a <c>KeyboardReader</c>.
        </p>
      </statement>
      <program label="jaex_word_guess_prg" interactive="activecode" language="java">
<input>
	    public class Program {		
		public static void main(String args[]) {
		    
		}
	    }
</input>
</program>    

    </exercise>
                 <exercise label="jaex_code_word_guesser_class">       
<title>Word Guesser Class</title>       
 <statement>

        <p>
          Write a smarter version of the <c>WordGuesser</c> class that
          <q>knows</q>
          which letters of the English language are most frequent.
          <hint>Rather than using random guesses,
          store the player's guesses in a string in order of decreasing frequency: "ETAONRISHLGCMFBDGPUKJVWQXYZ".</hint>
        </p>
      </statement>
      <program label="jaex_guess_class_prg" interactive="activecode" language="java">
<input>
	    public class Program {		
		public static void main(String args[]) {
		    
		}
	    }
</input>
</program>    

    </exercise>
                 <exercise label="jaex_code_cli_sliding">       
<title>Sliding Tiles CLI</title>       
 <statement>

        <p>
          Write a command line interface, CLI, version of the <c>SlidingTilePuzzle</c>. You will need to make modifications to the <c>SlidingTilePuzzle</c> class.
        </p>
      </statement>
      <program label="jaex_tile_cli_prg" interactive="activecode" language="java">
<input>
	    public class Program {		
		public static void main(String args[]) {
		    
		}
	    }
</input>
</program>    

    </exercise>
    </exercises>
</section>
