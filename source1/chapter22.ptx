<chapter xmlns:xi="http://www.w3.org/2001/XInclude" >
<title>Operator Precedence Hierarchy</title>
<p>
Table E.1 summarizes the precedence and
associativity relationships for Java operators. Within a single
expression, an operator of order <em>m</em> would be evaluated before an
operator of order <em>n</em> if <m>m \lt  n</m>. Operators having the same order
are evaluated according to their association order. For example, the
expression
</p>
<pre>
25 + 5 * 2 + 3
</pre>
<p>
would be evaluated in the order shown by the following
parenthesized expression:
</p>
<pre>
(25 + (5 * 2)) + 3   ==> (25 + 10) + 3 ==> 35 + 3  ==> 38
</pre>
<p>
In other words, because <c>*</c> has higher precedence
than <c>+</c>, the multiplication operation is done before either of
the addition operations. And because addition associates from left to
right, addition operations are performed from left to right.
</p>

<p>
Most operators associate from left to right, but note that assignment
operators associate from right to left. For example, consider the
following code segment:
</p>
<pre>
int i, j, k;
i = j = k = 100;     // Equivalent to i = (j = (k = 100));
</pre>
<table>
\TBT{0pc}{Java operator precedence and associativity table.}
\hspace{-6pt}
<tabular>
<row><cell>\multicolumn{4}{l}{\rule{29pc}{1pt}}</cell></row>
<row><cell><term>Order</term></cell><cell><term>Operator</term></cell><cell><term>Operation</term></cell><cell><term>Association</term></cell></row>
<row><cell>[-4pt]\multicolumn{4}{l}{\rule{29pc}{0.5pt}}</cell></row>
<row><cell>0</cell><cell><c>(  )</c></cell><cell><em>Parentheses</em>\cr
1</cell><cell><c>++   -- </c><m>\;\cdot</m></cell><cell><em>Postincrement,  Postdecrement, Dot Operator</em></cell><cell><em>L to R</em>\cr
2</cell><cell><c>++   --  +  -  !</c></cell><cell><em>Preincrement,  Predecrement,</em></cell><cell><em>R to L</em>\cr</cell><cell></cell><cell><em>Unary plus,  Unary minus,  Boolean NOT</em></cell><cell>\cr
3</cell><cell><c>(type)  new</c></cell><cell><em>Type  Cast, Object Instantiation</em></cell><cell><em>R to L</em>\cr
4</cell><cell><c>*  /
5 &amp;\verb</c>+ -  +|</cell><cell><em>Addition,  Subtraction,  String Concatenation</em></cell><cell><em>L to R</em>\cr
6</cell><cell><c>&lt;  >  &lt;=  >=</c></cell><cell><em>Relational  Operators</em></cell><cell><em>L to R</em>\cr
7</cell><cell><c>==   !=</c></cell><cell><em>Equality  Operators</em></cell><cell><em>L to R</em>\cr
8</cell><cell><m>\wedge</m></cell><cell><em>Boolean  XOR</em></cell><cell><em>L to R</em>\cr
9</cell><cell><c>&amp;&amp;</c></cell><cell><em>Boolean  AND</em></cell><cell><em>L to R</em>\cr
10</cell><cell>||</cell><cell><em>Boolean  OR</em></cell><cell><em>L to R</em>\cr
11</cell><cell>\verb|= += -= *= /=</cell></row>
<row><cell>[-4pt]\multicolumn{4}{l}{\rule{29pc}{1pt}}</cell></row>
</tabular>
\endTB
</table>
<p>
In this case, each variable will be assigned 100 as its
value. But it's important that this expression be evaluated from right
to left. First, <em>k</em> is assigned 100. Then its value is assigned
to <em>j</em>. And finally <em>j</em>'s value is assigned to <em>i</em>.
</p>

<p>
For expressions containing mixed operators, it's always a good idea to
use parentheses to clarify the order of evaluation. This will also
help avoid subtle syntax and semantic errors.
</p>
</chapter>
