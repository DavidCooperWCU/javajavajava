<section xml:id="example-car-loan">
<title>Example: Car Loan</title>


<introduction>
<p>
Recall the self-study exercise from Chapter<nbsp/>5 that
calculated the value of a bank CD (<em>a</em>) given its initial
principle (<em>p</em>), interest rate (<em>r</em>), and number of years
(<em>n</em>), using the formula <m>a = p(1 + r)^n</m>. This section explains
how to use the same formula to calculate the cost of a car loan for
different interest rates over various time periods.
</p>
</introduction>


<subsection>
<title>Problem Description</title>
<p>
For example, suppose you are planning on buying a car that costs
$20,000. You find that you can get a car loan ranging anywhere from
8 to 11 percent, and you can have the loan for periods as short as two
years and as long as eight years. Let's use our loop constructs to
create a table to show what the car will actually cost you, including
financing. In this case, <em>a</em> will represent the total cost of the
car, including the financing, and <em>p</em> will represent the price
tag on the car ($20,000):
</p>
<pre>
8%          9%          10%         11%
Year 2  <m>23,469.81</m>23,943.82  <m>24,427.39</m>24,920.71
Year 3  <m>25,424.31</m>26,198.42  <m>26,996.07</m>27,817.98
Year 4  <m>27,541.59</m>28,665.32  <m>29,834.86</m>31,052.09
Year 5  <m>29,835.19</m>31,364.50  <m>32,972.17</m>34,662.19
Year 6  <m>32,319.79</m>34,317.85  <m>36,439.38</m>38,692.00
Year 7  <m>35,011.30</m>37,549.30  <m>40,271.19</m>43,190.31
Year 8  <m>37,926.96</m>41,085.02  <m>44,505.94</m>48,211.60
</pre>
</subsection>


<subsection>
<title>Algorithm Design</title>
<p>
The key element in this program is the nested <c>for</c> loop
that generates the table. Because the table contains seven rows, the
outer loop should
\marginpar{Nested loop design}
iterate seven times, through the values <m>2, 3, \dots 8</m>:
</p>
<pre>
for (int years = 2; years &lt;= 8; years++)
</pre>
<p>
The inner loop should iterate through each of the interest rates,
8 through 11:
</p>
<pre>
for (int years = 2; years &lt;= 8; years++) { 
   for (int rate = 8; rate &lt;= 11; rate++) {
   } // for rate} // for years
</pre>
<p>
The financing calculation should be placed in the body of
the inner loop together with a statement to print one cell (not row)
of the table. Suppose the variable we use for <em>a</em> in the formula
is <c>carPriceWithLoan</c>, and the variable we use for the actual
price of the car is <c>carPrice</c>. Then our inner loop body is
</p>
<pre>
carPriceWithLoan = carPrice * 
     Math.pow(1 + rate/100.0/365.0, years * 365.0);
System.out.print(dollars.format(carPriceWithLoan) +"\t");
</pre>
<p>
Note that the rate is divided by both 100.0 (to make it
a percentage) and by 365.0 (for daily compounding), and the year
is multiplied by 365.0 before these values are passed to the
<c>Math.pow()</c> method. It is important here to use 100.0 and
not 100 so that the resulting value is a <c>double</c> and not
the <c>int</c> 0.
</p>
</subsection>


<subsection>
<title>Implementation</title>
<p>
The program must also contain statements to print the row and column
headings. Printing the row headings should be done within the outer
loop, because it must be done for each row. Printing the column
headings should be done before the outer loop is entered. Finally, our
\marginpar{Formatting output}
program should contain code to format the dollar and cents values
properly. For this we use the <c>java.text.NumberFormat</c> class that
was described in Chapter<nbsp/>5. The complete program is shown in
<xref ref="fig-carloan">Figure</xref>.
</p>
<figure xml:id="fig-carloan" >
<caption>The <c>CarLoan</c> application.</caption>
<pre>
import java.text.NumberFormat;   // For formatting $nn.dd or n%

public class CarLoan {
  public static void main(String args[]) {
    double carPrice = 20000;  // Car's actual price
    double carPriceWithLoan;  // Total cost of the car plus financing
                                              // Number formatting code
    NumberFormat dollars = NumberFormat.getCurrencyInstance(); 
    NumberFormat percent = NumberFormat.getPercentInstance();
    percent.setMaximumFractionDigits(2);
                                            // Print the table
    for (int rate = 8; rate &lt;= 11; rate++)  // Print the column heading
      System.out.print("\t" + percent.format(rate/100.0) + "\t" );
    System.out.println();

    for (int years = 2; years &lt;= 8; years++) {  // For years 2 through 8
      System.out.print("Year " + years + "\t"); // Print row heading
      for (int rate = 8; rate &lt;= 11; rate++) {  // Calc and print CD value
        carPriceWithLoan = carPrice * 
                       Math.pow(1 + rate / 100.0 / 365.0, years * 365.0);
        System.out.print( dollars.format(carPriceWithLoan)  + "\t");
      } // for rate
      System.out.println();                     // Start a new row
    } // for years
  } // main()} // CarLoan
</pre>

</figure>
</subsection>

</section>
