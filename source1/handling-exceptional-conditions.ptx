<section xml:id="handling-exceptional-conditions">
<title>Handling Exceptional Conditions</title>


<introduction>
<figure xml:id="fig-intavg1" >
<caption>Poor design.  No attempt is made to guard against 
a divide-by-zero error.</caption>
<pre>
/**
  * Precondition:  N > 0
  * Postcondition: avgFirstN() = (1+2+...+N)/N
  */
public double avgFirstN(int N) {
    int sum = 0;
    for (int k = 1; k &lt;= N; k++)
        sum += k;
    return sum/N;         // What if N is 0?} // avgFirstN()
</pre>

</figure>
<p>
To introduce you to handling exceptional conditions,
<xref ref="fig-intavg1">Figure</xref> shows a method that computes the average of
the first <em>N</em> integers, an admittedly contrived example. We use
it mainly to illustrate the basic concepts involved in exception
handling. As its precondition suggests, the <c>avgFirstN()</c> method
expects that <em>N</em> will be greater than 0. If <em>N</em> happens to be
0, an error will occur in the expression <c>sum/N</c>, because you
cannot divide an integer by 0.
</p>
</introduction>


<subsection>
<title>Traditional Error Handling</title>
<p>
Obviously, the method in <xref ref="fig-intavg1">Figure</xref> should not
simply ignore the possibility that <em>N</em>
\marginpar{Divide-by-zero error}
might be 0. <xref ref="fig-traditional">Figure</xref> shows a revised version of
the method, which includes code that takes action if the method's
precondition fails. Because there is no way to compute an average of
0 elements, the revised method decides to abort the program. Aborting
the program appears to be a better alternative than returning 0 or
some other default value (like <m>-1</m>) as the method's result and
thereby allowing an erroneous value to spread throughout the
program. That would just compound the error.
</p>
<principle>
<title>EFFECTIVE DESIGN:Unfixable Error</title>
<p>
If an unfixable error is detected,
it is far better to terminate the program abnormally than to allow the
error to propagate throughout the program.
</p>
</principle>
  <figure xml:id="fig-traditional" >
<caption>One way to handle a divide-by-zero error might be to
terminate the program, if there is an attempt to divide by 0, assuming
it's the kind of program that can be safely aborted.  This version
does not use exception handling.</caption>
\[28pc]
<pre>
/**
  * Precondition:  N > 0
  * Postcondition: avgFirstN() equals (1+2+...+N) divided by N
  */
public double avgFirstN(int N) {
    int sum = 0;
    if (N &lt;= 0) {
      System.out.println(
           "ERROR avgFirstN: N &lt;= 0. Program terminating.");
      System.exit(0);
    }
    for (int k = 1; k &lt;= N; k++)
        sum += k;
    return sum/N;         // What if N is 0?} // avgFirstN()
</pre>

</figure>
<p>
The revised <c>avgFirstN()</c> method takes the traditional
approach to error handling: Error-handling code is built right into
the algorithm. If <em>N</em> happens to be 0 when <c>avgFirstN()</c> is
called, the following output will be generated:
</p>
<pre>
ERROR avgFirstN: N &lt;= 0. Program terminating.
</pre>
</subsection>


<subsection>
<title>Java's Default Exception Handling</title>
<p>
To help detect and handle common runtime errors, Java's creators
incorporated an exception-handling model into the language
itself. In the case of our divide-by-zero error, the Java Virtual
Machine (JVM) would detect the error and abort the program. To
see this, consider the program in <xref ref="fig-calcavg">Figure</xref>. Note that
the <c>avgFirstN()</c> method is passed an argument of 0 in the <c>CalcAvgTest.main()</c>. When the JVM detects the error, it will abort
the program and print the following message:
</p>
<pre>
Exception in thread "main" 
   java.lang.ArithmeticException:  / by zero
        at CalcAverage.avgFirstN(Compiled Code)
        at CalcAvgTest.main(CalcAvgTest.java:5)
</pre>
<p>
The error message describes the error and
provides a trace of the method calls, from last to first, that led to
the error. This trace shows that the error occurred in the <c>CalcAverage.avgFirstN()</c> method, which was called by the <c>CalcAvgTest.main()</c> method.
</p>
<figure xml:id="fig-calcavg" >
<caption>Note that there are two public classes defined in this figure,
which would be saved in separate Java files.</caption>
<pre>
public class CalcAverage {

    public double avgFirstN(int N) {
        int sum = 0;
        for (int k = 1; k &lt;= N; k++)
            sum += k;
        return sum/N;         // What if N is 0?
    } // avgFirstN()}//CalcAverage

public class CalcAvgTest {
    public static void main(String args[]) {
        CalcAverage ca = new CalcAverage();
        System.out.println( "AVG + " + ca.avgFirstN(0) );        
    }//main}//CalcAvgTest
</pre>

</figure>
<p>
As this example suggests, Java's default exception handling is able to
detect and handle certain kinds of errors and exceptional conditions. In
the next section, we will identify what kinds of conditions are handled
by the JVM.
</p>
</subsection>

</section>
