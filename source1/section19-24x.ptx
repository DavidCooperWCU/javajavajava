<section>
<title>The Java Archiver <c>jar</c> Tool</title>
<p>
The <c>jar</c> tool can be used to combine multiple files into a single
JAR archive file. Although the <c>jar</c> tool is a general-purpose
archiving and compression tool, it was designed mainly to facilitate
the packaging of Java applets and applications into a single file.
</p>

<p>
The main justification for combining files into a single archive and
compressing the archive is to improve download time. The <c>jar</c>
command takes the following format:
</p>

<p>
<c>jar</c>  [ <em>options</em> ] destination-file 
input-file
 [ input-files ]
</p>

<p>
For an example of its usage, let's use it to
archive the files involved in the <c>WordGuess</c> example in
Chapter<nbsp/>9. As you may recall, this example used classes, such as <c>TwoPlayerGame</c>, and interfaces, such as <c>IGame</c>, that were
developed in earlier sections of the chapter. So, to help manage the
development of <c>WordGuess</c>, it would be useful to have a library
containing those files that must be linked together when we compile
<c>WordGuess</c>.
</p>

<p>
This is a perfect use of a <c>jar</c> file. Let's name our library
<c>nplayerlib.jar</c>. We choose this name because the library
can be used to create game programs that have <em>N</em> players,
including two-player games.
</p>

<p>
For the two-player game, <c>WordGuess</c>, we want to combine all the
<c>.class</c> files needed by <c>WordGuess.java</c> into a single jar
file. Here's a list of the files we want to archive:
</p>
<pre>
CLUIPlayableGame.class
ComputerGame.class
GUIPlayableGame.class
IGame.class
KeyboardReader.class
Player.class
TwoPlayerGame.class
UserInterface.class
</pre>
<p>
Assuming all of these files are contained in a single
directory (along with other files, perhaps), then the command we use
from within that directory is as follows:
</p>
<pre>
jar cf nplayerlib.jar *.class
</pre>
<p>
In this case, the <c>cf</c> options specify that we are
creating a jar file named <c>animated.jar</c> that will consist of all
the files having the <c>.class</c> suffix. This will create a
file named <c>nplayerlib.jar</c>. To list the contents of this
file, you can use the following command:
</p>
<pre>
jar tf nplayerlib.jar
</pre>
<p>
Once we have created the jar file, we can copy it into the
directory that contains our source code for the <c>WordGuess</c>
program. We would then the following commands to include the code
contained in the library when we compile and run <c>WordGuess.java</c>
</p>
<pre>
javac -classpath nplayerlib.jar:. WordGuess.java
java -classpath nplayerlib.jar:. WordGuess
</pre>
<p>
These commands, which use the <c>-classpath</c> option,
tell <c>javac</c> and <c>java</c> to include code from the <c>nplayerlib.jar</c>. The notation <c>:.</c>, links code in the current
directory (\.) with the library code.
</p>

<p>
Once we have created a library, we can also use it for
Java applets. For example, suppose we have developed an applet
version of the <c>WordGuess</c> game and linked all of the
applet's code into a jar file named <c>wordguessapplet.jar</c>.
The following HTML file would allow users to download the applet
from their web browser:
</p>
<pre>
&lt;html>
    &lt;head>&lt;title>WordGuess Applet&lt;/title>&lt;/head>
    &lt;body>
    &lt;applet
        archive="wordguessapplet.jar"
        code="WordGuessApplet.class"
        width=350 height=350
    >
        &lt;parameter name="author" value="Java Java Java">
        &lt;parameter name="date" value="April 2005">
    &lt;/applet>
    &lt;/body>
&lt;/html>
</pre>
<p>
When specified in this way, the browser will take care
of downloading the archive file and extracting the individual files
needed by the applet. Note that the <c>code</c> attribute must still
designate the file where the program will start execution.
</p>
</section>
