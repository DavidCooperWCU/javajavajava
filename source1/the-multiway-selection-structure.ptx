<section xml:id="the-multiway-selection-structure">
<title>The <c>switch</c> Multiway Selection Structure</title>
<p>
Another selection structure to add to our repertoire is the <em>switch/break structure</em>. It is meant
to provide a
shorthand way of coding the following type of multiway selection
structure:
</p>
<pre>
if (integralVar == integralValue1)
     // some statements
else if (integralVar == integralValue2)
     // some statements
else if (integralVar == integralValue3)
     // some statements
else // some statements
</pre>
<p>
Note that each of the conditions in this case involves the
equality of an integral variable and an integral value. This type of
structure occurs so frequently in programs that most languages contain
statements specially designed to handle it. In Java, we use a
combination of the <c>switch</c> and <c>break</c> statements to
implement multiway selection.
</p>

<p>
The <c>switch</c> is designed to select one of several actions
depending on the value of some integral expression:
</p>
<pre>
switch (integralExpression)
{  case integralValue1:
       // some statements
   case integralValue2:
       // some statements
   case integralValue3:
       // some statements
   default:
       some statements}
</pre>
<p>
The <em>integralExpression</em> must evaluate to a primitive integral
value of type <c>byte</c>, <c>short</c>, <c>int</c>, <c>char</c>,
\marginpar{\itIntegral expression}
or <c>boolean</c>. It may not be a <c>long</c>, <c>float</c>, <c>double</c>, or a class type. The <em>integralValues</em> must be literals
or <c>final</c> variables. They serve as labels in the one or more
case clauses that make up the <c>switch</c> statement body. The <c>default</c> clause is optional, but it is a good idea to include it.
</p>

<p>
A <c>switch</c> statement<idx><h>switch statement</h></idx> is executed according
to the following rules:
</p>

<p>
\begin{NL}
\item[Rule 1.] The <em>integralExpression</em> is evaluated.
\item[Rule 2.] Control passes to the statements following the <c>case</c>
label whose value equals the <em>integralExpression</em> or,
if no cases apply, to the <c>default</c> clause.
</p>

<p>
\item[Rule 3.] Beginning at the selected label or at the default, all
of the statements up to the end of the <c>switch</c> are executed.
\end{NL}
</p>

<p>
Consider the following example:
</p>
<pre>
int m = 2;
switch (m)
{  case 1:
      System.out.print(" m = 1");
   case 2:
      System.out.print(" m = 2");
   case 3:
      System.out.print(" m = 3");
   default:
      System.out.print(" default case");}
</pre>
<p>
In this case, because <em>m</em> equals 2, the following output
would be produced:
</p>
<pre>
m = 2 m = 3 default case
</pre>
<p>
Obviously, this output does not match
the following if-else multiway selection
structure<idx><h>multiway-selection structure</h></idx>, which would output,
simply, <c>m = 2</c>:
</p>
<pre>
int m = 2;
if (m == 1)
     System.out.print(" m = 1");
else if (m == 2)
     System.out.print(" m = 2");
else if (m == 3)
     System.out.print(" m = 3");
else
     System.out.print(" default case");
</pre>
<p>
The reason for this disparity is that the <c>switch</c>
executes <em>all</em> statements following the label that matches the
value of the <em>integralExpression</em> (see again Rule 3 on the
previous page).
</p>

<p>
In order to use the switch as a multiway selection, you must force it
to <c>break<idx><h>break</h></idx></c> out of the case clause after executing
that clause's statements:
</p>
<pre>
int m = 2;
switch (m)
{  case 1:
       System.out.print(" m = 1");
       break;
   case 2:
       System.out.print(" m = 2");
       break;
   case 3:
       System.out.print(" m = 3");
       break;
   default:
       System.out.print(" default case");}
</pre>
<p>
In this example, the <c>break</c> statement causes control to
pass to the end of the <c>switch</c>, with the effect being that one
and only one case will be executed within the <c>switch</c>. Thus, the
output of this code segment will be simply \mbox{m = 2} , matching
exactly the behavior of the multiway if-else selection structure
(Fig. <xref ref="fig-multiwayswitch"></xref>).
</p>
<figure xml:id="fig-multiwayswitch" >
<caption>Flowchart of the multiway switch structure.
Note that because of the <c>break</c> statement, one and only one case is
executed.</caption>
<image width="73%" source=".." />
</figure>
<principle>
<title>PROGRAMMING TIP:Multiway Selection</title>
<p>
A typical use for the
<c>switch</c> statement is to use it together with <c>break</c> to code a
multiway selection structure.
</p>
</principle>
  
<principle>
<title><c>break</c></title>
<p>
The <c>break</c> statement transfers
control out of its enclosing <term>block</term>, where a block is any
sequence of statements contained within curly brackets \{ and \}.
</p>
</principle>
  
<principle>
<title>DEBUGGING TIP:Switch without <c>break</c></title>
<p>
A
common error in coding the switch-based multiway selection is
forgetting to put a <c>break</c> statement at the end of each clause.
This may cause more than one case to be executed.
</p>
</principle>
<p>
\secEXRHone{Self-Study Exercises}
<ol>
<li><p>Identify any errors in the
following switch structures (if
there is no error, specify the output):
<pre>
(a) int k = 0;
    switch (k)
    case 0:
        System.out.println("zero");
        break;
    case 1:
        System.out.println("one");
        break;
    default:
        System.out.println("default");
        break;
</pre>
<pre>
(b) int k = 0;
    switch (k + 1)
    {   case 0:
            System.out.println("zero");
            break;
        case 1:
            System.out.println("one");
            break;
        default:
            System.out.println("default");
            break;
    }
</pre>
\
<pre>
(c) int k = 6;
    switch (k / 3.0)
    {   case 2:
            System.out.println("zero");
            break;
        case 3:
            System.out.println("one");
            break;
        default:
            System.out.println("default");
            break;
    }
</pre></p></li>
<li><p>Flavors of ice cream are represented as integers where 0 is
vanilla, 1 is chocolate, and 2 is strawberry.  Write a <c>switch</c>
statement that checks an integer variable <c>flavor</c> and prints
out the name of the ice cream flavor or prints <q>Error</q> in the
default case.</p></li>
<li><p>Modify your solution to the previous exercise to use
constants (final variables) to represent the ice cream flavors.</p></li>
</ol>

</p>
</section>
