<section xml:id="designing-good-programs">
  <title>Designing Good Programs</title>
  <introduction>
    <p>
      Programming is not simply a question of typing Java code.
      Rather, it involves a considerable amount of planning and careful designing.
      Badly designed programs rarely work correctly.
      Even though it is tempting for novice programmers to start entering code almost immediately,
      one of the first rules of programming is
    </p>
    <p>
      \begin{principle}[PROGRAMMING TIP:]
    </p>
    <p>
      {The sooner you begin to type code,
      the longer the program will take to finish,
      because careful design of the program must precede coding.
      This is particularly true of object-oriented programs.}
    </p>
    <p>
      In other words,
      the more thought and care you put into designing a program,
      the more likely you are to end up with one that works correctly.
      The following subsections provide a brief overview of the program development process.
    </p>
  </introduction>
  <subsection>
    <title>The Software Engineering Life Cycle</title>
    <p>
      Software engineering is the process of designing and writing software.
      The <em>software life cycle</em>
      refers to the different phases involved in the design and development of a computer program.
      Our presentation of examples in the book will focus on four phases of the overall life cycle.
      In the <em>specification</em> phase we provide a statement of the problem and a detailed description of what the program will do.
      In the <em>design</em> phase we describe the details of the various classes,
      methods, and data that will be used in the program.
      The <em>implementation</em> phase refers to the actual coding of the program into Java.
      In the <em>testing</em> phase we test the program's performance to make sure it is correct,
      recoding it or redesigning it as necessary.
    </p>
    <p>
      <xref ref="fig_progdev">Figure</xref>
      gives a more detailed overview of the program development process,
      focusing most of the attention on the design phase of the software life cycle.
      It shows that designing an object-oriented program is a matter of asking the right questions about the classes, data,
      and methods that make up the program.
    </p>
    <p>
      Overall, the program development process can be viewed as one that repeatedly applies the divide-and-conquer principle.
      That is, most programming problems can be repeatedly divided until you have a collection of relatively easy-to-solve subproblems,
      each of which can be handled by an object.
      In this way the program is \marginpar{Divide and conquer} divided into a collection of interacting objects.
      For each object we design a class.
      During class design,
      each object is divided further into its variables and methods.
    </p>
    <figure>
      <image width="73%" source="progdev.eps"/>
    </figure>
    <p>
      When should we stop subdividing?
      How much of a task should be assigned to a single object or a single method?
      The answers to these and similar questions are not easy.
      Good answers require the kind of judgment that comes through experience,
      and frequently there is more than one good way to design a solution.
      Here again, as we learn more about object-oriented programming,
      we'll learn more about how to make these design decisions.
    </p>
  </subsection>
</section>