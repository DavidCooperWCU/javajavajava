<section>
  <title>Editing, Compiling, and
  Running a Java Program</title>
  <introduction>
    <p>
      In this section we discuss the nuts and bolts of how to compile and run a Java program.
      Because we are exploring two different varieties of Java programs,
      console applications and Swing applications,
      the process differs slightly for each variety.
      We have already discussed some of the main language features of console and Swing applications,
      so in this section we focus more on features of the programming environment itself.
      Because we do not assume any particular programming environment in this book,
      our discussion will be somewhat generic.
      However, we do begin with a brief overview of the types of programming environments one might encounter.
    </p>
  </introduction>
  <subsection>
    <title>Java Development Environments</title>
    <p>
      A Java programming environment typically consists of several programs that perform different tasks required to edit,
      compile, and run a Java program.
      The following description will be based on the software development environment provided by Oracle,
      the company that owns and maintains Java.
      It is currently known as the <em>Java Platform, Standard Edition 8.0 (Java SE 8)</em>.
      Versions of Java SE are available for various platforms,
      including Linux, Windows, and macOS computers.
      Free downloads are available at Sun's Web site at <c>http://www.oracle.com/technetwork/java/</c>. (For more details about the Java SE, see <xref ref="appendix-jdk">Appendix</xref>.)
    </p>
    <p>
      In some cases,
      the individual programs that make up the Java SE are available in a single program development environment,
      known as an <em>integrated development environment (IDE)</em>.
      Some examples include Eclipse, jGrasp,
      and Oracle's own NetBeans IDE. Each of these provides a complete development package for editing,
      compiling,
      and running Java applications on a variety of platforms,
      including Linux, macOS, and Windows.
    </p>
    <p>
      <xref ref="fig_compile">Figure</xref>
      illustrates the process involved in creating and running a Java program.
      The discussion that follows here assumes
    </p>
    <figure xml:id="fig_compile">
      <caption>Editing, compiling, and running
<c>HelloWorld.java</c>.</caption>
      <image width="73%" source="compile.eps"/>
    </figure>
    <p>
      that you are using the Java SE as your development environment to edit,
      compile and run the example program.
      If you are using some other environment,
      you will need to read the documentation provided with the software to determine exactly how to edit,
      compile, and run Java programs in that environment.
    </p>
  </subsection>
  <subsection>
    <title>Editing a Program</title>
    <p>
      Any text editor may be used to edit the program by merely typing the program and making corrections as needed.
      Popular Unix and Linux editors include <c>vim</c> and <c>emacs</c>. These editors are also available on macOS and Windows.
      However, free macOS editors include <c>TextMate</c> and <c>TextWrangler</c>, and Windows has
<c>Notepad++</c> for free.
    </p>
    <p>
      As we have seen,
      a Java program consists of one or more class definitions.
      We will follow the convention of placing each class definition in its own file.
      (The rule in Java is that a source file may contain only one <c>public</c> class definition.)
      The files containing these classes' definitions must be named
      <em>ClassName.java</em> where <em>ClassName</em>
      is the name of the <c>public</c>Java class contained in the file.
    </p>
    <principle>
      <title>File Names</title>
      <p>
        A file that defines a <c>public</c>Java class named <c>ClassName</c> must be saved in a text file named <c>ClassName.java</c>. Otherwise an error will result.
      </p>
    </principle>
    <p>
      For example,
      in the case of our <c>HelloWorld</c> application program,
      the file must be named <c>HelloWorld.java</c>, and for <c>HelloWorldSwing</c>, it must be named <c>HelloWorldSwing.java</c>. Because Java is
      <em>case sensitive</em>,
      which means that Java pays attention to whether a letter is typed uppercase or lowercase,
      it would be an error if the file containing the <c>HelloWorld</c> class were named <c>helloworld.java</c> or <c>Helloworld.java</c>. The error in this case would be a semantic error.
      Java would not be able to find the <c>HelloWorld</c> class because it will be looking for a file named
<c>HelloWorld.java</c>.
    </p>
    <principle>
      <title>Case Sensitivity</title>
      <p>
        Java is case sensitive,
        which means that it treats <c>helloWorld</c> and <c>Helloworld</c> as different names.
      </p>
    </principle>
  </subsection>
  <subsection>
    <title>Compiling a Program</title>
    <p>
      Recall that before you can run a Java source program you have to compile it into the Java bytecode,
      the intermediate code understood by the Java Virtual Machine (JVM).
      Source code for both applets and applications must be compiled.
      To run a Java program, whether an applet or an application,
      the JVM is then used to interpret and execute the bytecode.
    </p>
    <p>
      The Java SE comes in two parts, a runtime program,
      called the <em>Java Runtime Environment (JRE)</em>
      and a development package,
      called the <em>Software Development Kit (SDK)</em>.
      If you are just going to run Java programs,
      you need only install the JRE on your computer.
      In order to run Java applets, browsers,
      such as Internet Explorer and Netscape Navigator,
      must contain a plugin version of the JRE. On the other hand,
      if you are going to be developing Java programs,
      you will need to install the SDK as well.
    </p>
    <p>
      The Java SDK compiler is named <c>javac</c>. In some environments<mdash/>such as within Linux or at the Windows command prompt <mdash/><c>HelloWorld.java</c> would be compiled by typing the following command at the system prompt:
    </p>
<pre>
javac HelloWorld.java
</pre>
    <p>
      As <xref ref="fig_compile">Figure</xref> illustrates,
      if the
<c>HelloWorld.java</c> program does not contain errors,
      the result of this command is the creation of a Java bytecode file named <c>HelloWorld.class</c><mdash/>a file that has the same prefix as the source file but with the suffix <c>.class</c> rather than <c>.java</c>. By default,
      the bytecode file will be placed in the same directory as the source file.
      If <c>javac</c> detects errors in the Java code,
      a list of error messages will be printed.
    </p>
  </subsection>
  <subsection>
    <title>Running a Java Application Program</title>
    <p>
      In order to run
      (or execute)
      a program on any computer,
      the program's <em>executable code</em>
      must be loaded into the computer's main memory.
      For Java environments,
      this means that the program's <c>.class</c> file must be loaded into the computer's memory,
      where it is then interpreted by the Java Virtual Machine.
      To run a Java program on Linux systems or at the Windows command prompt, type
    </p>
<pre>
java HelloWorld
</pre>
    <p>
      on the command line.
      This command loads the JVM, which will then load and interpret the application's bytecode (<c>HelloWorld.class</c>).
      The
      <q>HelloWorld</q>
      string will be displayed on the command line.
    </p>
    <p>
      On Macintosh systems,
      or within an IDE, which do not typically have a command line interface,
      you would select the compile and run commands from a menu.
      Once the code is compiled,
      the run command will cause the JVM to be loaded and the bytecode to be interpreted.
      The
      <q>Hello, World!</q>
      output would appear in a text-based window that automatically pops up on your computer screen.
      In any case, regardless of the system you use,
      running the <c>HelloWorld</c> console application program will cause the
      <q>Hello, World!</q>
      message to be displayed on some kind of standard output device (Fig.
      <xref ref="fig_stdout"></xref>). \marginfigscaled{chptr01/1f4.png}{0.5}{Compiling and Running the <c>HelloWorld.java</c> console application program.}{fig:stdout}
    </p>
  </subsection>
  <subsection xml:id="subsec_swing">
    <title>Running a Java Swing Program</title>
    <p>
      When you run a Java Swing Program,
      there is typically no console output.
      You only see your output in the Window (JFrame) that your Graphics are displayed in.
      This makes automated testing more difficult since you need to visually inspect that the program is working correctly.
    </p>
    <p>
      When you run
    </p>
<pre>
java HelloWorldSwing
</pre>
    <p>
      A window will open,
      and you won't be able to type in the console until you close the window,
      quit the program,
      or type ctl-c to send a kill signal to the Swing program.
      The result of running,
      as shown in <xref ref="fig_hello">Figure</xref>, is that the
      <q>Hello, World!</q>
      message will be displayed within it's own window.
    </p>
  </subsection>
</section>