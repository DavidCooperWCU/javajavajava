<section xml:id="handling-textina-graphics-context-optional">
  <title>Handling Text in a Graphics Context
  (Optional)</title>
  <introduction>
    <p>
      In order to create attractive GUIs, it is often necessary to be able to select and control the font that is used.
      Even a simple drawing task, such as being able to center a message in a panel,
      requires that we know the font's dimensions and be able to manipulate <image width="73%" source="chptr07"/> them.
      In this section,
      we learn how to work with Java's fonts and font control methods.
    </p>
    <p>
      Each graphics context has an associated <c>Font</c> and <c>FontMetrics</c> object,
      and the <c>Graphics</c> class (Fig.
      <xref ref="fig-fontmethods"></xref>) provides several methods to access them.
      A <c>FontMetrics</c> is an object that encapsulates important data about a font,
      such as its height and width.
      Java assigns a default font to each <c>Graphics</c> object.
      For example,
      this is the font used by the <c>drawString()</c> method,
      which we used in our very first Java programs back in <xref ref="ch_intro2">Chapter</xref>.
      The particular font used is system dependent,
      but to override the default one can simply invoke the <c>setFont()</c> method:
    </p>
<pre>
g.setFont(new Font("TimesRoman", Font.ITALIC, 12));
</pre>
    <p>
      In this case,
      the <c>Font()</c> constructor is used to specify a 12-point,
      italicized, <em>TimesRoman</em> font.
      Once the font is set, it will be used in all subsequent drawings.
    </p>
  </introduction>
  <subsection xml:id="fig-font">
    <title>The <c>Font</c> and <c>FontMetrics</c>Classes</title>
    <p>
      The <c>Font</c> class (Fig.<nbsp/>7.19) provides a platform-independent representation of an individual font.
      A font is distinguished by its name, size, and style,
      and the <c>Font</c> class includes <c>protected</c> instance variables for these properties,
      as well as a constructor method that allows these three characteristics to be specified.
    </p>
    <p>
      <image width="73%" source="chptr07"/>
    </p>
    <p>
      In order to understand how fonts work,
      it is necessary to distinguish between a <em>character</em>,
      which is a symbol that represents a certain letter or digit,
      and a <term>glyph</term>, which is a shape used to display the character.
      When you display a string, such as
      <q>Hello</q>, Java maps each individual character into a corresponding shape,
      as defined by the particular font that is selected.
    </p>
    <p>
      Java distinguishes between <em>physical</em>
      and <em>logical</em> fonts.
      A <term>physical font</term> is an actual font library that contains the data and tables needed to associate the correct glyph with a given character.
      Generally speaking, a given platform
      (host computer plus operating system)
      will have a collection of such fonts available on it.
    </p>
    <p>
      A <term>logical font</term> is one of five font families that are supported by the Java runtime environment.
      These include Serif, SansSerif, Monospaced, Dialog, and DialogInput.
      Java also supports the following font styles: <c>PLAIN</c>, <c>BOLD</c>, <c>ITALIC</c>, and <c>BOLD+ITALIC</c>. Whereas the physical fonts are platform dependent,
      the logical fonts and styles are platform independent.
      When used in a program,
      they are mapped to real fonts available on the host system.
      If the host system does not have an exact match for the specified font,
      it will supply a substitute.
      For example,
      if you specify a 48-point, italic, Monospaced font,
    </p>
<pre>
Font myFont = new Font("Monospaced", Font.ITALIC, 48);
</pre>
    <p>
      the system may map this to a 24-point, italic Courier font,
      if that is the largest fixed-spaced font available.
    </p>
    <p>
      The <c>Font()</c> constructor is designed to work with any set of arguments.
      Thus, if you supply the name of a font that is not available,
      the system will supply a default font as a substitute.
      For example,
      on my system, specifying a nonexistent font named Random,
    </p>
<pre>
g.setFont(new Font("Random", Font.ITALIC, 12) );
g.drawString("Hello, World!! (random, italic, 12)", 30, 45);
</pre>
    <p>
      produces the same font used as the mapping for a font named <em>Dialog</em>.
    </p>
    <principle>
      <title>EFFECTIVE DESIGN:Font Portability</title>
      <p>
        The fact that <c>Font()</c> will produce a font for virtually any set of arguments is important in ensuring that a Java program will run on any platform.
        This is another example of how Java has been designed for portability.
      </p>
    </principle>
    <p>
      The <c>Component.setFont()</c> method can be used to assign a specific font to a button or window or other graphics component.
      All AWT and JFC components have an associated font,
      which can be accessed using the <c>Component.setFont()</c> and <c>Component.getFont()</c> methods.
      For example,
      the following code could be used to override a <c>Button</c>'s font:
    </p>
<pre>
Button b = new Button("Label");
b.setFont(new Font("Times", Font.ITALIC, 14));
</pre>
    <p>
      If 14-point,
      italic, Times font is not available on the host system,
      a substitute will be supplied.
    </p>
  </subsection>
  <subsection xml:id="fig-fontmetrics">
    <title>Font Metrics</title>
    <p>
      To illustrate how to use the <c>FontMetrics</c> class,
      let's write a \marginpar{Problem statement}
      <q>Hello, World!</q>
      application that centers its message both horizontally and vertically in its window.
      The message should be centered regardless of the size of the application window.
      Thus, we will have to position the text relative to the window size,
      which is something we learned in positioning geometric shapes.
      The message should also be centered no matter what font is used.
      This will require us to know certain characteristics of the font itself,
      such as the height and width of its characters,
      whether the characters have a fixed or variable width,
      and so on.
      In order to get access to these properties,
      we will use the <c>FontMetrics</c> class.
    </p>
    <p>
      <image width="73%" source="chptr07"/> Figure<nbsp/>7.20 illustrates the various properties that are associated with a font.
      The <term>baseline</term>
          <idx><h>baseline</h></idx>
      of a font refers to the line on which the bottom of most characters occurs.
      When drawing a string, the <em>x-</em>
      and <em>y-</em>coordinates determine the baseline of the string's first character.
      Thus, in
    </p>
<pre>
g.drawString("Hello, World!", 10, 40);
</pre>
    <p>
      the bottom left of the <em>H</em> in
      <q>Hello, World!</q>
      would be located at (10, 40).
    </p>
    <p>
      All characters ascend some distance above the baseline.
      This is known as the character's <term>ascent</term>.
          <idx><h>ascent</h></idx>
      Some characters, such as <em>y</em>,
      may extend below the baseline,
      into what's known as the <em>descent</em>.
      Each font has a <em>maximum descent</em>.
      Similarly, some characters, such as accent characters,
      may extend above the <em>maximum ascent</em>
      into a space known as the <em>leading</em>.
    </p>
    <p>
      The <em>height</em> of a font is defined as the sum
      (in pixels)
      of the ascent, descent, and leading values.
      The height is a property of the font itself rather than of any individual character.
      Except for fixed-width fonts,
      in which the width of all characters is the same,
      the characters that make up a font have varying widths.
      The width of an individual character is known as its <em>advance</em>.
    </p>
    <p>
      The <c>FontMetrics</c> class (Fig.
      <xref ref="fig-fontmetrics2"></xref>) provides methods <image width="73%" source="chptr07"/> \caption{The <c>FontMetrics</c> class. } for accessing a font's properties.
      These can be useful to control the layout of text on a GUI. For example,
      when drawing multiple lines of text,
      the <c>getHeight()</c> method is useful for determining how much space should be left between lines.
      When drawing character by character,
      the <c>charWidth()</c> method can be used to determine how much space must be left between characters.
      Alternatively,
      the <c>stringWidth()</c> method can be used to determine the number of pixels required to draw the entire string.
    </p>
  </subsection>
  <subsection xml:id="fig-dimension">
    <title>Example: Centering a Line of Text</title>
    <p>
      Given this background,
      let's take on the task of centering a message in an application window.
      In order for this application to work for any font,
      we must take care not to base its design on characteristics of the \marginpar{Algorithm design: Generality} particular font that we happen to be using.
      To underscore this point,
      let's design it to work for a font named Random,
      which, as we noted earlier,
      will be mapped to some font by the system on which the application is run.
      In other words,
      we will let the system pick a font for this application's message.
      An interesting experiment would be to run the application on different platforms to see what fonts are chosen.
    </p>
    <p>
      The only method we need for this application is the <c>paint()</c> method.
      Let's begin by setting the font used by the graphics context to a random font.
      To get the characteristics of this font,
      we create a <c>FontMetrics</c> object and get the font metrics for the font we just created:
    </p>
<pre>
g.setFont(new Font("Random", Font.BOLD, 24));
FontMetrics metrics = g.getFontMetrics();
</pre>
    <p>
      The next step is to determine the <c>JFrame</c>'s dimensions using the <c>getSize()</c> method.
      This method returns an object of type <c>Dimension</c>. The <c>java.awt.Dimension</c> class (Fig.<nbsp/>7.22) represents the size
      (width and height)
      of a GUI component.
      A <c>Dimension</c> makes it possible to manipulate an object's width and height as a single entity.
      Note that the <c>height</c> and <c>width</c> variables are defined as <c>public</c>, which is an exception from the usual convention of defining instances variables as <c>private</c> or
<c>protected</c>. The justification for this exception is probably to simplify the syntax of referring to an object's width and height.
      For example,
      the following syntax can be used to refer to a component's dimensions:
    </p>
<pre>
Dimension d = new Dimension(100, 50);
System.out.println("width = " + d.width +
                   " height = " + d.height);
</pre>
    <p>
      Note the redundancy built into the <c>Dimension</c> class.
      For example,
      in addition to being able to set a <c>Dimension</c>'s <image width="73%" source="chptr07"/> instance variables directly,
      public access methods are provided.
      Also, by defining more than one version of some access methods,
      the class achieves a higher level of flexibility.
      The same can be said for providing several different constructors,
      including a copy constructor.
      Finally, note how it overrides the <c>equals()</c> and
<c>toString()</c> methods.
      These are all examples of good object-oriented design.
    </p>
    <principle>
      <title>EFFECTIVE DESIGN:Redundancy</title>
      <p>
        Redundancy is often a desirable characteristic of object design.
        It makes the object easier to use and more widely applicable.
      </p>
    </principle>
    <p>
      The <c>Dimension</c> object is used to calculate the <em>x-</em>
      and <em>y-</em>coordinates for the string.
      In order to center the string horizontally,
      we need to know its width,
      which is supplied by the <c>metrics</c> object.
      If the <c>JFrame</c> is <c>\marginpar{Centering text}
d.width</c> pixels wide,
      then the following expression subtracts the width of the string from the width of the <c>JFrame</c> and then divides the leftover space in half:
    </p>
<pre>
// Calculate coordinates
int x = (d.width - metrics.stringWidth(str)) / 2;
</pre>
    <p>
      Similarly, the following expression adds the height of the string to the height of the <c>JFrame</c> and divides the leftover space in half:
    </p>
<pre>
int y = (d.height + metrics.getHeight()) / 2;
</pre>
    <p>
      Taken together,
      these calculations give the coordinates for the lower left pixel of the first character in
      <q>Hello, World!!</q>
      The only remaining task is to draw the string (Fig.
      <xref ref="fig-centertext"></xref>).
      Because the <c>paint()</c> method is called automatically whenever the <c>JFrame</c> is resized,
      this application,
      whose output is shown in <xref ref="fig-centertextscreen">Figure</xref>,
      will re-center its message whenever it is resized by the user.
    </p>
    <figure xml:id="fig-centertext">
      <caption>The <c>CenterText</c> application.</caption>
      \[28pc]
<pre>
import java.awt.*;
import javax.swing.*;
public class CenterText extends JFrame {
                // Print hello world! in center of frame
public void paint(Graphics g) {
  String str = "Hello, World!";
  g.setFont(new Font("Random", Font.PLAIN, 24)); // Random font
  FontMetrics metrics = g.getFontMetrics(); //  And its metrics
  Dimension d = getSize();       // Get the frame's size
             // Clear the frame
  g.setColor(getBackground());
  g.fillRect(0,0,d.width,d.height);
  g.setColor(Color.black);
                                // Calculate coordinates
  int x = (d.width - metrics.stringWidth(str)) / 2;
  int y = (d.height + metrics.getHeight()) / 2;
  g.drawString( str, x, y );          // Draw the string} // paint()
public static void main(String args[]) {
  CenterText ct = new CenterText();
  ct.setSize(400,400);
  ct.setVisible(true);}} // CenterText
</pre>
    </figure>
    <principle>
      <title>PROGRAMMING TIP:Generality</title>
      <p>
        By using a component's size and font as the determining factors,
        you can center text on virtually any component.
        These values are available via the component's <c>getFont()</c> and <c>getSize()</c> methods.
      </p>
    </principle>
    <figure xml:id="fig-centertextscreen">
      <caption>The <c>CenterText</c> application keeps its
      message centered no matter how its window is resized.</caption>
      <image width="73%" source=".."/>
    </figure>
    <p>
      \secSMH{Chapter Summary} \secKTH{Technical Terms} \begin{KT} ascent
    </p>
    <p>
      baseline
    </p>
    <p>
      concatenation
    </p>
    <p>
      copy constructor
    </p>
    <p>
      data structure
    </p>
    <p>
      delimited string
    </p>
    <p>
      delimiter
    </p>
    <p>
      empty string
    </p>
    <p>
      garbage collection
    </p>
    <p>
      glyph
    </p>
    <p>
      lexicographic order
    </p>
    <p>
      logical font
    </p>
    <p>
      off-by-one error
    </p>
    <p>
      orphan object
    </p>
    <p>
      physical font
    </p>
    <p>
      read only
    </p>
    <p>
      string
    </p>
    <p>
      string index
    </p>
    <p>
      string literal
    </p>
    <p>
      token
    </p>
    <p>
      unit indexed
    </p>
    <p>
      zero indexed
    </p>
    <p>
      \end{KT}
    </p>
    <p>
      \secKTH{Summary of Important Points}
      <ul>
        <li>
          <p>
            A <c>String<idx><h>String</h></idx></c> literal is a sequence of 0 or more characters enclosed within double quotation marks.
            A <c>String</c> object is a sequence of 0 or more characters,
            plus a variety of class and instance methods and variables.
          </p>
        </li>
        <li>
          <p>
            A <c>String</c> object is created automatically by Java the first time it encounters a
            <em>literal string</em>, such as
            <q>Socrates,</q>
            in a program.
            Subsequent occurrences of the literal do not cause additional objects to be instantiated.
            Instead, every occurrence of the literal
            <q>Socrates</q>
            refers to the initial object.
          </p>
        </li>
        <li>
          <p>
            A <c>String</c> object is created whenever the <c>new</c> operator is used in conjunction with a <c>String()</c> constructor<mdash/>for example, <c>new String("hello")</c>.
          </p>
        </li>
        <li>
          <p>
            The <c>String</c> concatenation operator is the overloaded <m>+</m> symbol;
            it is used to combine two <c>String</c> s into a single
<c>String</c>:
            <q>hello</q>
            +
            <q>world</q>
             <c>==></c>
            <q>helloworld</q>. Strings are indexed starting at 0.
            The <c>indexOf()</c> and <c>lastIndexOf()</c> methods
              <idx><h>String methods</h></idx>
            are used for finding the first or last occurrence of a character or substring within a <c>String</c>. The <c>valueOf()</c> methods convert a nonstring into a <c>String</c>. The <c>length()</c> method determines the number of characters in a <c>String</c>. The <c>charAt()</c> method returns the single character at a particular index position.
            The various <c>substring()</c> methods return the substring at particular index positions in a <c>String</c>.
          </p>
        </li>
        <li>
          <p>
            The overloaded <c>equals()</c> method returns <c>true</c> if two
<c>String</c> s contain the same exact sequence of characters.
            The <c>==</c> operator,
            when used on <c>String</c> s, returns true if two references designate the same <c>String</c> object.
            String objects are <em>immutable</em>.
            They cannot be modified.
          </p>
        </li>
        <li>
          <p>
            A <c>StringBuffer</c> is a string object that can be modified using methods such as <c>insert()</c> and <c>append()</c>.
          </p>
        </li>
        <li>
          <p>
            A <c>StringTokenizer</c> is an object that can be used to break a <c>String</c> into a collection of <em>tokens</em>
            separated by <em>delimiters</em>.
            The whitespace characters<mdash/>tabs,
            blanks, and newlines<mdash/>are the default delimiters.
          </p>
        </li>
        <li>
          <p>
            The <c>FontMetrics</c> class is used to obtain the specific dimensions of the the various <c>Font</c> s.
            It is useful when you wish to center text.  <c>Font</c> s are inherently platform dependent.
            For maximum portability, it is best to use default fonts.
          </p>
        </li>
      </ul>
    </p>
    <p>
      { \rule[0pt]{40.5pc}{0.5pt}} \epsfig{file=../commonart/eoc2text.eps,
      height=4pt,width=40.5pc,clip=} \marginpar{ { \uppercase{Solutions to Self-Study Exercises} } } \newcommand{\secANSHleft}{ {\rule[0pt]{40.5pc}{0.5pt}} \epsfig{file=../commonart/eoc2text.eps,
      height=4pt,width=40.5pc,clip=} \marginpar{ { \uppercase{Solutions to Self-Study Exercises} } } \newcommand{\secKTH}[1]{{ #1} } \newcommand{\secLREXRH}[1]{{ { \uppercase{#1}}} } \def\endpracticedesign{ {\rule[0pt]{27pc}{0.5pt}} } \newcommand{\secHsix}[1]{{#1} } \newcommand{\secHfive}[2]{{ \rule[16pt]{27pc}{0.5pt} }\newcommand{\secBXsixHone}[1]{{#1} } \newcommand{\secBXsixBTHleft}[1]{ {\rule[0pt]{44.45pc}{2pt}} \marginpar{ }\newcommand{\secBXsevenHone}[1]{{#1} }\newcommand{\secCOBH}[1] {{\uppercase{#1}} }\newcommand{\secCOLH}[1] {{\uppercase{#1}} }\newcommand{\secSMH}[1]{ {\rule[0pt]{40.5pc}{1pt}} \epsfig{file=../commonart/eoc2text.eps,
      height=4pt,width=40.5pc,clip=} \marginpar{ { \uppercase{#1} } } } \newcommand{\secSMHleft}[1]{ {\rule[0pt]{40.5pc}{0.5pt}} \epsfig{file=../commonart/eoc2text.eps,
      height=4pt,width=40.5pc,clip=} \marginpar{ \uppercase{#1} } } \newcommand{\secSMHtwo}[1]{{ #1} }\newcommand{\secEXRHone}[1]{{\uppercase{#1}} } \newcounter{EXRLLcount} { \marginpar{{From the Java Library} #1} } {\begin{minipage}{26pc}}{\end{minipage}} \rule[0pt]{27pc}{#1} } \begin{minipage}[t]{26pc} { \end{minipage} } \rule[0pt]{#2}{#1} } \begin{minipage}[t]{#2} { \end{minipage} } \rule[0pt]{40pc}{#1} } \begin{minipage}[t]{26pc} { \end{minipage} } \rule[0pt]{#2}{#1}
      <ul>
        \columnsep = 0pt
        <li>
          <ol>
            <li>
              <title>b</title>
              <p>
                silly
              </p>
            </li>
            <li>
              <title>b</title>
              <p>
                silly
              </p>
            </li>
            <li>
              <title>c</title>
              <p>
                silly stuff
              </p>
            </li>
          </ol>
        </li>
        <li>
          <ol>
            <li>
              <title>a</title>
              <p>
<c>String str1 = "";</c>
              </p>
            </li>
            <li>
              <title>b</title>
              <p>
<c>String str2 = new String("stop");</c>
              </p>
            </li>
            <li>
              <title>c</title>
              <p>
<c>String str3 = str1 + str2;</c>
              </p>
            </li>
          </ol>
          \columnsep = 0pt
        </li>
        <li>
          <ol>
            <li>
              <title>d</title>
              <p>
                15
              </p>
            </li>
            <li>
              <title>b</title>
              <p>
<c>"551"</c>
              </p>
            </li>
            <li>
              <title>c</title>
              <p>
<c>"5175"</c>
              </p>
            </li>
          </ol>
        </li>
        <li xml:id="ans-strobjects2">
          <p>
            See <xref ref="fig-strobjects3">Figure</xref>.
            <figure xml:id="fig-strobjects3">
              <caption>Answer to Exercise 7.4. Note that <em>s1</em> is <c>null</c> because it has not been instantiated and has not been assigned a literal value.</caption>
              <image width="73%" source=".."/>
            </figure>
          </p>
        </li>
        <li>
          <ol>
            <li>
              <title>a</title>
              <p>
<c>"45"</c>
              </p>
            </li>
            <li>
              <title>b</title>
              <p>
<c>"121"</c>
              </p>
            </li>
            <li>
              <title>c</title>
              <p>
<c>"X"</c>
              </p>
            </li>
          </ol>
        </li>
        <li>
          <ol>
            <li>
              <title>a</title>
              <p>
<c>String.valueOf(100)</c>
              </p>
            </li>
            <li>
              <title>b</title>
              <p>
<c>String.valueOf('V');</c>
              </p>
            </li>
            <li>
              <title>c</title>
              <p>
<c>String s = new String(String.valueOf(X * Y));</c>
              </p>
            </li>
          </ol>
        </li>
        <li>
          <ol>
            <li>
              <title>a</title>
              <p>
                0
              </p>
            </li>
            <li>
              <title>e</title>
              <p>
                1
              </p>
            </li>
            <li>
              <title>c</title>
              <p>
                <m>-1</m>
              </p>
            </li>
          </ol>
          \item
          <ol>
            <li>
              <title>a</title>
              <p>
                16
              </p>
            </li>
            <li>
              <title>b</title>
              <p>
<c>"16"</c>
              </p>
            </li>
            <li>
              <title>e</title>
              <p>
                1
              </p>
            </li>
            <li>
              <title>d</title>
              <p>
                15
              </p>
            </li>
            <li>
              <title>e</title>
              <p>
                1
              </p>
            </li>
            <li>
              <title>f</title>
              <p>
                13
              </p>
            </li>
            <li>
              <title>j</title>
              <p>
                7
              </p>
            </li>
            <li>
              <title>k</title>
              <p>
                3
              </p>
            </li>
            <li>
              <title>j</title>
              <p>
                7
              </p>
            </li>
            <li>
              <title>j</title>
              <p>
                7
              </p>
            </li>
            <li>
              <title>k</title>
              <p>
                3
              </p>
            </li>
          </ol>
        </li>
        <li>
          <p>
            Evaluate the following expression:
<pre>
String tricky = "abcdefg01234567";
tricky.indexOf(String.valueOf(tricky.indexOf("c")));
tricky.indexOf(String.valueOf(2));
tricky.indexOf("2");
Answer: 9
</pre>\item
            <ol>
              <li>
                <title>a</title>
                <p>
<c>"uvwxyz"</c>
                </p>
              </li>
              <li>
                <title>b</title>
                <p>
<c>"bcde"</c>
                </p>
              </li>
              <li>
                <title>e</title>
                <p>
<c>"xyz"</c>
                </p>
              </li>
              <li>
                <title>d</title>
                <p>
<c>"xy"</c>
                </p>
              </li>
              <li>
                <title>e</title>
                <p>
<c>"xyz"</c>
                </p>
              </li>
            </ol>
          </p>
          \item
          <ol>
            <li>
              <title>a</title>
              <p>
<c>"uvwxyz"</c>
              </p>
            </li>
            <li>
              <title>b</title>
              <p>
<c>"bcde"</c>
              </p>
            </li>
            <li>
              <title>e</title>
              <p>
<c>"xyz"</c>
              </p>
            </li>
            <li>
              <title>e</title>
              <p>
<c>"xyz"</c>
              </p>
            </li>
            <li>
              <title>e</title>
              <p>
<c>"xyz"</c>
              </p>
            </li>
          </ol>
        </li>
        <li>
          <p>
            A class to test the string methods. \[27pc]
<pre>
public class StringProcessorTest {
  public static void main(String[] args) {
    KeyboardReader kb = new KeyboardReader();
    kb.prompt("Input a String or - stop - to quit: ");
    String str = kb.getKeyboardInput();
    while (!str.equals("stop")){
      kb.display("Testing printLetters()\n");
      StringProcessor.printLetters(str);
      kb.display("testing countChars()\n");
      kb.display("Total occurences of e = ");
      kb.display(StringProcessor.countChar(str,'e') + "\n");
      kb.display("Testing reverse()\n");
      kb.display(StringProcessor.reverse(str)+ "\n");
      kb.display("Testing capitalize()\n");
      kb.display(StringProcessor.capitalize(str) + "\n\n");
      kb.prompt("Input a String or - stop - to quit: ");
      str = kb.getKeyboardInput();
    } // while
  } //main()} // StringProcessorTest class
</pre>
          </p>
        </li>
        <li>
          <p>
            Method to remove all blanks from a string:
<pre>
// Pre: s is a non null string
 // Post: s is returned with all its blanks removed
 public String removeBlanks(String s) {
   StringBuffer result = new StringBuffer();
   for (int k = 0; k &lt; s.length();  k++)
     if (s.charAt(k) != ' ')      // If this is not a blank
       result.append(s.charAt(k));  //  append it to result
   return result.toString();
 }
</pre>
          </p>
        </li>
        <li>
          <p>
            A Alpha Z Zero Zeroes a alpha bath bin z zero
          </p>
        </li>
        <li>
          <p>
            To modify <c>precedes</c> so that it also returns true when its two string arguments are equal,
            just change the operator in the final return statement to <c>&lt;=</c>:
<pre>
if (s1.charAt(k) &lt;= s2.charAt(k) )
      return true;
</pre>\item
            <ol>
              <li>
                <title>f</title>
                <p>
                  true
                </p>
              </li>
              <li>
                <title>f</title>
                <p>
                  true
                </p>
              </li>
              <li>
                <title>i</title>
                <p>
                  false
                </p>
              </li>
              <li>
                <title>i</title>
                <p>
                  false
                </p>
              </li>
              <li>
                <title>i</title>
                <p>
                  false
                </p>
              </li>
              <li>
                <title>f</title>
                <p>
                  true
                </p>
              </li>
              <li>
                <title>i</title>
                <p>
                  false
                </p>
              </li>
              <li>
                <title>i</title>
                <p>
                  false
                </p>
              </li>
              <li>
                <title>i</title>
                <p>
                  false
                </p>
              </li>
            </ol>
          </p>
        </li>
        <li>
          <p>
            The variables in <c>TestStringEquals</c> are declared <c>static</c> because they are used in <c>static</c> methods.
            Whenever you call a method directly from <c>main()</c>, it must be <c>static</c> because
<c>main()</c> is static.
            Remember that <c>static</c> elements are associated with the class,
            not with its instances.
            So <c>main()</c> can only use static elements because they don't depend on the existence of instances. \item
            <ol>
              <li>
                <title>a</title>
                <p>
<c>String s3 = s1.substring(s1.indexOf('n'))</c>
       <c>+ s1.substring(0,s1.indexOf('n'));</c>
                </p>
              </li>
              <li>
                <title>b</title>
                <p>
<c>String s4 = s2.substring(6) + " " + s2.substring(0,5);</c>
                </p>
              </li>
              <li>
                <title>c</title>
                <p>
<c>String s5 = s2.substring(0,6) + s1.substring(0,3);</c>
                </p>
              </li>
            </ol>
          </p>
        </li>
      </ul>
    </p>
    <p>
      \marginpar{<term>Note:</term> For programming exercises,
      <term>first</term> draw a UML class diagram describing all classes and their inheritance relationships and/or associations.}
    </p>
    <ol>
      <li>
        <p>
          Explain the difference between the following pairs of terms:
        </p>
        <ol>
          Unit indexing and <em>zero indexing</em>. Data structure and <em>data type</em>. StringBuffer and <c>String</c>. String and <c>StringTokenizer</c>. Declaring a variable and <em>instantiating a</em><c>String</c>.
          <li>
            <p>
              A <c>Font</c> and a <c>FontMetrics</c> object.
            </p>
          </li>
        </ol>
      </li>
      <li>
        <p>
          Fill in the blanks.
          <ol>
            <li>
              <p>
                When the first character in a string has index 0, this is known as \rule{40pt}{0.5pt} .
              </p>
            </li>
            <li>
              <p>
                A sequence of characters enclosed within quotes is known as a \rule{40pt}{0.5pt} .
              </p>
            </li>
          </ol>
        </p>
      </li>
      <li>
        <p>
          Given the <c>String</c><em>str</em> with the value
          <q>to be or not to be that is the question,</q>
          write Java expressions to extract each of the substrings shown below.
          For each substring, provide two sets of answers.
          One that uses the actual index numbers of the substrings<mdash/>for example,
          the first
          <q>to</q>
          goes from 0 to 2<mdash/>and a second more general solution that will also retrieve the substring from the following string
          <q>it is easy to become what you want to become.</q>
          (<em>Hint</em>: In the second case,
          use <c>length()</c> and <c>indexOf()</c> along with <c>substring()</c> in your expressions.
          If necessary,
          you may use local variables to store intermediate results.
          The answer to (a) is provided as an example.)
          <ol>
            <li>
              <p>
                the first
                <q>to</q>
                in the string
<pre>
str.substring(0, 2)                            // Answer 1
str.substring(
     str.indexOf("to"), str.indexOf("to") + 2) // Answer 2
</pre>
              </p>
            </li>
            <li>
              <p>
                the last
                <q>to</q>
                in the string
              </p>
            </li>
            <li>
              <p>
                the first
                <q>be</q>
                in the string
              </p>
            </li>
            <li>
              <p>
                the last
                <q>be</q>
                in the string
              </p>
            </li>
            <li>
              <p>
                the first four characters in the string
              </p>
            </li>
            <li>
              <p>
                the last four characters in the string
              </p>
            </li>
          </ol>
        </p>
        \begin{minipage}{27pc}
      </li>
      <li>
        <p>
          Identify the syntax errors in each of the following,
          assuming that <c>s</c> is the literal string
          <q>exercise</q>:
          <ol>
            <li>
              <p>
                <c>s.charAt("hello")</c>
              </p>
            </li>
            <li>
              <p>
                <c>s.indexOf(10)</c>
              </p>
            </li>
            <li>
              <p>
                <c>s.substring("er")</c>
              </p>
            </li>
            <li>
              <p>
                <c>s.lastIndexOf(er)</c>
              </p>
            </li>
            <li>
              <p>
                <c>s.length</c>
              </p>
            </li>
          </ol>
        </p>
        \end{minipage}
      </li>
      <li>
        <p>
          Evaluate each of the following expressions,
          assuming that
<c>s</c> is the literal string
          <q>exercise</q>:
          <ol>
            <li>
              <p>
                <c>s.charAt(5)</c>
              </p>
            </li>
            <li>
              <p>
                <c>s.indexOf("er")</c>
              </p>
            </li>
            <li>
              <p>
                <c>s.substring(5)</c>
              </p>
            </li>
            <li>
              <p>
                <c>s.lastIndexOf('e')</c>
              </p>
            </li>
            <li>
              <p>
                <c>s.length()</c>
              </p>
            </li>
          </ol>
        </p>
      </li>
      <li>
        <p>
          Write your own <c>equalsIgnoreCase()</c> method using only other <c>String</c> methods.
        </p>
      </li>
      <li>
        <p>
          Write your own <c>String</c> equality method without using <c>String.</c>\mbox{equals()} . (<em>Hint</em>: Modify the <c>precedes()</c> method.)
        </p>
      </li>
      <li>
        <p>
          Even though Java's <c>String</c> class has a built-in <c>toLowerCase()</c> method,
          write your own implementation of this method.
          It should take a <c>String</c> parameter and return a <c>String</c> with all its letters written in lowercase.
        </p>
      </li>
      <li>
        <p>
          Write a method that converts its <c>String</c> parameter so that letters are written in blocks five characters long.
          For example,
          consider the following two versions of the same sentence:
<pre>
Plain :   This is how we would ordinarily write a sentence.
Blocked : Thisi showw ewoul dordi naril ywrit easen tence.
</pre>
        </p>
      </li>
      <li>
        <p>
          Design and implement a Java Swing program that lets the user type a document into a <c>TextArea</c> and then provides the following analysis of the document:
          the number of words in the document,
          the number of characters in the document,<nbsp/>and the percentage of words that have more than six letters.
        </p>
      </li>
      <li>
        <p>
          Design and write a Java Swing program that searches for single-digit numbers in a text and changes them to their corresponding words.
          For example, the string
          <q>4 score and 7 years ago</q>
          would be converted into
          <q>four score and seven years ago</q>.
        </p>
      </li>
      <li>
        <p>
          A palindrome is a string that is spelled the same way backward and forward.
          For example, <em>mom, dad,
          radar, 727</em> and <em>able was i ere i saw elba</em>
          are all examples of palindromes.
          Write a Java Swing program that lets the user type in a word or phrase and then determines whether the string is a palindrome.
        </p>
      </li>
      <li>
        <p>
          Write a maze program that uses a string to store a representation of the maze.
          Write a method that accepts a <c>String</c> parameter and prints a two-dimensional representation of a maze.
          For example, the maze shown here,
          where <c>O</c> marks the entrance and exit can be generated from the following string:
<pre>
String: XX_XXXXXXXX__XXX_XXXX_XX____XXX_XX_XX_XXX____X____XXXXXXXX_X
  O
XX XXXXXXX
X  XXX XXX
X XX    XX
X XX XX XX
X    X    O
XXXXXXXX X
</pre>
        </p>
      </li>
      <li>
        <p>
          Write a method that takes a delimited string to store a name and address,
          from which you can print a mailing label.
          For example, if the string contains
          <q>Sam Penn:14 Bridge St.:Hoboken, NJ 01881,</q>
          the method should print the label shown in the margin. \marginpar{\rule{8pc}{1pt} Sam Penn 14 Bridge St.
          Hoboken, NJ 01881 \rule{8pc}{1pt} }
        </p>
      </li>
      <li>
        <p>
          Design and implement a Java Swing program that plays Time Bomb with the user.
          Here's how the game works.
          The computer picks a secret word and then prints one asterisk for each letter in the word: * * * * *.  The user guesses at the letters in the word.
          For every correct guess,
          an asterisk is replaced by a letter:  * e * * *.  For every incorrect guess,
          the time bomb's fuse grows shorter.
          When the fuse disappears,
          after say, six incorrect guesses, the bomb explodes.
          Store the secret words in a delimited string and invent your own representation for the time bomb.
          Challenge:  The global replace function is a string-processing algorithm found in every word processor.
          Write a method that takes three <c>String</c> arguments:
          a document, a target string, and a replacement string.
          The method should replace every occurrence of the target string in the document with the replacement string.
          For example, if the document is
          <q>To be or not to be, that is the question,</q>
          and the target string is
          <q>be,</q>, and the replacement string is
          <q>see,</q>
          the result should be,
          <q>To see or not to see, that is the question.</q>
          Challenge:  Design and implement a Java Swing Program that plays the following game with the user.
          Let the user pick a letter between
          <em>A</em> and <em>Z</em>.
          Then let the computer guess, the secret letter.
          For every guess the player has to tell the computer whether it's too high or too low.
          The computer should be able to guess the letter within five guesses.
          Do you see why?
          Challenge: A <em>list</em> is a sequential data structure.
          Design a <c>List</c> class that uses a comma-delimited
<c>String</c><mdash/>such as,
          <q>a,b,c,d,12,dog</q>
          <mdash/>to implement a list.
          Implement the following methods for this class:
<pre>
void addItem( Object o );      // Use Object.toString()
String getItem(int position);
String toString();
void deleteItem(int position);
void deleteItem(String item);
int getPosition(String item);
String getHead();              // First element
List getTail();                // All but the first element
int length();                  // Number of items
</pre>Challenge: Use a delimited string to create a <c>PhoneList</c> class with an instance method to insert names and phone numbers,
          and a method to look up a phone number when a user provides a person's name.
          Since your class will take care of looking things up,
          you don't have to worry about keeping the list in alphabetical order.
          For example,
          the following string could be used as such a directory:
<pre>
mom:860-192-9876::bill g:654-0987-1234::mary lancelot:123-842-1100
</pre>
        </p>
      </li>
      <li>
        <p>
          Design and implement an application that displays a multi-line message in various fonts and sizes input by the user.
          Let the user choose from among a fixed selection of fonts, sizes,
          and styles.
        </p>
      </li>
    </ol>
  </subsection>
</section>