<section xml:id="chapter-summary28">
  <title>Special Topic: Databases and Personal Privacy</title>
  <p>
    During a typical day we all come in contact with lots of electronic databases that store information about us.
    If you use a supermarket discount card,
    every purchase you make is logged against your name in the supermarket's database.
    When you use your bank card at the ATM machine,
    your financial transaction is logged against your account.
    When you charge gasoline or buy dinner,
    those transactions are logged against your credit card account.
    If you visit the doctor or dentist,
    a detailed record of your visit is transmitted to your medical insurance company's database.
    If you receive a college loan,
    detailed financial information about you is entered into several different credit service bureaus.
    And so on.
  </p>
  <p>
    Should we be worried about how this information is used?
    Many privacy advocates say yes.
    With the computerization of medical records, phone records,
    financial transactions, driving records, and many other records,
    there is an enormous amount of personal information held in databases.
    At the same time,
    there are pressures from a number of sources for access to this information.
    Law-enforcement agencies want to use this information to monitor individuals.
    Corporations want to use it to help them market their products.
    Political organizations want to use it to help them market their candidates.
  </p>
  <p>
    Recently there has been pressure from government and industry in the United States to use the social security number (SSN) as a unique identifier.
    Such an identifier would make it easy to match personal information across different databases.
    Right now, the only thing your bank records, medical records,
    and supermarket records may have in common is your name,
    which is not a unique identifier.
    If all online databases were based on your SSN, it would be much simpler to create a complete profile.
    While this might improve services and reduce fraud and crime,
    it might also pose a significant threat to our privacy.
  </p>
  <p>
    The development of online databases serve many useful purposes.
    They help fight crime and reduce the cost of doing business.
    They help improve government and commercial services on which we have come to depend.
    On the other hand, databases can be and have been misused.
    They can be used by unauthorized individuals or agencies or in unauthorized ways.
    When they contain inaccurate information,
    they can cause personal inconvenience or even harm.
  </p>
  <p>
    There are a number of organizations that have sprung up to address the privacy issues raised by online databases.
    If you're interested in learning more about this issue,
    a good place to start would be the Web site maintained by the Electronic Privacy Information Center (EPIC) at
  </p>
<pre>
http://www.epic.org/
</pre>
  <p>
    \rule[0pt]{26pc}{2pt}
  </p>
  <p>
    \secSMH{Chapter Summary} \secKTH{Technical Terms} \begin{KT} absolute path name
  </p>
  <p>
    binary file
  </p>
  <p>
    buffering
  </p>
  <p>
    database
  </p>
  <p>
    data hierarchy
  </p>
  <p>
    directory
  </p>
  <p>
    end-of-file {character}
  </p>
  <p>
    field
  </p>
  <p>
    file
  </p>
  <p>
    filtering
  </p>
  <p>
    input
  </p>
  <p>
    object serialization
  </p>
  <p>
    output
  </p>
  <p>
    path
  </p>
  <p>
    record
  </p>
  <p>
    relative path name
  </p>
  <p>
    Unicode Text Format (UTF)
  </p>
  <p>
    \end{KT}
  </p>
  <p>
    \secSMHtwo{Summary of Important Points}
    <ul>
      <li>
        <p>
          A <em>file</em> is a collection of data stored on a disk.
          A <em>stream</em> is an object that delivers data to and from other objects.
        </p>
      </li>
      <li>
        <p>
          An <c>InputStream</c> is a stream that delivers data to a program from an external source<mdash/>such as the keyboard or a file.
<c>System.in</c> is an example of an <c>InputStream</c>. An
<c>OutputStream</c> is a stream that delivers data from a program to an external destination<mdash/>such as the screen or a file.   <c>System.out</c> is an example of an <c>OutputStream</c>.
        </p>
      </li>
      <li>
        <p>
          Data can be viewed as a hierarchy.
          From highest to lowest, a <em>database</em>
          is a collection of files.
          A <em>file</em> is a collection of records.
          A <em>record</em> is a collection of fields.
          A <em>field</em> is a collection of bytes.
          A <em>byte</em> is a collection of 8 bits.
          A <em>bit</em> is one binary digit, either 0 or 1.
        </p>
      </li>
      <li>
        <p>
          A <em>binary file</em> is a sequence of 0s and 1s that is interpreted as a sequence of bytes.
          A <em>text file</em> is a sequence of 0s and 1s that is interpreted as a sequence of characters.
          A text file can be read by any text editor,
          but a binary file cannot.
<c>InputStream</c> and <c>OutputStream</c> are abstract classes that serve as the root classes for reading and writing binary data.   <c>Reader</c> and <c>Writer</c> serve as root classes for text I/O. Buffering is a technique in which a <em>buffer</em>,
          a temporary region of memory,
          is used to store data while they are being input or output.
        </p>
      </li>
      <li>
        <p>
          A text file contains a sequence of characters divided into lines by the <c>\n</c> character and ending with a special
          <em>end-of-file</em> character.
        </p>
      </li>
      <li>
        <p>
          The standard algorithm for performing I/O on a file consists of three steps: (1) Open a stream to the file, (2) perform the I/O, and (3) close the stream.
        </p>
      </li>
      <li>
        <p>
          Designing effective I/O routines answers two questions: (1) What streams should I use to perform the I/O? (2) What methods should I use to do the reading or writing?
        </p>
      </li>
      <li>
        <p>
          To prevent damage to files when a program terminates abnormally,
          streams should be closed when they are no longer needed.
        </p>
      </li>
      <li>
        <p>
          Most I/O operations generate an <c>IOException</c> that should be caught in the I/O methods.
        </p>
      </li>
      <li>
        <p>
          Text input uses a different technique to determine when the end of a file has been reached.
          Text input methods return
<c>null</c> or <c>-1</c> when they attempt to read the special end-of-file character.
          Binary files don't contain an end-of-file character,
          so binary read methods throw an <c>EOFException</c> when they attempt to read past the end of the file.
        </p>
      </li>
      <li>
        <p>
          The <c>java.io.File</c> class provides methods that enable a program to interact with a file system.
          Its methods can be used to check a file's attributes,
          including its name, directory, and path.
        </p>
      </li>
      <li>
        <p>
          Streams can be joined together to perform I/O.<nbsp/>For example,
          a <c>DataOutputStream</c> and a <c>FileOutputStream</c> can be joined to perform output to a binary file.
        </p>
      </li>
      <li>
        <p>
          A binary file is
          <q>raw</q>
          in the sense that it contains no markers within it that allow you to tell where one data element ends and another begins.
          The interpretation of binary data is up to the program that reads or writes the file.
        </p>
      </li>
      <li>
        <p>
          Object serialization is the process of writing an object to an output stream.
          Object deserialization is the reverse process of reading a serialized object from an input stream.
          These processes use the <c>java.io.\-ObjectOutputStream</c> and
<c>java.io.ObjectInputStream</c> classes.
        </p>
      </li>
      <li>
        <p>
          The <c>JFileChooser</c> class provides a dialog box that enables the user to select a file and directory when opening or saving a file.
        </p>
      </li>
    </ul>
  </p>
  <p>
    \secANSHleft
    <ul>
      <li>
        <p>
          Because <c>FileWriter</c> contains a constructor that takes a file name argument, <c>FileWriter(String)</c>, it can be used with
<c>PrintWriter</c> to perform output to a text file:
<pre>
PrintWriter outStream =     //  Create output stream
    new PrintWriter(new FileWriter(fileName)); // Open file
outStream.print (display.getText());// Display text
outStream.close();                  // Close output stream
</pre>
        </p>
      </li>
      <li>
        <p>
          An empty file doesn't affect this loop.
          If the file is empty,
          it will print a <c>null</c> line.
          The test <c>line != null</c>, should come right after the <c>readLine()</c>, as it does in the <c>while</c> loop.
        </p>
      </li>
      <li>
        <p>
          This loop won't work on an empty text file.
          In that case, <c>ch</c> would be set to <m>-1</m>,
          and the attempt to cast it into a <c>char</c> would cause an error.
        </p>
      </li>
      <li>
        <p>
          <pre>
public void getFileAttributes(String fileName) {
    File file = new File (fileName);
    System.out.println(filename);
    System.out.println("absolute path:"
           + file.getAbsolutePath());
    System.out.println("length:" + file.length());
    if (file.isDirectory())
        System.out.println("Directory");
    else
        System.out.println("Not a Directory");} // getFileAttributes()
</pre>
        </p>
      </li>
      <li>
        <p>
          The <c>inStream.close()</c> statement is misplaced in <c>readIntegers()</c>. By placing it inside the same <c>try/catch</c> block as the read loop,
          it will get skipped and the stream will not be closed.
          The <c>EOFException</c> should be caught in a separate <c>try/catch</c> block from other exceptions,
          and it should just cause the read loop to exit.
        </p>
      </li>
      <li>
        <p>
          Yes, a binary file containing several <c>SomeObjects</c> would be
          <q>readable</q>
          by the <c>BinaryIO</c> program because the program will read a <c>String</c> followed by 64 bytes.
          However, <c>BinaryIO</c> would misinterpret the data,
          because it will assume that <c>n1</c> and
<c>n2</c> together comprise a single <c>int</c>, and <c>n3</c>(64 bits) will be interpreted as a <c>double</c>. A file of <c>SomeObject</c> s could not be read by the <c>ObjectIO</c> program,
          because
<c>SomeObject</c> does not implement the <c>Serializable</c> interface.
        </p>
      </li>
    </ul>
  </p>
  <p>
    \marginpar{<term>Note:</term> For programming exercises,
    <term>first</term> draw a UML class diagram describing all classes and their inheritance relationships and/or associations.}
  </p>
  <ol>
    <li>
      <p>
        Explain the difference between each of the following pairs of terms:
      </p>
      <ol>
        System.in and <c>System.out</c>. File and <em>directory</em>. Buffering and <em>filtering</em>. Absolute and <em>relative path name</em>. Input stream and <em>output stream</em>. File and <em>database</em>. Record and <em>field</em>. Binary file and <em>text file</em>. Directory and <em>database</em>.
      </ol>
    </li>
    <li>
      <p>
        Fill in the blanks.
        <ol>
          <li>
            <p>
              Unlike text files,
              binary files do not have a special \rule{60pt}{0.5pt} character.
            </p>
          </li>
          <li>
            <p>
              In Java, the <c>String</c> array parameter in the
<c>main()</c> method is used for \rule{60pt}{0.5pt} .
            </p>
          </li>
          <li>
            <p>
              \rule{60pt}{0.5pt} files are portable and platform independent.
            </p>
          </li>
          <li>
            <p>
              A \rule{70pt}{0.5pt} file created on one computer can't be read by another \mbox{computer.}
            </p>
          </li>
        </ol>
      </p>
    </li>
    <li>
      <p>
        Arrange the following kinds of data into their correct hierarchical relationships: <c>bit</c>,
<c>field</c>, <c>byte</c>, <c>record</c>, <c>database</c>,
<c>file</c>, <c>String</c>, <c>char</c>.
      </p>
    </li>
    <li>
      <p>
        In what different ways can the following string of 32 bits be interpreted?
<pre>
00010101111000110100000110011110
</pre>
      </p>
    </li>
    <li>
      <p>
        When reading a binary file,
        why is it necessary to use an infinite loop that's exited only when an exception occurs?
      </p>
    </li>
    <li>
      <p>
        Is it possible to have a text file with 10 characters and 0 lines?
        Explain.
      </p>
    </li>
    <li>
      <p>
        In reading a file,
        why is it necessary to attempt to read from the file before entering the read loop?
      </p>
    </li>
    <li>
      <p>
        When designing binary I/O, why is it especially important to design the input and output routines together?
      </p>
    </li>
    <li>
      <p>
        What's the difference between ASCII code and UTF code?
      </p>
    </li>
    <li>
      <p>
        Could the following string of bits possibly be a Java object?
        Explain.
<pre>
00010111000111101010101010000111001000100
11010010010101010010101001000001000000111
</pre>
      </p>
    </li>
    <li>
      <p>
        Write a method that could be added to the <c>TextIO</c> program to read a text file and print all lines containing a certain word.
        This should be a <c>void</c> method that takes two parameters: The name of the file and the word to search for.
        Lines not containing the word should not be printed.
      </p>
    </li>
    <li>
      <p>
        Write a program that reads a text file and reports the number of characters and lines contained in the file.
      </p>
    </li>
    <li>
      <p>
        Modify the program in the previous exercise so that it also counts the number of words in the file.
        (<em>Hint</em>: The
<c>StringTokenizer</c> class might be useful for this task.)
      </p>
    </li>
    <li>
      <p>
        Modify the <c>ObjectIO</c> program so that it allows the user to designate a file and then input <c>Student</c> data with the help of a GUI. As the user inputs data,
        each record should be written to the file.
      </p>
    </li>
    <li>
      <p>
        Write a program that will read a file of <c>int</c> s into memory,
        sort them in ascending order,
        and output the sorted data to a second file.
      </p>
    </li>
    <li>
      <p>
        Write a program that will read two files of <c>int</c> s, which are already sorted into ascending order,
        and merge their data.
        For example,
        if one file contains 1, 3, 5, 7, 9, and the other contains 2, 4, 6, 8, 10,
        then the merged file should contain 1, 2, 3, 4, 5, 6, 7, 8, 9, 10.
      </p>
    </li>
    <li>
      <p>
        Suppose you have a file of data for a geological survey.
        Each record consists of a longitude,
        a latitude, and an amount of rainfall,
        all represented by <c>double</c> s.
        Write a method to read this file's data and print them on the screen,
        one record per line.
        The method should be <c>void</c> and it should take the name of the file as its only parameter.
      </p>
    </li>
    <li>
      <p>
        Suppose you have the same data as in the previous exercise.
        Write a method that will generate 1,000 records of random data and write them to a file.
        The method should be <c>void</c> and should take the file's name as its parameter.
        Assume that longitudes have values in the range <m>+/-</m> 0 to 180 degrees,
        latitudes have values in the range <m>+/-</m> 0 to 90 degrees,
        and rainfalls have values in the range 0 to 20 inches.
      </p>
    </li>
    <li>
      <p>
        Design and write a file copy program that will work for either text files or binary files.
        The program should prompt the user for the names of each file and copy the data from the source file into the destination file.
        It should not overwrite an existing file, however.
        (<em>Hint</em>: Read and write the file as a file of <c>byte</c>.)
      </p>
    </li>
    <li>
      <p>
        Design a class,
        similar to <c>Student</c>, to represent an
<c>Address</c>. It should consist of street,
        city, state,
        and zip code and should contain its own <c>readFromFile()</c> and
<c>writeToFile()</c> methods.
      </p>
    </li>
    <li>
      <p>
        Using the class designed in the previous exercise,
        modify the <c>Student</c> class so that it contains an <c>Address</c> field.
        Modify the <c>ObjectIO</c> program to accommodate this new definition of <c>Student</c> and test your program.
      </p>
    </li>
    <li>
      <p>
        Write a program called <c>Directory</c>, which provides a listing of any directory contained in the current directory.
        This program should prompt the user for the name of the directory.
        It should then print a listing of that directory.
        The listing should contain the following information: The full path name of the directory,
        and then include the file name, length,
        and last modified date, and a read/write code for each file.
        The read/write code should be an <em>r</em>
        if the file is readable and a <em>w</em>
        if the file is writeable, in that order.
        Use a
        <q>-</q>
        to indicate not readable or not writeable.
        For example,
        a file that is readable but not writable will have the code
        <em>r</em>-. Here's an example listing:
<pre>
Listing for directory: myfiles
  name          length modified   code
  index.html    548    129098     rw
  index.gif     78     129190     rw
  me.html       682    128001     r-
  private.txt   1001   129000     --
</pre>Note that the <c>File.lastModified()</c> returns a <c>long</c>, which gives the modification time of the file.
        This number can't easily be converted into a date, so just report its value.
        Challenge: Modify the <c>OneRowNimGUI</c> class that is listed in Chapter<nbsp/>4's Figure<nbsp/> 4-25 so that the user can save the position of the game to a file or open and read a game position from a file.
        You should add two new <c>JButton</c> s to the GUI interface.
        Use the object serialization example as a model for your input and output streams.
        Challenge: In Unix systems,
        there's a program named
<c>grep</c> that can list the lines in a text file containing a certain string.
        Write a Java version of this program that prompts the user for the name of the file and the string to search for.
        Challenge: Write a program in Java named <c>Copy</c> to copy one file into another.
        The program should prompt the user for two file names, <c>filename1</c> and <c>filename2</c>. Both <c>filename1</c> and <c>filename2</c> must exist or the program should throw a <c>FileNotFoundException</c>. Although
<c>filename1</c> must be the name of a file (not a directory),
<c>filename2</c> may be either a file or a directory.
        If <c>filename2</c> is a file,
        then the program should copy <c>filename1</c> to
<c>filename2</c>. If <c>filename2</c> is a directory,
        then the program should simply copy <c>filename1</c> into <c>filename2</c>. That is,
        it should create a new file with the name <c>filename1</c> inside the
<c>filename2</c> directory,
        copy the old file to the new file,
        and then delete the old file.
      </p>
    </li>
  </ol>
</section>